//========================================================================
// GInsXmlRpcIFGenEng V2.41 (2021-04-26)
// This file was produced by means of an automated generator tool.
// Please modify content between labeled "{{...}}" positions ONLY!
//========================================================================
#if !defined(_GINSXMLRPCSTDAPI_TYPES_H)
#define _GINSXMLRPCSTDAPI_TYPES_H
//========================================================================
// Implemented methods
#define IMPLEMENT_GINSXMLRPCSTDAPI_GINS_NOTIFICATION
#define IMPLEMENT_GINSXMLRPCSTDAPI_GINS_TRACE
#define IMPLEMENT_GINSXMLRPCSTDAPI_GINS_CONNECT
#define IMPLEMENT_GINSXMLRPCSTDAPI_GINS_DISCONNECT


#include <string>
#include <vector>
#include <map>


// GInsXmlRpc
#include "GInsXmlRpcValue.h"
#include "ginsdefs.h"
#include "GInsXmlRpcStdAPI_Options.h"


/*{{Add_Own_Includes_Or_Declarations*/
/*}}Add_Own_Includes_Or_Declarations*/


//========================================================================
namespace GInsXmlRpcStdAPI {
//========================================================================
//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CAPIInfo
//------------------------------------------------------------------------
class CAPIInfo
{
public:
    static std::string const& Name(void)
    {
        static std::string str("GInsXmlRpcStdAPI");
        return str;
    }
    static std::string const& Revision(void)
    {
        static std::string str("0.1");
        return str;
    }
    static std::string const& GeneratorInfo(void)
    {
        static std::string str("GInsXmlRpcIFGenEng V2.41 (2021-04-26)");
        return str;
    }
}; // class CAPIInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Enum_NotifyReason
//------------------------------------------------------------------------
enum GIns_Enum_NotifyReason {
    GINS_NOTIFY_REASON_UNKNOWN = 0,
    GINS_NOTIFY_REASON_ADDED = 1,
    GINS_NOTIFY_REASON_REMOVED = 2,
    GINS_NOTIFY_REASON_CHANGED = 3,
    GINS_NOTIFY_REASON_DEFAULTED = 4,
}; // enum GIns_Enum_NotifyReason


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_Image
//------------------------------------------------------------------------
class CGIns_Base_Image : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Data(void)
        {
            static std::string str("Data");
            return str;
        }
    public:
        static std::string const& ItemName_Text(void)
        {
            static std::string str("Text");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_Image");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.0");
        return str;
    }
public:
    CGIns_Base_Image(void)
    {
        try
        {
            Construct_Name();
            Construct_Data();
            Construct_Text();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_Image(const CGIns_Base_Image& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_Image(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Data();
            Construct_Text();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_Image(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Data();
            Initialize_Text();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Data (Type: "std::string")
    protected:
        void Construct_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    Construct_Data();
                }
                if ((*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Data(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Data()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Data(void) const
        {
            return (*Value())[ItemName_Data()];
        }
        bool Get_Data(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Data()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Data()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_Image


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_ElementValue
//------------------------------------------------------------------------
class CGIns_Base_ElementValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Image(void)
        {
            static std::string str("Image");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_ElementValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.1");
        return str;
    }
public:
    CGIns_Base_ElementValue(void)
    {
        try
        {
            Construct_Description();
            Construct_Value();
            Construct_Image();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_ElementValue(const CGIns_Base_ElementValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_ElementValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Description();
            Construct_Value();
            Construct_Image();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_ElementValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Description();
            Initialize_Value();
            Initialize_Image();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Description (Type: "std::string")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Description()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Value()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Image (Type: "CGIns_Base_Image")
    protected:
        void Construct_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    CGIns_Base_Image InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Image()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    Construct_Image();
                }
                if ((*Value()).hasMember(ItemName_Image()))
                {
                    CGIns_Base_Image InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Image()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Image(const CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_Image()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Image Get_Image(void) const
        {
            return (*Value())[ItemName_Image()];
        }
        bool Get_Image(CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Image()]).valid())
                {
                    GetValue = (*Value())[ItemName_Image()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_ElementValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_Point
//------------------------------------------------------------------------
class CGIns_Base_Point : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ValueX(void)
        {
            static std::string str("ValueX");
            return str;
        }
    public:
        static std::string const& ItemName_ValueY(void)
        {
            static std::string str("ValueY");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_Point");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.2");
        return str;
    }
public:
    CGIns_Base_Point(void)
    {
        try
        {
            Construct_ValueX();
            Construct_ValueY();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_Point(const CGIns_Base_Point& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_Point(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ValueX();
            Construct_ValueY();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_Point(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ValueX();
            Initialize_ValueY();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item ValueX (Type: "double")
protected:
    void Construct_ValueX(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ValueX()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_ValueX()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ValueX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueX()))
                {
                    Construct_ValueX();
                }
                if ((*Value()).hasMember(ItemName_ValueX()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_ValueX()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueX(double SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueX()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_ValueX(void) const
        {
            double GetValue = (*Value())[ItemName_ValueX()];
            return (double)GetValue;
        }
        bool Get_ValueX(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueX()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_ValueX()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ValueY (Type: "double")
protected:
    void Construct_ValueY(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ValueY()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_ValueY()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ValueY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueY()))
                {
                    Construct_ValueY();
                }
                if ((*Value()).hasMember(ItemName_ValueY()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_ValueY()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueY(double SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueY()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_ValueY(void) const
        {
            double GetValue = (*Value())[ItemName_ValueY()];
            return (double)GetValue;
        }
        bool Get_ValueY(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueY()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_ValueY()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_Point


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_Range
//------------------------------------------------------------------------
class CGIns_Base_Range : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ValueMin(void)
        {
            static std::string str("ValueMin");
            return str;
        }
    public:
        static std::string const& ItemName_ValueMax(void)
        {
            static std::string str("ValueMax");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_Range");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.3");
        return str;
    }
public:
    CGIns_Base_Range(void)
    {
        try
        {
            Construct_ValueMin();
            Construct_ValueMax();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_Range(const CGIns_Base_Range& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_Range(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ValueMin();
            Construct_ValueMax();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_Range(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ValueMin();
            Initialize_ValueMax();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item ValueMin (Type: "double")
protected:
    void Construct_ValueMin(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ValueMin()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_ValueMin()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ValueMin(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMin()))
                {
                    Construct_ValueMin();
                }
                if ((*Value()).hasMember(ItemName_ValueMin()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_ValueMin()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueMin(double SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueMin()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_ValueMin(void) const
        {
            double GetValue = (*Value())[ItemName_ValueMin()];
            return (double)GetValue;
        }
        bool Get_ValueMin(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueMin()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_ValueMin()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ValueMax (Type: "double")
protected:
    void Construct_ValueMax(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ValueMax()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_ValueMax()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ValueMax(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMax()))
                {
                    Construct_ValueMax();
                }
                if ((*Value()).hasMember(ItemName_ValueMax()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_ValueMax()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueMax(double SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueMax()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_ValueMax(void) const
        {
            double GetValue = (*Value())[ItemName_ValueMax()];
            return (double)GetValue;
        }
        bool Get_ValueMax(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueMax()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_ValueMax()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_Range


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_Message
//------------------------------------------------------------------------
class CGIns_Base_Message : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Sender(void)
        {
            static std::string str("Sender");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_Topic(void)
        {
            static std::string str("Topic");
            return str;
        }
    public:
        static std::string const& ItemName_Text(void)
        {
            static std::string str("Text");
            return str;
        }
    public:
        static std::string const& ItemName_Args(void)
        {
            static std::string str("Args");
            return str;
        }
    public:
        static std::string const& ItemName_Timestamp(void)
        {
            static std::string str("Timestamp");
            return str;
        }
    public:
        static std::string const& ItemName_Index(void)
        {
            static std::string str("Index");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_Message");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.4");
        return str;
    }
public:
    CGIns_Base_Message(void)
    {
        try
        {
            Construct_Sender();
            Construct_Type();
            Construct_ID();
            Construct_Topic();
            Construct_Text();
            Construct_Args();
            Construct_Timestamp();
            Construct_Index();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_Message(const CGIns_Base_Message& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_Message(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Sender();
            Construct_Type();
            Construct_ID();
            Construct_Topic();
            Construct_Text();
            Construct_Args();
            Construct_Timestamp();
            Construct_Index();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_Message(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Sender();
            Initialize_Type();
            Initialize_ID();
            Initialize_Topic();
            Initialize_Text();
            Initialize_Args();
            Initialize_Timestamp();
            Initialize_Index();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Sender (Type: "std::string")
    protected:
        void Construct_Sender(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Sender()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Sender()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Sender(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Sender()))
                {
                    Construct_Sender();
                }
                if ((*Value()).hasMember(ItemName_Sender()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Sender()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Sender(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Sender()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Sender(void) const
        {
            return (*Value())[ItemName_Sender()];
        }
        bool Get_Sender(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Sender()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Sender()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "std::string")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Type()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Type()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Topic (Type: "std::string")
    protected:
        void Construct_Topic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Topic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Topic()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Topic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Topic()))
                {
                    Construct_Topic();
                }
                if ((*Value()).hasMember(ItemName_Topic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Topic()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Topic(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Topic()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Topic(void) const
        {
            return (*Value())[ItemName_Topic()];
        }
        bool Get_Topic(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Topic()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Topic()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Args (Type: "std::string[0]")
    protected:
        void Construct_Args(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Args()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Args()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Args(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Args()))
                {
                    Construct_Args();
                }
                if ((*Value()).hasMember(ItemName_Args()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Args()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Args(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_Args()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Args(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Args()))
                {
                    return (*Value())[ItemName_Args()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Args(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Args()))
                {
                    (*Value())[ItemName_Args()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Args(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_Args()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Args(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Args()))
                {
                    (*Value())[ItemName_Args()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Args(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_Args())
                {
                    SetSize_Args(ArrayIndex + 1);
                }
                (*Value())[ItemName_Args()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Args(int ArrayIndex) const
        {
            return (*Value())[ItemName_Args()][ArrayIndex];
        }
        bool Get_Args(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Args()))
                {
                    if (((*Value())[ItemName_Args()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_Args()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timestamp (Type: "struct tm")
    protected:
        void Construct_Timestamp(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timestamp()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Timestamp()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timestamp(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timestamp()))
                {
                    Construct_Timestamp();
                }
                if ((*Value()).hasMember(ItemName_Timestamp()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Timestamp()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timestamp(const struct tm& SetValue)
        {
            try 
            {
                (*Value())[ItemName_Timestamp()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        struct tm Get_Timestamp(void) const
        {
            return (*Value())[ItemName_Timestamp()];
        }
        bool Get_Timestamp(struct tm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timestamp()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timestamp()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Index (Type: "int32_t")
protected:
    void Construct_Index(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Index()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Index()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Index(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Index()))
                {
                    Construct_Index();
                }
                if ((*Value()).hasMember(ItemName_Index()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Index()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Index(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Index()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Index(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Index()];
            return (int32_t)GetValue;
        }
        bool Get_Index(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Index()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Index()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_Message


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_RawValue
//------------------------------------------------------------------------
class CGIns_Base_RawValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_RawValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.5");
        return str;
    }
public:
    CGIns_Base_RawValue(void)
    {
        try
        {
            Construct_Description();
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_RawValue(const CGIns_Base_RawValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_RawValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Description();
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_RawValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Description();
            Initialize_Value();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Description (Type: "std::string")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Description()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Value()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_RawValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_PDF
//------------------------------------------------------------------------
class CGIns_Base_PDF : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Data(void)
        {
            static std::string str("Data");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_PDF");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.6");
        return str;
    }
public:
    CGIns_Base_PDF(void)
    {
        try
        {
            Construct_Name();
            Construct_Data();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_PDF(const CGIns_Base_PDF& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_PDF(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Data();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_PDF(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Data();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Data (Type: "std::string")
    protected:
        void Construct_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    Construct_Data();
                }
                if ((*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Data(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Data()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Data(void) const
        {
            return (*Value())[ItemName_Data()];
        }
        bool Get_Data(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Data()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Data()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_PDF


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Base_ZIP
//------------------------------------------------------------------------
class CGIns_Base_ZIP : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Data(void)
        {
            static std::string str("Data");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Base_ZIP");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.7");
        return str;
    }
public:
    CGIns_Base_ZIP(void)
    {
        try
        {
            Construct_Name();
            Construct_Data();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Base_ZIP(const CGIns_Base_ZIP& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Base_ZIP(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Data();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Base_ZIP(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Data();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Data (Type: "std::string")
    protected:
        void Construct_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Data(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Data()))
                {
                    Construct_Data();
                }
                if ((*Value()).hasMember(ItemName_Data()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Data()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Data(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Data()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Data(void) const
        {
            return (*Value())[ItemName_Data()];
        }
        bool Get_Data(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Data()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Data()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Base_ZIP


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Message
//------------------------------------------------------------------------
class CGIns_Info_Message : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Reason(void)
        {
            static std::string str("Reason");
            return str;
        }
    public:
        static std::string const& ItemName_Location(void)
        {
            static std::string str("Location");
            return str;
        }
    public:
        static std::string const& ItemName_Text(void)
        {
            static std::string str("Text");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Message");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.100");
        return str;
    }
public:
    CGIns_Info_Message(void)
    {
        try
        {
            Construct_Reason();
            Construct_Location();
            Construct_Text();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Message(const CGIns_Info_Message& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Message(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Reason();
            Construct_Location();
            Construct_Text();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Message(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Reason();
            Initialize_Location();
            Initialize_Text();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Reason (Type: "enum GIns_Enum_NotifyReason")
    protected:
        void Construct_Reason(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reason()))
                {
                    enum GIns_Enum_NotifyReason InitValue;
                    InitValue = GINS_NOTIFY_REASON_UNKNOWN;
                    (*Value())[ItemName_Reason()] = (int)InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Reason(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reason()))
                {
                    Construct_Reason();
                }
                if ((*Value()).hasMember(ItemName_Reason()))
                {
                    enum GIns_Enum_NotifyReason InitValue;
                    InitValue = GINS_NOTIFY_REASON_UNKNOWN;
                    (*Value())[ItemName_Reason()] = (int)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Reason(enum GIns_Enum_NotifyReason SetValue)
        {
            try
            {
                (*Value())[ItemName_Reason()] = (int)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        enum GIns_Enum_NotifyReason Get_Reason(void) const
        {
            int GetValue = (*Value())[ItemName_Reason()];
            return (enum GIns_Enum_NotifyReason)GetValue;
        }
        bool Get_Reason(enum GIns_Enum_NotifyReason& GetValue) const
        {
            try
            {
                if ((*Value())[ItemName_Reason()].valid())
                {
                    GetValue = (enum GIns_Enum_NotifyReason)((int)((*Value())[ItemName_Reason()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Location (Type: "std::string")
    protected:
        void Construct_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Location()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    Construct_Location();
                }
                if ((*Value()).hasMember(ItemName_Location()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Location()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Location(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Location()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Location(void) const
        {
            return (*Value())[ItemName_Location()];
        }
        bool Get_Location(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Location()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Location()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Message


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Notification
//------------------------------------------------------------------------
class CGIns_Info_Notification : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Text(void)
        {
            static std::string str("Text");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_CoreID(void)
        {
            static std::string str("CoreID");
            return str;
        }
    public:
        static std::string const& ItemName_Messages(void)
        {
            static std::string str("Messages");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Notification");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.101");
        return str;
    }
public:
    CGIns_Info_Notification(void)
    {
        try
        {
            Construct_Text();
            Construct_ID();
            Construct_CoreID();
            Construct_Messages();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Notification(const CGIns_Info_Notification& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Notification(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Text();
            Construct_ID();
            Construct_CoreID();
            Construct_Messages();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Notification(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Text();
            Initialize_ID();
            Initialize_CoreID();
            Initialize_Messages();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CoreID (Type: "std::string")
    protected:
        void Construct_CoreID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CoreID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_CoreID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CoreID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CoreID()))
                {
                    Construct_CoreID();
                }
                if ((*Value()).hasMember(ItemName_CoreID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_CoreID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CoreID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_CoreID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_CoreID(void) const
        {
            return (*Value())[ItemName_CoreID()];
        }
        bool Get_CoreID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CoreID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_CoreID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Messages (Type: "CGIns_Info_Message[0]")
    protected:
        void Construct_Messages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Messages()))
                {
                    CGIns_Info_Message InitValue;
                    (*Value())[ItemName_Messages()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Messages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Messages()))
                {
                    Construct_Messages();
                }
                if ((*Value()).hasMember(ItemName_Messages()))
                {
                    CGIns_Info_Message InitValue;
                    (*Value())[ItemName_Messages()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Messages(int NewSize)
        {
            try
            {
                CGIns_Info_Message InitValue;
                (*Value())[ItemName_Messages()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Messages(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Messages()))
                {
                    return (*Value())[ItemName_Messages()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Messages(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Messages()))
                {
                    (*Value())[ItemName_Messages()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Messages(int ArrayIndex, CGIns_Info_Message SetValue)
        {
            try
            {
                (*Value())[ItemName_Messages()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Messages(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Messages()))
                {
                    (*Value())[ItemName_Messages()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Messages(int ArrayIndex, const CGIns_Info_Message& SetValue)
        {
            try
            {
                (*Value())[ItemName_Messages()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Messages()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Message Get_Messages(int ArrayIndex) const
        {
            return (*Value())[ItemName_Messages()][ArrayIndex];
        }
        bool Get_Messages(int ArrayIndex, CGIns_Info_Message& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Messages()))
                {
                    if (((*Value())[ItemName_Messages()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Messages()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Notification


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Event
//------------------------------------------------------------------------
class CGIns_Info_Event : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Timestamp(void)
        {
            static std::string str("Timestamp");
            return str;
        }
    public:
        static std::string const& ItemName_Object(void)
        {
            static std::string str("Object");
            return str;
        }
    public:
        static std::string const& ItemName_Code(void)
        {
            static std::string str("Code");
            return str;
        }
    public:
        static std::string const& ItemName_Message(void)
        {
            static std::string str("Message");
            return str;
        }
    public:
        static std::string const& ItemName_Count(void)
        {
            static std::string str("Count");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Event");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.118");
        return str;
    }
public:
    CGIns_Info_Event(void)
    {
        try
        {
            Construct_Type();
            Construct_Timestamp();
            Construct_Object();
            Construct_Code();
            Construct_Message();
            Construct_Count();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Event(const CGIns_Info_Event& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Event(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Timestamp();
            Construct_Object();
            Construct_Code();
            Construct_Message();
            Construct_Count();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Event(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Timestamp();
            Initialize_Object();
            Initialize_Code();
            Initialize_Message();
            Initialize_Count();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "std::string")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Type()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Type()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timestamp (Type: "struct tm")
    protected:
        void Construct_Timestamp(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timestamp()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Timestamp()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timestamp(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timestamp()))
                {
                    Construct_Timestamp();
                }
                if ((*Value()).hasMember(ItemName_Timestamp()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Timestamp()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timestamp(const struct tm& SetValue)
        {
            try 
            {
                (*Value())[ItemName_Timestamp()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        struct tm Get_Timestamp(void) const
        {
            return (*Value())[ItemName_Timestamp()];
        }
        bool Get_Timestamp(struct tm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timestamp()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timestamp()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Object (Type: "std::string")
    protected:
        void Construct_Object(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Object()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Object()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Object(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Object()))
                {
                    Construct_Object();
                }
                if ((*Value()).hasMember(ItemName_Object()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Object()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Object(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Object()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Object(void) const
        {
            return (*Value())[ItemName_Object()];
        }
        bool Get_Object(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Object()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Object()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Code (Type: "int32_t")
protected:
    void Construct_Code(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Code()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Code()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Code(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Code()))
                {
                    Construct_Code();
                }
                if ((*Value()).hasMember(ItemName_Code()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Code()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Code(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Code()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Code(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Code()];
            return (int32_t)GetValue;
        }
        bool Get_Code(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Code()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Code()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Message (Type: "std::string")
    protected:
        void Construct_Message(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Message()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Message()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Message(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Message()))
                {
                    Construct_Message();
                }
                if ((*Value()).hasMember(ItemName_Message()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Message()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Message(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Message()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Message(void) const
        {
            return (*Value())[ItemName_Message()];
        }
        bool Get_Message(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Message()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Message()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Count (Type: "int32_t")
protected:
    void Construct_Count(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Count()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Count()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Count(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Count()))
                {
                    Construct_Count();
                }
                if ((*Value()).hasMember(ItemName_Count()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Count()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Count(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Count()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Count(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Count()];
            return (int32_t)GetValue;
        }
        bool Get_Count(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Count()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Count()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Event


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_State
//------------------------------------------------------------------------
class CGIns_Info_State : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_State");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.102");
        return str;
    }
public:
    CGIns_Info_State(void)
    {
        try
        {
            Construct_Description();
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_State(const CGIns_Info_State& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_State(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Description();
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_State(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Description();
            Initialize_Value();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Description (Type: "std::string")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Description()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Description()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Value (Type: "int64_t")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Value(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Value()];
            return (int64_t)GetValue;
        }
        bool Get_Value(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_State


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_ItemState
//------------------------------------------------------------------------
class CGIns_Info_ItemState : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_RefID(void)
        {
            static std::string str("RefID");
            return str;
        }
    public:
        static std::string const& ItemName_State(void)
        {
            static std::string str("State");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_ItemState");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.103");
        return str;
    }
public:
    CGIns_Info_ItemState(void)
    {
        try
        {
            Construct_Name();
            Construct_RefID();
            Construct_State();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_ItemState(const CGIns_Info_ItemState& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_ItemState(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_RefID();
            Construct_State();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_ItemState(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_RefID();
            Initialize_State();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RefID (Type: "std::string")
    protected:
        void Construct_RefID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RefID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_RefID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RefID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RefID()))
                {
                    Construct_RefID();
                }
                if ((*Value()).hasMember(ItemName_RefID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_RefID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RefID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_RefID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_RefID(void) const
        {
            return (*Value())[ItemName_RefID()];
        }
        bool Get_RefID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RefID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_RefID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item State (Type: "CGIns_Info_State")
    protected:
        void Construct_State(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_State()))
                {
                    CGIns_Info_State InitValue;
                    (*Value())[ItemName_State()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_State(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_State()))
                {
                    Construct_State();
                }
                if ((*Value()).hasMember(ItemName_State()))
                {
                    CGIns_Info_State InitValue;
                    (*Value())[ItemName_State()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_State(const CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_State()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_State Get_State(void) const
        {
            return (*Value())[ItemName_State()];
        }
        bool Get_State(CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_State()]).valid())
                {
                    GetValue = (*Value())[ItemName_State()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_ItemState


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_States
//------------------------------------------------------------------------
class CGIns_Info_States : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_States");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.104");
        return str;
    }
public:
    CGIns_Info_States(void)
    {
        try
        {
            Construct_ID();
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_States(const CGIns_Info_States& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_States(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_States(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_List();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Info_ItemState[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Info_ItemState InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Info_ItemState InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Info_ItemState InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Info_ItemState SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Info_ItemState& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_ItemState Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Info_ItemState& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_States


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_TraceItem
//------------------------------------------------------------------------
class CGIns_Info_TraceItem : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Text(void)
        {
            static std::string str("Text");
            return str;
        }
    public:
        static std::string const& ItemName_ThreadID(void)
        {
            static std::string str("ThreadID");
            return str;
        }
    public:
        static std::string const& ItemName_Time(void)
        {
            static std::string str("Time");
            return str;
        }
    public:
        static std::string const& ItemName_Priority(void)
        {
            static std::string str("Priority");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_TraceItem");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.105");
        return str;
    }
public:
    CGIns_Info_TraceItem(void)
    {
        try
        {
            Construct_Text();
            Construct_ThreadID();
            Construct_Time();
            Construct_Priority();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_TraceItem(const CGIns_Info_TraceItem& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_TraceItem(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Text();
            Construct_ThreadID();
            Construct_Time();
            Construct_Priority();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_TraceItem(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Text();
            Initialize_ThreadID();
            Initialize_Time();
            Initialize_Priority();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ThreadID (Type: "int32_t")
protected:
    void Construct_ThreadID(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ThreadID()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ThreadID()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ThreadID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ThreadID()))
                {
                    Construct_ThreadID();
                }
                if ((*Value()).hasMember(ItemName_ThreadID()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ThreadID()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ThreadID(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ThreadID()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ThreadID(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ThreadID()];
            return (int32_t)GetValue;
        }
        bool Get_ThreadID(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ThreadID()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ThreadID()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Time (Type: "struct tm")
    protected:
        void Construct_Time(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Time()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Time()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Time(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Time()))
                {
                    Construct_Time();
                }
                if ((*Value()).hasMember(ItemName_Time()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Time()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Time(const struct tm& SetValue)
        {
            try 
            {
                (*Value())[ItemName_Time()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        struct tm Get_Time(void) const
        {
            return (*Value())[ItemName_Time()];
        }
        bool Get_Time(struct tm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Time()]).valid())
                {
                    GetValue = (*Value())[ItemName_Time()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Priority (Type: "int32_t")
protected:
    void Construct_Priority(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Priority()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Priority()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Priority(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Priority()))
                {
                    Construct_Priority();
                }
                if ((*Value()).hasMember(ItemName_Priority()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Priority()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Priority(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Priority()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Priority(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Priority()];
            return (int32_t)GetValue;
        }
        bool Get_Priority(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Priority()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Priority()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_TraceItem


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_DeviceType
//------------------------------------------------------------------------
class CGIns_Info_DeviceType : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Main(void)
        {
            static std::string str("Main");
            return str;
        }
    public:
        static std::string const& ItemName_Sub(void)
        {
            static std::string str("Sub");
            return str;
        }
    public:
        static std::string const& ItemName_Function(void)
        {
            static std::string str("Function");
            return str;
        }
    public:
        static std::string const& ItemName_Casing(void)
        {
            static std::string str("Casing");
            return str;
        }
    public:
        static std::string const& ItemName_MID(void)
        {
            static std::string str("MID");
            return str;
        }
    public:
        static std::string const& ItemName_UniqueType(void)
        {
            static std::string str("UniqueType");
            return str;
        }
    public:
        static std::string const& ItemName_VendorName(void)
        {
            static std::string str("VendorName");
            return str;
        }
    public:
        static std::string const& ItemName_SeriesName(void)
        {
            static std::string str("SeriesName");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_DeviceType");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.106");
        return str;
    }
public:
    CGIns_Info_DeviceType(void)
    {
        try
        {
            Construct_Main();
            Construct_Sub();
            Construct_Function();
            Construct_Casing();
            Construct_MID();
            Construct_UniqueType();
            Construct_VendorName();
            Construct_SeriesName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_DeviceType(const CGIns_Info_DeviceType& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_DeviceType(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Main();
            Construct_Sub();
            Construct_Function();
            Construct_Casing();
            Construct_MID();
            Construct_UniqueType();
            Construct_VendorName();
            Construct_SeriesName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_DeviceType(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Main();
            Initialize_Sub();
            Initialize_Function();
            Initialize_Casing();
            Initialize_MID();
            Initialize_UniqueType();
            Initialize_VendorName();
            Initialize_SeriesName();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Main (Type: "int32_t")
protected:
    void Construct_Main(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Main()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Main()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Main(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Main()))
                {
                    Construct_Main();
                }
                if ((*Value()).hasMember(ItemName_Main()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Main()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Main(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Main()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Main(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Main()];
            return (int32_t)GetValue;
        }
        bool Get_Main(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Main()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Main()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Sub (Type: "int32_t")
protected:
    void Construct_Sub(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Sub()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Sub()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Sub(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Sub()))
                {
                    Construct_Sub();
                }
                if ((*Value()).hasMember(ItemName_Sub()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Sub()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Sub(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Sub()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Sub(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Sub()];
            return (int32_t)GetValue;
        }
        bool Get_Sub(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Sub()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Sub()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Function (Type: "int32_t")
protected:
    void Construct_Function(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Function()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Function()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Function(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Function()))
                {
                    Construct_Function();
                }
                if ((*Value()).hasMember(ItemName_Function()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Function()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Function(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Function()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Function(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Function()];
            return (int32_t)GetValue;
        }
        bool Get_Function(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Function()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Function()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Casing (Type: "int32_t")
protected:
    void Construct_Casing(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Casing()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Casing()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Casing(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Casing()))
                {
                    Construct_Casing();
                }
                if ((*Value()).hasMember(ItemName_Casing()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Casing()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Casing(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Casing()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Casing(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Casing()];
            return (int32_t)GetValue;
        }
        bool Get_Casing(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Casing()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Casing()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MID (Type: "std::string")
    protected:
        void Construct_MID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MID()))
                {
                    Construct_MID();
                }
                if ((*Value()).hasMember(ItemName_MID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_MID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_MID(void) const
        {
            return (*Value())[ItemName_MID()];
        }
        bool Get_MID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_MID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UniqueType (Type: "std::string")
    protected:
        void Construct_UniqueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UniqueType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UniqueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UniqueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UniqueType()))
                {
                    Construct_UniqueType();
                }
                if ((*Value()).hasMember(ItemName_UniqueType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UniqueType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UniqueType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UniqueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UniqueType(void) const
        {
            return (*Value())[ItemName_UniqueType()];
        }
        bool Get_UniqueType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UniqueType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UniqueType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VendorName (Type: "std::string")
    protected:
        void Construct_VendorName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VendorName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_VendorName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VendorName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VendorName()))
                {
                    Construct_VendorName();
                }
                if ((*Value()).hasMember(ItemName_VendorName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_VendorName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VendorName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_VendorName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_VendorName(void) const
        {
            return (*Value())[ItemName_VendorName()];
        }
        bool Get_VendorName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VendorName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_VendorName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SeriesName (Type: "std::string")
    protected:
        void Construct_SeriesName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SeriesName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SeriesName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SeriesName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SeriesName()))
                {
                    Construct_SeriesName();
                }
                if ((*Value()).hasMember(ItemName_SeriesName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SeriesName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SeriesName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SeriesName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SeriesName(void) const
        {
            return (*Value())[ItemName_SeriesName()];
        }
        bool Get_SeriesName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SeriesName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SeriesName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_DeviceType


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_StringValue
//------------------------------------------------------------------------
class CGIns_Info_StringValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_PresType(void)
        {
            static std::string str("PresType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_StringValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.107");
        return str;
    }
public:
    CGIns_Info_StringValue(void)
    {
        try
        {
            Construct_Value();
            Construct_PresType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_StringValue(const CGIns_Info_StringValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_StringValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_PresType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_StringValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_PresType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Value()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PresType (Type: "std::string")
    protected:
        void Construct_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    Construct_PresType();
                }
                if ((*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PresType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PresType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PresType(void) const
        {
            return (*Value())[ItemName_PresType()];
        }
        bool Get_PresType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PresType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PresType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_StringValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue
//------------------------------------------------------------------------
class CGIns_Info_DateTimeValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_DateTimeValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.108");
        return str;
    }
public:
    CGIns_Info_DateTimeValue(void)
    {
        try
        {
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_DateTimeValue(const CGIns_Info_DateTimeValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_DateTimeValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_DateTimeValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Value (Type: "struct tm")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const struct tm& SetValue)
        {
            try 
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        struct tm Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(struct tm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_DateTimeValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Version_Source
//------------------------------------------------------------------------
class CGIns_Info_Version_Source : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Revision(void)
        {
            static std::string str("Revision");
            return str;
        }
    public:
        static std::string const& ItemName_AddInfo(void)
        {
            static std::string str("AddInfo");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Version_Source");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.109");
        return str;
    }
public:
    CGIns_Info_Version_Source(void)
    {
        try
        {
            Construct_Name();
            Construct_Revision();
            Construct_AddInfo();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Version_Source(const CGIns_Info_Version_Source& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Version_Source(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Revision();
            Construct_AddInfo();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Version_Source(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Revision();
            Initialize_AddInfo();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Revision (Type: "std::string")
    protected:
        void Construct_Revision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Revision()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Revision()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Revision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Revision()))
                {
                    Construct_Revision();
                }
                if ((*Value()).hasMember(ItemName_Revision()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Revision()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Revision(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Revision()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Revision(void) const
        {
            return (*Value())[ItemName_Revision()];
        }
        bool Get_Revision(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Revision()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Revision()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AddInfo (Type: "std::string")
    protected:
        void Construct_AddInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddInfo()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_AddInfo()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AddInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddInfo()))
                {
                    Construct_AddInfo();
                }
                if ((*Value()).hasMember(ItemName_AddInfo()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_AddInfo()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AddInfo(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_AddInfo()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_AddInfo(void) const
        {
            return (*Value())[ItemName_AddInfo()];
        }
        bool Get_AddInfo(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AddInfo()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_AddInfo()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Version_Source


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Version
//------------------------------------------------------------------------
class CGIns_Info_Version : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Major(void)
        {
            static std::string str("Major");
            return str;
        }
    public:
        static std::string const& ItemName_Minor(void)
        {
            static std::string str("Minor");
            return str;
        }
    public:
        static std::string const& ItemName_Build(void)
        {
            static std::string str("Build");
            return str;
        }
    public:
        static std::string const& ItemName_IsRelease(void)
        {
            static std::string str("IsRelease");
            return str;
        }
    public:
        static std::string const& ItemName_Sources(void)
        {
            static std::string str("Sources");
            return str;
        }
    public:
        static std::string const& ItemName_Copyright(void)
        {
            static std::string str("Copyright");
            return str;
        }
    public:
        static std::string const& ItemName_BuildDateTime(void)
        {
            static std::string str("BuildDateTime");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Version");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.110");
        return str;
    }
public:
    CGIns_Info_Version(void)
    {
        try
        {
            Construct_Name();
            Construct_Major();
            Construct_Minor();
            Construct_Build();
            Construct_IsRelease();
            Construct_Sources();
            Construct_Copyright();
            Construct_BuildDateTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Version(const CGIns_Info_Version& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Version(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Major();
            Construct_Minor();
            Construct_Build();
            Construct_IsRelease();
            Construct_Sources();
            Construct_Copyright();
            Construct_BuildDateTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Version(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Major();
            Initialize_Minor();
            Initialize_Build();
            Initialize_IsRelease();
            Initialize_Sources();
            Initialize_Copyright();
            Initialize_BuildDateTime();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Major (Type: "std::string")
    protected:
        void Construct_Major(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Major()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Major()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Major(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Major()))
                {
                    Construct_Major();
                }
                if ((*Value()).hasMember(ItemName_Major()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Major()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Major(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Major()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Major(void) const
        {
            return (*Value())[ItemName_Major()];
        }
        bool Get_Major(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Major()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Major()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Minor (Type: "std::string")
    protected:
        void Construct_Minor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Minor()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Minor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Minor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Minor()))
                {
                    Construct_Minor();
                }
                if ((*Value()).hasMember(ItemName_Minor()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Minor()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Minor(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Minor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Minor(void) const
        {
            return (*Value())[ItemName_Minor()];
        }
        bool Get_Minor(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Minor()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Minor()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Build (Type: "std::string")
    protected:
        void Construct_Build(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Build()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Build()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Build(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Build()))
                {
                    Construct_Build();
                }
                if ((*Value()).hasMember(ItemName_Build()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Build()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Build(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Build()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Build(void) const
        {
            return (*Value())[ItemName_Build()];
        }
        bool Get_Build(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Build()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Build()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IsRelease (Type: "bool")
protected:
    void Construct_IsRelease(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IsRelease()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IsRelease()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IsRelease(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IsRelease()))
                {
                    Construct_IsRelease();
                }
                if ((*Value()).hasMember(ItemName_IsRelease()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IsRelease()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IsRelease(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IsRelease()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IsRelease(void) const
        {
            bool GetValue = (*Value())[ItemName_IsRelease()];
            return (bool)GetValue;
        }
        bool Get_IsRelease(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IsRelease()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IsRelease()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Sources (Type: "CGIns_Info_Version_Source[0]")
    protected:
        void Construct_Sources(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Sources()))
                {
                    CGIns_Info_Version_Source InitValue;
                    (*Value())[ItemName_Sources()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Sources(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Sources()))
                {
                    Construct_Sources();
                }
                if ((*Value()).hasMember(ItemName_Sources()))
                {
                    CGIns_Info_Version_Source InitValue;
                    (*Value())[ItemName_Sources()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Sources(int NewSize)
        {
            try
            {
                CGIns_Info_Version_Source InitValue;
                (*Value())[ItemName_Sources()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Sources(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Sources()))
                {
                    return (*Value())[ItemName_Sources()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Sources(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Sources()))
                {
                    (*Value())[ItemName_Sources()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Sources(int ArrayIndex, CGIns_Info_Version_Source SetValue)
        {
            try
            {
                (*Value())[ItemName_Sources()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Sources(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Sources()))
                {
                    (*Value())[ItemName_Sources()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Sources(int ArrayIndex, const CGIns_Info_Version_Source& SetValue)
        {
            try
            {
                (*Value())[ItemName_Sources()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Sources()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Version_Source Get_Sources(int ArrayIndex) const
        {
            return (*Value())[ItemName_Sources()][ArrayIndex];
        }
        bool Get_Sources(int ArrayIndex, CGIns_Info_Version_Source& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Sources()))
                {
                    if (((*Value())[ItemName_Sources()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Sources()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Copyright (Type: "std::string")
    protected:
        void Construct_Copyright(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Copyright()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Copyright()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Copyright(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Copyright()))
                {
                    Construct_Copyright();
                }
                if ((*Value()).hasMember(ItemName_Copyright()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Copyright()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Copyright(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Copyright()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Copyright(void) const
        {
            return (*Value())[ItemName_Copyright()];
        }
        bool Get_Copyright(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Copyright()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Copyright()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BuildDateTime (Type: "struct tm")
    protected:
        void Construct_BuildDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BuildDateTime()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_BuildDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BuildDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BuildDateTime()))
                {
                    Construct_BuildDateTime();
                }
                if ((*Value()).hasMember(ItemName_BuildDateTime()))
                {
                    struct tm InitValue;
                    InitValue = {0};
                    (*Value())[ItemName_BuildDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BuildDateTime(const struct tm& SetValue)
        {
            try 
            {
                (*Value())[ItemName_BuildDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        struct tm Get_BuildDateTime(void) const
        {
            return (*Value())[ItemName_BuildDateTime()];
        }
        bool Get_BuildDateTime(struct tm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BuildDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_BuildDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Version


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_PointList
//------------------------------------------------------------------------
class CGIns_Info_PointList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_UnitX(void)
        {
            static std::string str("UnitX");
            return str;
        }
    public:
        static std::string const& ItemName_UnitY(void)
        {
            static std::string str("UnitY");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_PointList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.111");
        return str;
    }
public:
    CGIns_Info_PointList(void)
    {
        try
        {
            Construct_List();
            Construct_UnitX();
            Construct_UnitY();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_PointList(const CGIns_Info_PointList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_PointList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_UnitX();
            Construct_UnitY();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_PointList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_UnitX();
            Initialize_UnitY();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_Point[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Point InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Point InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_Point InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_Point SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_Point& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Point Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_Point& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UnitX (Type: "std::string")
    protected:
        void Construct_UnitX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitX()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitX()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitX()))
                {
                    Construct_UnitX();
                }
                if ((*Value()).hasMember(ItemName_UnitX()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitX()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitX(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitX()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UnitX(void) const
        {
            return (*Value())[ItemName_UnitX()];
        }
        bool Get_UnitX(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitX()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UnitX()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UnitY (Type: "std::string")
    protected:
        void Construct_UnitY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitY()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitY()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitY()))
                {
                    Construct_UnitY();
                }
                if ((*Value()).hasMember(ItemName_UnitY()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitY()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitY(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitY()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UnitY(void) const
        {
            return (*Value())[ItemName_UnitY()];
        }
        bool Get_UnitY(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitY()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UnitY()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_PointList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_RangeList
//------------------------------------------------------------------------
class CGIns_Info_RangeList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_RangeList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.112");
        return str;
    }
public:
    CGIns_Info_RangeList(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_RangeList(const CGIns_Info_RangeList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_RangeList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_RangeList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_Unit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_Range[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_Range InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_Range SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Range Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_Range& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Base_Range")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const CGIns_Base_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Range Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(CGIns_Base_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_RangeList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_ElementList
//------------------------------------------------------------------------
class CGIns_Info_ElementList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_ElementList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.113");
        return str;
    }
public:
    CGIns_Info_ElementList(void)
    {
        try
        {
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_ElementList(const CGIns_Info_ElementList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_ElementList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_ElementList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_ElementValue[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_ElementValue InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_ElementValue SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_ElementList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_StateValue
//------------------------------------------------------------------------
class CGIns_Info_StateValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_StateValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.114");
        return str;
    }
public:
    CGIns_Info_StateValue(void)
    {
        try
        {
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_StateValue(const CGIns_Info_StateValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_StateValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_StateValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "bool")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_Value()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_Value()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_Value(void) const
        {
            bool GetValue = (*Value())[ItemName_Value()];
            return (bool)GetValue;
        }
        bool Get_Value(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_StateValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_OptionList
//------------------------------------------------------------------------
class CGIns_Info_OptionList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_OptionList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.115");
        return str;
    }
public:
    CGIns_Info_OptionList(void)
    {
        try
        {
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_OptionList(const CGIns_Info_OptionList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_OptionList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_OptionList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_ElementValue[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_ElementValue InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_ElementValue SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_OptionList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Value_Integer
//------------------------------------------------------------------------
class CGIns_Info_Value_Integer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Value_Integer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.116");
        return str;
    }
public:
    CGIns_Info_Value_Integer(void)
    {
        try
        {
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Value_Integer(const CGIns_Info_Value_Integer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Value_Integer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Value_Integer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Unit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "int64_t")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Value(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Value()];
            return (int64_t)GetValue;
        }
        bool Get_Value(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Value_Integer


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Value_Float
//------------------------------------------------------------------------
class CGIns_Info_Value_Float : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Value_Float");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.117");
        return str;
    }
public:
    CGIns_Info_Value_Float(void)
    {
        try
        {
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Value_Float(const CGIns_Info_Value_Float& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Value_Float(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Value_Float(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Unit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "double")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Value()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Value()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Value(void) const
        {
            double GetValue = (*Value())[ItemName_Value()];
            return (double)GetValue;
        }
        bool Get_Value(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Value_Float


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Range
//------------------------------------------------------------------------
class CGIns_Info_Range : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Range");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.126");
        return str;
    }
public:
    CGIns_Info_Range(void)
    {
        try
        {
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Range(const CGIns_Info_Range& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Range(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Unit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Range(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Unit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Base_Range")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_Range InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const CGIns_Base_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Range Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(CGIns_Base_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Range


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_NetworkTrafficValue
//------------------------------------------------------------------------
class CGIns_Info_NetworkTrafficValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Total_MB(void)
        {
            static std::string str("Total_MB");
            return str;
        }
    public:
        static std::string const& ItemName_LastDay_MB(void)
        {
            static std::string str("LastDay_MB");
            return str;
        }
    public:
        static std::string const& ItemName_LastHour_MB(void)
        {
            static std::string str("LastHour_MB");
            return str;
        }
    public:
        static std::string const& ItemName_LastMinute_MB(void)
        {
            static std::string str("LastMinute_MB");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_NetworkTrafficValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.119");
        return str;
    }
public:
    CGIns_Info_NetworkTrafficValue(void)
    {
        try
        {
            Construct_Total_MB();
            Construct_LastDay_MB();
            Construct_LastHour_MB();
            Construct_LastMinute_MB();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_NetworkTrafficValue(const CGIns_Info_NetworkTrafficValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_NetworkTrafficValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Total_MB();
            Construct_LastDay_MB();
            Construct_LastHour_MB();
            Construct_LastMinute_MB();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_NetworkTrafficValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Total_MB();
            Initialize_LastDay_MB();
            Initialize_LastHour_MB();
            Initialize_LastMinute_MB();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Total_MB (Type: "double")
protected:
    void Construct_Total_MB(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Total_MB()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Total_MB()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Total_MB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Total_MB()))
                {
                    Construct_Total_MB();
                }
                if ((*Value()).hasMember(ItemName_Total_MB()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Total_MB()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Total_MB(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Total_MB()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Total_MB(void) const
        {
            double GetValue = (*Value())[ItemName_Total_MB()];
            return (double)GetValue;
        }
        bool Get_Total_MB(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Total_MB()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Total_MB()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastDay_MB (Type: "double")
protected:
    void Construct_LastDay_MB(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastDay_MB()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastDay_MB()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastDay_MB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastDay_MB()))
                {
                    Construct_LastDay_MB();
                }
                if ((*Value()).hasMember(ItemName_LastDay_MB()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastDay_MB()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastDay_MB(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastDay_MB()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastDay_MB(void) const
        {
            double GetValue = (*Value())[ItemName_LastDay_MB()];
            return (double)GetValue;
        }
        bool Get_LastDay_MB(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastDay_MB()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastDay_MB()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastHour_MB (Type: "double")
protected:
    void Construct_LastHour_MB(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastHour_MB()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastHour_MB()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastHour_MB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastHour_MB()))
                {
                    Construct_LastHour_MB();
                }
                if ((*Value()).hasMember(ItemName_LastHour_MB()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastHour_MB()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastHour_MB(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastHour_MB()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastHour_MB(void) const
        {
            double GetValue = (*Value())[ItemName_LastHour_MB()];
            return (double)GetValue;
        }
        bool Get_LastHour_MB(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastHour_MB()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastHour_MB()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastMinute_MB (Type: "double")
protected:
    void Construct_LastMinute_MB(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastMinute_MB()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastMinute_MB()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastMinute_MB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastMinute_MB()))
                {
                    Construct_LastMinute_MB();
                }
                if ((*Value()).hasMember(ItemName_LastMinute_MB()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastMinute_MB()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastMinute_MB(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastMinute_MB()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastMinute_MB(void) const
        {
            double GetValue = (*Value())[ItemName_LastMinute_MB()];
            return (double)GetValue;
        }
        bool Get_LastMinute_MB(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastMinute_MB()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastMinute_MB()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_NetworkTrafficValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_NetworkBandwidthValue
//------------------------------------------------------------------------
class CGIns_Info_NetworkBandwidthValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Total_kBps(void)
        {
            static std::string str("Total_kBps");
            return str;
        }
    public:
        static std::string const& ItemName_LastDay_kBps(void)
        {
            static std::string str("LastDay_kBps");
            return str;
        }
    public:
        static std::string const& ItemName_LastHour_kBps(void)
        {
            static std::string str("LastHour_kBps");
            return str;
        }
    public:
        static std::string const& ItemName_LastMinute_kBps(void)
        {
            static std::string str("LastMinute_kBps");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_NetworkBandwidthValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.120");
        return str;
    }
public:
    CGIns_Info_NetworkBandwidthValue(void)
    {
        try
        {
            Construct_Total_kBps();
            Construct_LastDay_kBps();
            Construct_LastHour_kBps();
            Construct_LastMinute_kBps();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_NetworkBandwidthValue(const CGIns_Info_NetworkBandwidthValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_NetworkBandwidthValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Total_kBps();
            Construct_LastDay_kBps();
            Construct_LastHour_kBps();
            Construct_LastMinute_kBps();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_NetworkBandwidthValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Total_kBps();
            Initialize_LastDay_kBps();
            Initialize_LastHour_kBps();
            Initialize_LastMinute_kBps();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Total_kBps (Type: "double")
protected:
    void Construct_Total_kBps(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Total_kBps()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Total_kBps()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Total_kBps(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Total_kBps()))
                {
                    Construct_Total_kBps();
                }
                if ((*Value()).hasMember(ItemName_Total_kBps()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Total_kBps()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Total_kBps(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Total_kBps()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Total_kBps(void) const
        {
            double GetValue = (*Value())[ItemName_Total_kBps()];
            return (double)GetValue;
        }
        bool Get_Total_kBps(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Total_kBps()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Total_kBps()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastDay_kBps (Type: "double")
protected:
    void Construct_LastDay_kBps(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastDay_kBps()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastDay_kBps()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastDay_kBps(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastDay_kBps()))
                {
                    Construct_LastDay_kBps();
                }
                if ((*Value()).hasMember(ItemName_LastDay_kBps()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastDay_kBps()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastDay_kBps(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastDay_kBps()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastDay_kBps(void) const
        {
            double GetValue = (*Value())[ItemName_LastDay_kBps()];
            return (double)GetValue;
        }
        bool Get_LastDay_kBps(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastDay_kBps()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastDay_kBps()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastHour_kBps (Type: "double")
protected:
    void Construct_LastHour_kBps(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastHour_kBps()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastHour_kBps()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastHour_kBps(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastHour_kBps()))
                {
                    Construct_LastHour_kBps();
                }
                if ((*Value()).hasMember(ItemName_LastHour_kBps()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastHour_kBps()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastHour_kBps(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastHour_kBps()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastHour_kBps(void) const
        {
            double GetValue = (*Value())[ItemName_LastHour_kBps()];
            return (double)GetValue;
        }
        bool Get_LastHour_kBps(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastHour_kBps()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastHour_kBps()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item LastMinute_kBps (Type: "double")
protected:
    void Construct_LastMinute_kBps(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_LastMinute_kBps()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_LastMinute_kBps()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_LastMinute_kBps(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastMinute_kBps()))
                {
                    Construct_LastMinute_kBps();
                }
                if ((*Value()).hasMember(ItemName_LastMinute_kBps()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_LastMinute_kBps()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastMinute_kBps(double SetValue)
        {
            try
            {
                (*Value())[ItemName_LastMinute_kBps()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_LastMinute_kBps(void) const
        {
            double GetValue = (*Value())[ItemName_LastMinute_kBps()];
            return (double)GetValue;
        }
        bool Get_LastMinute_kBps(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastMinute_kBps()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_LastMinute_kBps()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_NetworkBandwidthValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_NetworkTraffic
//------------------------------------------------------------------------
class CGIns_Info_NetworkTraffic : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Start(void)
        {
            static std::string str("Start");
            return str;
        }
    public:
        static std::string const& ItemName_Stop(void)
        {
            static std::string str("Stop");
            return str;
        }
    public:
        static std::string const& ItemName_LastRestart(void)
        {
            static std::string str("LastRestart");
            return str;
        }
    public:
        static std::string const& ItemName_RestartCount(void)
        {
            static std::string str("RestartCount");
            return str;
        }
    public:
        static std::string const& ItemName_NetworkTrafficIn(void)
        {
            static std::string str("NetworkTrafficIn");
            return str;
        }
    public:
        static std::string const& ItemName_NetworkTrafficOut(void)
        {
            static std::string str("NetworkTrafficOut");
            return str;
        }
    public:
        static std::string const& ItemName_NetworkBandwidthIn(void)
        {
            static std::string str("NetworkBandwidthIn");
            return str;
        }
    public:
        static std::string const& ItemName_NetworkBandwidthOut(void)
        {
            static std::string str("NetworkBandwidthOut");
            return str;
        }
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_NetworkTraffic");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.121");
        return str;
    }
public:
    CGIns_Info_NetworkTraffic(void)
    {
        try
        {
            Construct_Start();
            Construct_Stop();
            Construct_LastRestart();
            Construct_RestartCount();
            Construct_NetworkTrafficIn();
            Construct_NetworkTrafficOut();
            Construct_NetworkBandwidthIn();
            Construct_NetworkBandwidthOut();
            Construct_Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_NetworkTraffic(const CGIns_Info_NetworkTraffic& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_NetworkTraffic(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Start();
            Construct_Stop();
            Construct_LastRestart();
            Construct_RestartCount();
            Construct_NetworkTrafficIn();
            Construct_NetworkTrafficOut();
            Construct_NetworkBandwidthIn();
            Construct_NetworkBandwidthOut();
            Construct_Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_NetworkTraffic(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Start();
            Initialize_Stop();
            Initialize_LastRestart();
            Initialize_RestartCount();
            Initialize_NetworkTrafficIn();
            Initialize_NetworkTrafficOut();
            Initialize_NetworkBandwidthIn();
            Initialize_NetworkBandwidthOut();
            Initialize_Port();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Start (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_Start(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Start()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_Start()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Start(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Start()))
                {
                    Construct_Start();
                }
                if ((*Value()).hasMember(ItemName_Start()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_Start()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Start(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Start()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_Start(void) const
        {
            return (*Value())[ItemName_Start()];
        }
        bool Get_Start(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Start()]).valid())
                {
                    GetValue = (*Value())[ItemName_Start()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Stop (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_Stop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Stop()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_Stop()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Stop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Stop()))
                {
                    Construct_Stop();
                }
                if ((*Value()).hasMember(ItemName_Stop()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_Stop()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Stop(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Stop()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_Stop(void) const
        {
            return (*Value())[ItemName_Stop()];
        }
        bool Get_Stop(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Stop()]).valid())
                {
                    GetValue = (*Value())[ItemName_Stop()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LastRestart (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_LastRestart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastRestart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_LastRestart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LastRestart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastRestart()))
                {
                    Construct_LastRestart();
                }
                if ((*Value()).hasMember(ItemName_LastRestart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_LastRestart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastRestart(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_LastRestart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_LastRestart(void) const
        {
            return (*Value())[ItemName_LastRestart()];
        }
        bool Get_LastRestart(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastRestart()]).valid())
                {
                    GetValue = (*Value())[ItemName_LastRestart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item RestartCount (Type: "int32_t")
protected:
    void Construct_RestartCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_RestartCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_RestartCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_RestartCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RestartCount()))
                {
                    Construct_RestartCount();
                }
                if ((*Value()).hasMember(ItemName_RestartCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_RestartCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RestartCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_RestartCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_RestartCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_RestartCount()];
            return (int32_t)GetValue;
        }
        bool Get_RestartCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RestartCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_RestartCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NetworkTrafficIn (Type: "CGIns_Info_NetworkTrafficValue")
    protected:
        void Construct_NetworkTrafficIn(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkTrafficIn()))
                {
                    CGIns_Info_NetworkTrafficValue InitValue;
                    (*Value())[ItemName_NetworkTrafficIn()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NetworkTrafficIn(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkTrafficIn()))
                {
                    Construct_NetworkTrafficIn();
                }
                if ((*Value()).hasMember(ItemName_NetworkTrafficIn()))
                {
                    CGIns_Info_NetworkTrafficValue InitValue;
                    (*Value())[ItemName_NetworkTrafficIn()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NetworkTrafficIn(const CGIns_Info_NetworkTrafficValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_NetworkTrafficIn()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_NetworkTrafficValue Get_NetworkTrafficIn(void) const
        {
            return (*Value())[ItemName_NetworkTrafficIn()];
        }
        bool Get_NetworkTrafficIn(CGIns_Info_NetworkTrafficValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NetworkTrafficIn()]).valid())
                {
                    GetValue = (*Value())[ItemName_NetworkTrafficIn()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NetworkTrafficOut (Type: "CGIns_Info_NetworkTrafficValue")
    protected:
        void Construct_NetworkTrafficOut(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkTrafficOut()))
                {
                    CGIns_Info_NetworkTrafficValue InitValue;
                    (*Value())[ItemName_NetworkTrafficOut()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NetworkTrafficOut(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkTrafficOut()))
                {
                    Construct_NetworkTrafficOut();
                }
                if ((*Value()).hasMember(ItemName_NetworkTrafficOut()))
                {
                    CGIns_Info_NetworkTrafficValue InitValue;
                    (*Value())[ItemName_NetworkTrafficOut()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NetworkTrafficOut(const CGIns_Info_NetworkTrafficValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_NetworkTrafficOut()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_NetworkTrafficValue Get_NetworkTrafficOut(void) const
        {
            return (*Value())[ItemName_NetworkTrafficOut()];
        }
        bool Get_NetworkTrafficOut(CGIns_Info_NetworkTrafficValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NetworkTrafficOut()]).valid())
                {
                    GetValue = (*Value())[ItemName_NetworkTrafficOut()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NetworkBandwidthIn (Type: "CGIns_Info_NetworkBandwidthValue")
    protected:
        void Construct_NetworkBandwidthIn(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkBandwidthIn()))
                {
                    CGIns_Info_NetworkBandwidthValue InitValue;
                    (*Value())[ItemName_NetworkBandwidthIn()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NetworkBandwidthIn(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkBandwidthIn()))
                {
                    Construct_NetworkBandwidthIn();
                }
                if ((*Value()).hasMember(ItemName_NetworkBandwidthIn()))
                {
                    CGIns_Info_NetworkBandwidthValue InitValue;
                    (*Value())[ItemName_NetworkBandwidthIn()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NetworkBandwidthIn(const CGIns_Info_NetworkBandwidthValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_NetworkBandwidthIn()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_NetworkBandwidthValue Get_NetworkBandwidthIn(void) const
        {
            return (*Value())[ItemName_NetworkBandwidthIn()];
        }
        bool Get_NetworkBandwidthIn(CGIns_Info_NetworkBandwidthValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NetworkBandwidthIn()]).valid())
                {
                    GetValue = (*Value())[ItemName_NetworkBandwidthIn()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NetworkBandwidthOut (Type: "CGIns_Info_NetworkBandwidthValue")
    protected:
        void Construct_NetworkBandwidthOut(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkBandwidthOut()))
                {
                    CGIns_Info_NetworkBandwidthValue InitValue;
                    (*Value())[ItemName_NetworkBandwidthOut()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NetworkBandwidthOut(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetworkBandwidthOut()))
                {
                    Construct_NetworkBandwidthOut();
                }
                if ((*Value()).hasMember(ItemName_NetworkBandwidthOut()))
                {
                    CGIns_Info_NetworkBandwidthValue InitValue;
                    (*Value())[ItemName_NetworkBandwidthOut()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NetworkBandwidthOut(const CGIns_Info_NetworkBandwidthValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_NetworkBandwidthOut()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_NetworkBandwidthValue Get_NetworkBandwidthOut(void) const
        {
            return (*Value())[ItemName_NetworkBandwidthOut()];
        }
        bool Get_NetworkBandwidthOut(CGIns_Info_NetworkBandwidthValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NetworkBandwidthOut()]).valid())
                {
                    GetValue = (*Value())[ItemName_NetworkBandwidthOut()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Port (Type: "int32_t")
protected:
    void Construct_Port(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Port()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Port()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Port()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Port(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Port()];
            return (int32_t)GetValue;
        }
        bool Get_Port(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Port()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_NetworkTraffic


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Device_Location
//------------------------------------------------------------------------
class CGIns_Info_Device_Location : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Long(void)
        {
            static std::string str("Long");
            return str;
        }
    public:
        static std::string const& ItemName_Lat(void)
        {
            static std::string str("Lat");
            return str;
        }
    public:
        static std::string const& ItemName_Alt(void)
        {
            static std::string str("Alt");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Device_Location");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.122");
        return str;
    }
public:
    CGIns_Info_Device_Location(void)
    {
        try
        {
            Construct_Long();
            Construct_Lat();
            Construct_Alt();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Device_Location(const CGIns_Info_Device_Location& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Device_Location(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Long();
            Construct_Lat();
            Construct_Alt();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Device_Location(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Long();
            Initialize_Lat();
            Initialize_Alt();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Long (Type: "double")
protected:
    void Construct_Long(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Long()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Long()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Long(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Long()))
                {
                    Construct_Long();
                }
                if ((*Value()).hasMember(ItemName_Long()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Long()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Long(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Long()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Long(void) const
        {
            double GetValue = (*Value())[ItemName_Long()];
            return (double)GetValue;
        }
        bool Get_Long(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Long()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Long()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Lat (Type: "double")
protected:
    void Construct_Lat(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Lat()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Lat()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Lat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Lat()))
                {
                    Construct_Lat();
                }
                if ((*Value()).hasMember(ItemName_Lat()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Lat()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Lat(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Lat()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Lat(void) const
        {
            double GetValue = (*Value())[ItemName_Lat()];
            return (double)GetValue;
        }
        bool Get_Lat(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Lat()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Lat()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Alt (Type: "double")
protected:
    void Construct_Alt(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Alt()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Alt()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Alt(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Alt()))
                {
                    Construct_Alt();
                }
                if ((*Value()).hasMember(ItemName_Alt()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Alt()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Alt(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Alt()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Alt(void) const
        {
            double GetValue = (*Value())[ItemName_Alt()];
            return (double)GetValue;
        }
        bool Get_Alt(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Alt()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Alt()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Device_Location


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Device_SystemHealth
//------------------------------------------------------------------------
class CGIns_Info_Device_SystemHealth : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_User(void)
        {
            static std::string str("User");
            return str;
        }
    public:
        static std::string const& ItemName_UserAverage(void)
        {
            static std::string str("UserAverage");
            return str;
        }
    public:
        static std::string const& ItemName_Realtime(void)
        {
            static std::string str("Realtime");
            return str;
        }
    public:
        static std::string const& ItemName_RealtimeAverage(void)
        {
            static std::string str("RealtimeAverage");
            return str;
        }
    public:
        static std::string const& ItemName_RealtimeOverloads(void)
        {
            static std::string str("RealtimeOverloads");
            return str;
        }
    public:
        static std::string const& ItemName_MemTotal(void)
        {
            static std::string str("MemTotal");
            return str;
        }
    public:
        static std::string const& ItemName_MemUsed(void)
        {
            static std::string str("MemUsed");
            return str;
        }
    public:
        static std::string const& ItemName_MemFree(void)
        {
            static std::string str("MemFree");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Device_SystemHealth");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.123");
        return str;
    }
public:
    CGIns_Info_Device_SystemHealth(void)
    {
        try
        {
            Construct_User();
            Construct_UserAverage();
            Construct_Realtime();
            Construct_RealtimeAverage();
            Construct_RealtimeOverloads();
            Construct_MemTotal();
            Construct_MemUsed();
            Construct_MemFree();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Device_SystemHealth(const CGIns_Info_Device_SystemHealth& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Device_SystemHealth(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_User();
            Construct_UserAverage();
            Construct_Realtime();
            Construct_RealtimeAverage();
            Construct_RealtimeOverloads();
            Construct_MemTotal();
            Construct_MemUsed();
            Construct_MemFree();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Device_SystemHealth(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_User();
            Initialize_UserAverage();
            Initialize_Realtime();
            Initialize_RealtimeAverage();
            Initialize_RealtimeOverloads();
            Initialize_MemTotal();
            Initialize_MemUsed();
            Initialize_MemFree();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item User (Type: "int32_t")
protected:
    void Construct_User(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_User()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_User()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_User(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_User()))
                {
                    Construct_User();
                }
                if ((*Value()).hasMember(ItemName_User()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_User()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_User(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_User()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_User(void) const
        {
            int32_t GetValue = (*Value())[ItemName_User()];
            return (int32_t)GetValue;
        }
        bool Get_User(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_User()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_User()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item UserAverage (Type: "int32_t")
protected:
    void Construct_UserAverage(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_UserAverage()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_UserAverage()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_UserAverage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserAverage()))
                {
                    Construct_UserAverage();
                }
                if ((*Value()).hasMember(ItemName_UserAverage()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_UserAverage()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserAverage(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_UserAverage()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_UserAverage(void) const
        {
            int32_t GetValue = (*Value())[ItemName_UserAverage()];
            return (int32_t)GetValue;
        }
        bool Get_UserAverage(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserAverage()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_UserAverage()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Realtime (Type: "int32_t")
protected:
    void Construct_Realtime(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Realtime()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Realtime()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Realtime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Realtime()))
                {
                    Construct_Realtime();
                }
                if ((*Value()).hasMember(ItemName_Realtime()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Realtime()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Realtime(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Realtime()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Realtime(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Realtime()];
            return (int32_t)GetValue;
        }
        bool Get_Realtime(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Realtime()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Realtime()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item RealtimeAverage (Type: "int32_t")
protected:
    void Construct_RealtimeAverage(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_RealtimeAverage()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_RealtimeAverage()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_RealtimeAverage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RealtimeAverage()))
                {
                    Construct_RealtimeAverage();
                }
                if ((*Value()).hasMember(ItemName_RealtimeAverage()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_RealtimeAverage()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RealtimeAverage(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_RealtimeAverage()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_RealtimeAverage(void) const
        {
            int32_t GetValue = (*Value())[ItemName_RealtimeAverage()];
            return (int32_t)GetValue;
        }
        bool Get_RealtimeAverage(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RealtimeAverage()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_RealtimeAverage()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item RealtimeOverloads (Type: "int32_t")
protected:
    void Construct_RealtimeOverloads(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_RealtimeOverloads()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_RealtimeOverloads()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_RealtimeOverloads(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RealtimeOverloads()))
                {
                    Construct_RealtimeOverloads();
                }
                if ((*Value()).hasMember(ItemName_RealtimeOverloads()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_RealtimeOverloads()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RealtimeOverloads(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_RealtimeOverloads()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_RealtimeOverloads(void) const
        {
            int32_t GetValue = (*Value())[ItemName_RealtimeOverloads()];
            return (int32_t)GetValue;
        }
        bool Get_RealtimeOverloads(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RealtimeOverloads()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_RealtimeOverloads()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MemTotal (Type: "int32_t")
protected:
    void Construct_MemTotal(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MemTotal()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MemTotal()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MemTotal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MemTotal()))
                {
                    Construct_MemTotal();
                }
                if ((*Value()).hasMember(ItemName_MemTotal()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MemTotal()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MemTotal(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MemTotal()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MemTotal(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MemTotal()];
            return (int32_t)GetValue;
        }
        bool Get_MemTotal(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MemTotal()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MemTotal()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MemUsed (Type: "int32_t")
protected:
    void Construct_MemUsed(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MemUsed()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MemUsed()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MemUsed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MemUsed()))
                {
                    Construct_MemUsed();
                }
                if ((*Value()).hasMember(ItemName_MemUsed()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MemUsed()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MemUsed(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MemUsed()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MemUsed(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MemUsed()];
            return (int32_t)GetValue;
        }
        bool Get_MemUsed(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MemUsed()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MemUsed()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MemFree (Type: "int32_t")
protected:
    void Construct_MemFree(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MemFree()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MemFree()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MemFree(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MemFree()))
                {
                    Construct_MemFree();
                }
                if ((*Value()).hasMember(ItemName_MemFree()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MemFree()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MemFree(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MemFree()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MemFree(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MemFree()];
            return (int32_t)GetValue;
        }
        bool Get_MemFree(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MemFree()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MemFree()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Device_SystemHealth


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Device_TimeInfo
//------------------------------------------------------------------------
class CGIns_Info_Device_TimeInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SystemTime(void)
        {
            static std::string str("SystemTime");
            return str;
        }
    public:
        static std::string const& ItemName_SyncMode(void)
        {
            static std::string str("SyncMode");
            return str;
        }
    public:
        static std::string const& ItemName_SignalPresent(void)
        {
            static std::string str("SignalPresent");
            return str;
        }
    public:
        static std::string const& ItemName_SignalTracked(void)
        {
            static std::string str("SignalTracked");
            return str;
        }
    public:
        static std::string const& ItemName_SignalLostCount(void)
        {
            static std::string str("SignalLostCount");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Device_TimeInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.124");
        return str;
    }
public:
    CGIns_Info_Device_TimeInfo(void)
    {
        try
        {
            Construct_SystemTime();
            Construct_SyncMode();
            Construct_SignalPresent();
            Construct_SignalTracked();
            Construct_SignalLostCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Device_TimeInfo(const CGIns_Info_Device_TimeInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Device_TimeInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SystemTime();
            Construct_SyncMode();
            Construct_SignalPresent();
            Construct_SignalTracked();
            Construct_SignalLostCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Device_TimeInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SystemTime();
            Initialize_SyncMode();
            Initialize_SignalPresent();
            Initialize_SignalTracked();
            Initialize_SignalLostCount();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SystemTime (Type: "std::string")
    protected:
        void Construct_SystemTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemTime()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SystemTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SystemTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemTime()))
                {
                    Construct_SystemTime();
                }
                if ((*Value()).hasMember(ItemName_SystemTime()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SystemTime()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SystemTime(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SystemTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SystemTime(void) const
        {
            return (*Value())[ItemName_SystemTime()];
        }
        bool Get_SystemTime(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SystemTime()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SystemTime()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SyncMode (Type: "std::string")
    protected:
        void Construct_SyncMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SyncMode()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SyncMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SyncMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SyncMode()))
                {
                    Construct_SyncMode();
                }
                if ((*Value()).hasMember(ItemName_SyncMode()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SyncMode()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SyncMode(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SyncMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SyncMode(void) const
        {
            return (*Value())[ItemName_SyncMode()];
        }
        bool Get_SyncMode(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SyncMode()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SyncMode()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item SignalPresent (Type: "int32_t")
protected:
    void Construct_SignalPresent(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_SignalPresent()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_SignalPresent()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_SignalPresent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalPresent()))
                {
                    Construct_SignalPresent();
                }
                if ((*Value()).hasMember(ItemName_SignalPresent()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_SignalPresent()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalPresent(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalPresent()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_SignalPresent(void) const
        {
            int32_t GetValue = (*Value())[ItemName_SignalPresent()];
            return (int32_t)GetValue;
        }
        bool Get_SignalPresent(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalPresent()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_SignalPresent()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item SignalTracked (Type: "int32_t")
protected:
    void Construct_SignalTracked(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_SignalTracked()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_SignalTracked()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_SignalTracked(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalTracked()))
                {
                    Construct_SignalTracked();
                }
                if ((*Value()).hasMember(ItemName_SignalTracked()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_SignalTracked()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalTracked(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalTracked()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_SignalTracked(void) const
        {
            int32_t GetValue = (*Value())[ItemName_SignalTracked()];
            return (int32_t)GetValue;
        }
        bool Get_SignalTracked(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalTracked()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_SignalTracked()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item SignalLostCount (Type: "int32_t")
protected:
    void Construct_SignalLostCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_SignalLostCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_SignalLostCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_SignalLostCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalLostCount()))
                {
                    Construct_SignalLostCount();
                }
                if ((*Value()).hasMember(ItemName_SignalLostCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_SignalLostCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalLostCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalLostCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_SignalLostCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_SignalLostCount()];
            return (int32_t)GetValue;
        }
        bool Get_SignalLostCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalLostCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_SignalLostCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Device_TimeInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_SlaveModuleState
//------------------------------------------------------------------------
class CGIns_Info_SlaveModuleState : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Id(void)
        {
            static std::string str("Id");
            return str;
        }
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_ErrorCount(void)
        {
            static std::string str("ErrorCount");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_SlaveModuleState");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.314");
        return str;
    }
public:
    CGIns_Info_SlaveModuleState(void)
    {
        try
        {
            Construct_Id();
            Construct_Address();
            Construct_ErrorCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_SlaveModuleState(const CGIns_Info_SlaveModuleState& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_SlaveModuleState(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Id();
            Construct_Address();
            Construct_ErrorCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_SlaveModuleState(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Id();
            Initialize_Address();
            Initialize_ErrorCount();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Id (Type: "std::string")
    protected:
        void Construct_Id(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Id()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Id()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Id(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Id()))
                {
                    Construct_Id();
                }
                if ((*Value()).hasMember(ItemName_Id()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Id()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Id(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Id()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Id(void) const
        {
            return (*Value())[ItemName_Id()];
        }
        bool Get_Id(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Id()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Id()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Address (Type: "int32_t")
protected:
    void Construct_Address(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Address()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Address()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Address()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Address(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Address()];
            return (int32_t)GetValue;
        }
        bool Get_Address(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Address()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ErrorCount (Type: "int64_t")
protected:
    void Construct_ErrorCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ErrorCount()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ErrorCount()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ErrorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ErrorCount()))
                {
                    Construct_ErrorCount();
                }
                if ((*Value()).hasMember(ItemName_ErrorCount()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ErrorCount()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ErrorCount(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ErrorCount()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_ErrorCount(void) const
        {
            int64_t GetValue = (*Value())[ItemName_ErrorCount()];
            return (int64_t)GetValue;
        }
        bool Get_ErrorCount(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ErrorCount()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_ErrorCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_SlaveModuleState


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_UartState
//------------------------------------------------------------------------
class CGIns_Info_UartState : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Id(void)
        {
            static std::string str("Id");
            return str;
        }
    public:
        static std::string const& ItemName_Index(void)
        {
            static std::string str("Index");
            return str;
        }
    public:
        static std::string const& ItemName_Cycles(void)
        {
            static std::string str("Cycles");
            return str;
        }
    public:
        static std::string const& ItemName_SlaveStates(void)
        {
            static std::string str("SlaveStates");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_UartState");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.315");
        return str;
    }
public:
    CGIns_Info_UartState(void)
    {
        try
        {
            Construct_Id();
            Construct_Index();
            Construct_Cycles();
            Construct_SlaveStates();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_UartState(const CGIns_Info_UartState& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_UartState(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Id();
            Construct_Index();
            Construct_Cycles();
            Construct_SlaveStates();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_UartState(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Id();
            Initialize_Index();
            Initialize_Cycles();
            Initialize_SlaveStates();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Id (Type: "std::string")
    protected:
        void Construct_Id(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Id()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Id()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Id(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Id()))
                {
                    Construct_Id();
                }
                if ((*Value()).hasMember(ItemName_Id()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Id()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Id(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Id()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Id(void) const
        {
            return (*Value())[ItemName_Id()];
        }
        bool Get_Id(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Id()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Id()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Index (Type: "int32_t")
protected:
    void Construct_Index(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Index()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Index()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Index(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Index()))
                {
                    Construct_Index();
                }
                if ((*Value()).hasMember(ItemName_Index()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Index()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Index(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Index()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Index(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Index()];
            return (int32_t)GetValue;
        }
        bool Get_Index(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Index()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Index()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Cycles (Type: "int64_t")
protected:
    void Construct_Cycles(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Cycles()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Cycles()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Cycles(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Cycles()))
                {
                    Construct_Cycles();
                }
                if ((*Value()).hasMember(ItemName_Cycles()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Cycles()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Cycles(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Cycles()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Cycles(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Cycles()];
            return (int64_t)GetValue;
        }
        bool Get_Cycles(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Cycles()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Cycles()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SlaveStates (Type: "CGIns_Info_SlaveModuleState[0]")
    protected:
        void Construct_SlaveStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveStates()))
                {
                    CGIns_Info_SlaveModuleState InitValue;
                    (*Value())[ItemName_SlaveStates()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_SlaveStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveStates()))
                {
                    Construct_SlaveStates();
                }
                if ((*Value()).hasMember(ItemName_SlaveStates()))
                {
                    CGIns_Info_SlaveModuleState InitValue;
                    (*Value())[ItemName_SlaveStates()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_SlaveStates(int NewSize)
        {
            try
            {
                CGIns_Info_SlaveModuleState InitValue;
                (*Value())[ItemName_SlaveStates()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_SlaveStates(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SlaveStates()))
                {
                    return (*Value())[ItemName_SlaveStates()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_SlaveStates(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SlaveStates()))
                {
                    (*Value())[ItemName_SlaveStates()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_SlaveStates(int ArrayIndex, CGIns_Info_SlaveModuleState SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveStates()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_SlaveStates(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SlaveStates()))
                {
                    (*Value())[ItemName_SlaveStates()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SlaveStates(int ArrayIndex, const CGIns_Info_SlaveModuleState& SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveStates()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_SlaveStates()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_SlaveModuleState Get_SlaveStates(int ArrayIndex) const
        {
            return (*Value())[ItemName_SlaveStates()][ArrayIndex];
        }
        bool Get_SlaveStates(int ArrayIndex, CGIns_Info_SlaveModuleState& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SlaveStates()))
                {
                    if (((*Value())[ItemName_SlaveStates()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_SlaveStates()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_UartState


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Info_Device_SystemState
//------------------------------------------------------------------------
class CGIns_Info_Device_SystemState : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_State(void)
        {
            static std::string str("State");
            return str;
        }
    public:
        static std::string const& ItemName_Time(void)
        {
            static std::string str("Time");
            return str;
        }
    public:
        static std::string const& ItemName_UpTime(void)
        {
            static std::string str("UpTime");
            return str;
        }
    public:
        static std::string const& ItemName_Health(void)
        {
            static std::string str("Health");
            return str;
        }
    public:
        static std::string const& ItemName_RunStates(void)
        {
            static std::string str("RunStates");
            return str;
        }
    public:
        static std::string const& ItemName_ErrorStates(void)
        {
            static std::string str("ErrorStates");
            return str;
        }
    public:
        static std::string const& ItemName_Location(void)
        {
            static std::string str("Location");
            return str;
        }
    public:
        static std::string const& ItemName_UartStates(void)
        {
            static std::string str("UartStates");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Info_Device_SystemState");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.125");
        return str;
    }
public:
    CGIns_Info_Device_SystemState(void)
    {
        try
        {
            Construct_State();
            Construct_Time();
            Construct_UpTime();
            Construct_Health();
            Construct_RunStates();
            Construct_ErrorStates();
            Construct_Location();
            Construct_UartStates();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Info_Device_SystemState(const CGIns_Info_Device_SystemState& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Info_Device_SystemState(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_State();
            Construct_Time();
            Construct_UpTime();
            Construct_Health();
            Construct_RunStates();
            Construct_ErrorStates();
            Construct_Location();
            Construct_UartStates();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Info_Device_SystemState(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_State();
            Initialize_Time();
            Initialize_UpTime();
            Initialize_Health();
            Initialize_RunStates();
            Initialize_ErrorStates();
            Initialize_Location();
            Initialize_UartStates();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item State (Type: "std::string")
    protected:
        void Construct_State(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_State()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_State()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_State(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_State()))
                {
                    Construct_State();
                }
                if ((*Value()).hasMember(ItemName_State()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_State()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_State(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_State()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_State(void) const
        {
            return (*Value())[ItemName_State()];
        }
        bool Get_State(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_State()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_State()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Time (Type: "CGIns_Info_Device_TimeInfo")
    protected:
        void Construct_Time(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Time()))
                {
                    CGIns_Info_Device_TimeInfo InitValue;
                    (*Value())[ItemName_Time()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Time(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Time()))
                {
                    Construct_Time();
                }
                if ((*Value()).hasMember(ItemName_Time()))
                {
                    CGIns_Info_Device_TimeInfo InitValue;
                    (*Value())[ItemName_Time()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Time(const CGIns_Info_Device_TimeInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_Time()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Device_TimeInfo Get_Time(void) const
        {
            return (*Value())[ItemName_Time()];
        }
        bool Get_Time(CGIns_Info_Device_TimeInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Time()]).valid())
                {
                    GetValue = (*Value())[ItemName_Time()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item UpTime (Type: "int64_t")
protected:
    void Construct_UpTime(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_UpTime()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_UpTime()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_UpTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UpTime()))
                {
                    Construct_UpTime();
                }
                if ((*Value()).hasMember(ItemName_UpTime()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_UpTime()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UpTime(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_UpTime()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_UpTime(void) const
        {
            int64_t GetValue = (*Value())[ItemName_UpTime()];
            return (int64_t)GetValue;
        }
        bool Get_UpTime(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UpTime()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_UpTime()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Health (Type: "CGIns_Info_Device_SystemHealth")
    protected:
        void Construct_Health(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Health()))
                {
                    CGIns_Info_Device_SystemHealth InitValue;
                    (*Value())[ItemName_Health()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Health(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Health()))
                {
                    Construct_Health();
                }
                if ((*Value()).hasMember(ItemName_Health()))
                {
                    CGIns_Info_Device_SystemHealth InitValue;
                    (*Value())[ItemName_Health()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Health(const CGIns_Info_Device_SystemHealth& SetValue)
        {
            try
            {
                (*Value())[ItemName_Health()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Device_SystemHealth Get_Health(void) const
        {
            return (*Value())[ItemName_Health()];
        }
        bool Get_Health(CGIns_Info_Device_SystemHealth& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Health()]).valid())
                {
                    GetValue = (*Value())[ItemName_Health()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RunStates (Type: "std::string[0]")
    protected:
        void Construct_RunStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RunStates()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_RunStates()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_RunStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RunStates()))
                {
                    Construct_RunStates();
                }
                if ((*Value()).hasMember(ItemName_RunStates()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_RunStates()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_RunStates(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_RunStates()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_RunStates(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_RunStates()))
                {
                    return (*Value())[ItemName_RunStates()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_RunStates(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_RunStates()))
                {
                    (*Value())[ItemName_RunStates()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_RunStates(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_RunStates()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_RunStates(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_RunStates()))
                {
                    (*Value())[ItemName_RunStates()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RunStates(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_RunStates())
                {
                    SetSize_RunStates(ArrayIndex + 1);
                }
                (*Value())[ItemName_RunStates()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_RunStates(int ArrayIndex) const
        {
            return (*Value())[ItemName_RunStates()][ArrayIndex];
        }
        bool Get_RunStates(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_RunStates()))
                {
                    if (((*Value())[ItemName_RunStates()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_RunStates()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ErrorStates (Type: "CGIns_Info_Event[0]")
    protected:
        void Construct_ErrorStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ErrorStates()))
                {
                    CGIns_Info_Event InitValue;
                    (*Value())[ItemName_ErrorStates()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_ErrorStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ErrorStates()))
                {
                    Construct_ErrorStates();
                }
                if ((*Value()).hasMember(ItemName_ErrorStates()))
                {
                    CGIns_Info_Event InitValue;
                    (*Value())[ItemName_ErrorStates()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_ErrorStates(int NewSize)
        {
            try
            {
                CGIns_Info_Event InitValue;
                (*Value())[ItemName_ErrorStates()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_ErrorStates(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_ErrorStates()))
                {
                    return (*Value())[ItemName_ErrorStates()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_ErrorStates(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_ErrorStates()))
                {
                    (*Value())[ItemName_ErrorStates()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_ErrorStates(int ArrayIndex, CGIns_Info_Event SetValue)
        {
            try
            {
                (*Value())[ItemName_ErrorStates()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_ErrorStates(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_ErrorStates()))
                {
                    (*Value())[ItemName_ErrorStates()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ErrorStates(int ArrayIndex, const CGIns_Info_Event& SetValue)
        {
            try
            {
                (*Value())[ItemName_ErrorStates()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_ErrorStates()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Event Get_ErrorStates(int ArrayIndex) const
        {
            return (*Value())[ItemName_ErrorStates()][ArrayIndex];
        }
        bool Get_ErrorStates(int ArrayIndex, CGIns_Info_Event& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_ErrorStates()))
                {
                    if (((*Value())[ItemName_ErrorStates()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_ErrorStates()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Location (Type: "CGIns_Info_Device_Location")
    protected:
        void Construct_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    CGIns_Info_Device_Location InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    Construct_Location();
                }
                if ((*Value()).hasMember(ItemName_Location()))
                {
                    CGIns_Info_Device_Location InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Location(const CGIns_Info_Device_Location& SetValue)
        {
            try
            {
                (*Value())[ItemName_Location()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Device_Location Get_Location(void) const
        {
            return (*Value())[ItemName_Location()];
        }
        bool Get_Location(CGIns_Info_Device_Location& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Location()]).valid())
                {
                    GetValue = (*Value())[ItemName_Location()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UartStates (Type: "CGIns_Info_UartState[0]")
    protected:
        void Construct_UartStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UartStates()))
                {
                    CGIns_Info_UartState InitValue;
                    (*Value())[ItemName_UartStates()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_UartStates(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UartStates()))
                {
                    Construct_UartStates();
                }
                if ((*Value()).hasMember(ItemName_UartStates()))
                {
                    CGIns_Info_UartState InitValue;
                    (*Value())[ItemName_UartStates()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_UartStates(int NewSize)
        {
            try
            {
                CGIns_Info_UartState InitValue;
                (*Value())[ItemName_UartStates()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_UartStates(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_UartStates()))
                {
                    return (*Value())[ItemName_UartStates()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_UartStates(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_UartStates()))
                {
                    (*Value())[ItemName_UartStates()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_UartStates(int ArrayIndex, CGIns_Info_UartState SetValue)
        {
            try
            {
                (*Value())[ItemName_UartStates()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_UartStates(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_UartStates()))
                {
                    (*Value())[ItemName_UartStates()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UartStates(int ArrayIndex, const CGIns_Info_UartState& SetValue)
        {
            try
            {
                (*Value())[ItemName_UartStates()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_UartStates()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_UartState Get_UartStates(int ArrayIndex) const
        {
            return (*Value())[ItemName_UartStates()][ArrayIndex];
        }
        bool Get_UartStates(int ArrayIndex, CGIns_Info_UartState& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_UartStates()))
                {
                    if (((*Value())[ItemName_UartStates()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_UartStates()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Info_Device_SystemState


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList
//------------------------------------------------------------------------
class CGIns_Edit_ElementSelectionList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_PresType(void)
        {
            static std::string str("PresType");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalListPropertyName(void)
        {
            static std::string str("ExternalListPropertyName");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_ElementSelectionList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.200");
        return str;
    }
public:
    CGIns_Edit_ElementSelectionList(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            Construct_ExternalListPropertyName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_ElementSelectionList(const CGIns_Edit_ElementSelectionList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_ElementSelectionList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            Construct_ExternalListPropertyName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_ElementSelectionList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_PresType();
            Initialize_Hint();
            Initialize_EnableEdit();
            Initialize_ExternalListPropertyName();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_ElementValue[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_ElementValue InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_ElementValue SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Base_ElementValue")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PresType (Type: "std::string")
    protected:
        void Construct_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    Construct_PresType();
                }
                if ((*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PresType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PresType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PresType(void) const
        {
            return (*Value())[ItemName_PresType()];
        }
        bool Get_PresType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PresType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PresType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalListPropertyName (Type: "std::string")
    protected:
        void Construct_ExternalListPropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalListPropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ExternalListPropertyName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalListPropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalListPropertyName()))
                {
                    Construct_ExternalListPropertyName();
                }
                if ((*Value()).hasMember(ItemName_ExternalListPropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ExternalListPropertyName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalListPropertyName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalListPropertyName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ExternalListPropertyName(void) const
        {
            return (*Value())[ItemName_ExternalListPropertyName()];
        }
        bool Get_ExternalListPropertyName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalListPropertyName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ExternalListPropertyName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_ElementSelectionList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList
//------------------------------------------------------------------------
class CGIns_Edit_ElementListSelectionList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_MinValueCount(void)
        {
            static std::string str("MinValueCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxValueCount(void)
        {
            static std::string str("MaxValueCount");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_ElementListSelectionList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.201");
        return str;
    }
public:
    CGIns_Edit_ElementListSelectionList(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_MinValueCount();
            Construct_MaxValueCount();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_ElementListSelectionList(const CGIns_Edit_ElementListSelectionList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_ElementListSelectionList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_MinValueCount();
            Construct_MaxValueCount();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_ElementListSelectionList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_MinValueCount();
            Initialize_MaxValueCount();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_ElementValue[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_ElementValue InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_ElementValue SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Base_ElementValue[0]")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Value()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Value()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Value(int NewSize)
        {
            try
            {
                CGIns_Base_ElementValue InitValue;
                (*Value())[ItemName_Value()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Value(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    return (*Value())[ItemName_Value()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Value(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    (*Value())[ItemName_Value()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Value(int ArrayIndex, CGIns_Base_ElementValue SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Value(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    (*Value())[ItemName_Value()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(int ArrayIndex, const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Value()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_Value(int ArrayIndex) const
        {
            return (*Value())[ItemName_Value()][ArrayIndex];
        }
        bool Get_Value(int ArrayIndex, CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    if (((*Value())[ItemName_Value()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Value()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinValueCount (Type: "int32_t")
protected:
    void Construct_MinValueCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinValueCount()))
            {
                int32_t InitValue;
                InitValue = -1;
                    (*Value())[ItemName_MinValueCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinValueCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinValueCount()))
                {
                    Construct_MinValueCount();
                }
                if ((*Value()).hasMember(ItemName_MinValueCount()))
                {
                    int32_t InitValue;
                    InitValue = -1;
                    (*Value())[ItemName_MinValueCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinValueCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinValueCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinValueCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinValueCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinValueCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinValueCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinValueCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxValueCount (Type: "int32_t")
protected:
    void Construct_MaxValueCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxValueCount()))
            {
                int32_t InitValue;
                InitValue = -1;
                    (*Value())[ItemName_MaxValueCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxValueCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxValueCount()))
                {
                    Construct_MaxValueCount();
                }
                if ((*Value()).hasMember(ItemName_MaxValueCount()))
                {
                    int32_t InitValue;
                    InitValue = -1;
                    (*Value())[ItemName_MaxValueCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxValueCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxValueCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxValueCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxValueCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxValueCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxValueCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxValueCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_ElementListSelectionList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer
//------------------------------------------------------------------------
class CGIns_Edit_RangeValue_Integer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Min(void)
        {
            static std::string str("Min");
            return str;
        }
    public:
        static std::string const& ItemName_Max(void)
        {
            static std::string str("Max");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
    public:
        static std::string const& ItemName_PresType(void)
        {
            static std::string str("PresType");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_RangeValue_Integer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.202");
        return str;
    }
public:
    CGIns_Edit_RangeValue_Integer(void)
    {
        try
        {
            Construct_Value();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_RangeValue_Integer(const CGIns_Edit_RangeValue_Integer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_RangeValue_Integer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_RangeValue_Integer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Min();
            Initialize_Max();
            Initialize_Unit();
            Initialize_PresType();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "int64_t")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Value()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Value(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Value()];
            return (int64_t)GetValue;
        }
        bool Get_Value(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Min (Type: "int64_t")
protected:
    void Construct_Min(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Min()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Min()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Min(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Min()))
                {
                    Construct_Min();
                }
                if ((*Value()).hasMember(ItemName_Min()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Min()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Min(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Min()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Min(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Min()];
            return (int64_t)GetValue;
        }
        bool Get_Min(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Min()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Min()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Max (Type: "int64_t")
protected:
    void Construct_Max(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Max()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Max()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Max(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Max()))
                {
                    Construct_Max();
                }
                if ((*Value()).hasMember(ItemName_Max()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Max()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Max(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Max()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Max(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Max()];
            return (int64_t)GetValue;
        }
        bool Get_Max(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Max()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Max()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PresType (Type: "std::string")
    protected:
        void Construct_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    Construct_PresType();
                }
                if ((*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PresType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PresType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PresType(void) const
        {
            return (*Value())[ItemName_PresType()];
        }
        bool Get_PresType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PresType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PresType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_RangeValue_Integer


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float
//------------------------------------------------------------------------
class CGIns_Edit_RangeValue_Float : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Min(void)
        {
            static std::string str("Min");
            return str;
        }
    public:
        static std::string const& ItemName_Max(void)
        {
            static std::string str("Max");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
    public:
        static std::string const& ItemName_PresType(void)
        {
            static std::string str("PresType");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_RangeValue_Float");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.203");
        return str;
    }
public:
    CGIns_Edit_RangeValue_Float(void)
    {
        try
        {
            Construct_Value();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_RangeValue_Float(const CGIns_Edit_RangeValue_Float& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_RangeValue_Float(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_RangeValue_Float(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Min();
            Initialize_Max();
            Initialize_Unit();
            Initialize_PresType();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "double")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Value()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Value()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Value(void) const
        {
            double GetValue = (*Value())[ItemName_Value()];
            return (double)GetValue;
        }
        bool Get_Value(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Min (Type: "double")
protected:
    void Construct_Min(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Min()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Min()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Min(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Min()))
                {
                    Construct_Min();
                }
                if ((*Value()).hasMember(ItemName_Min()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Min()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Min(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Min()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Min(void) const
        {
            double GetValue = (*Value())[ItemName_Min()];
            return (double)GetValue;
        }
        bool Get_Min(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Min()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Min()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Max (Type: "double")
protected:
    void Construct_Max(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Max()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Max()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Max(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Max()))
                {
                    Construct_Max();
                }
                if ((*Value()).hasMember(ItemName_Max()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Max()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Max(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Max()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Max(void) const
        {
            double GetValue = (*Value())[ItemName_Max()];
            return (double)GetValue;
        }
        bool Get_Max(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Max()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Max()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PresType (Type: "std::string")
    protected:
        void Construct_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    Construct_PresType();
                }
                if ((*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PresType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PresType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PresType(void) const
        {
            return (*Value())[ItemName_PresType()];
        }
        bool Get_PresType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PresType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PresType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_RangeValue_Float


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float
//------------------------------------------------------------------------
class CGIns_Edit_RangeValueSelectionList_Float : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_RangeValueSelectionList_Float");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.204");
        return str;
    }
public:
    CGIns_Edit_RangeValueSelectionList_Float(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_RangeValueSelectionList_Float(const CGIns_Edit_RangeValueSelectionList_Float& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_RangeValueSelectionList_Float(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_RangeValueSelectionList_Float(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Edit_RangeValue_Float[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Edit_RangeValue_Float InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Edit_RangeValue_Float SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_RangeValueSelectionList_Float


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Integer
//------------------------------------------------------------------------
class CGIns_Edit_RangeValueSelectionList_Integer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_RangeValueSelectionList_Integer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.205");
        return str;
    }
public:
    CGIns_Edit_RangeValueSelectionList_Integer(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_RangeValueSelectionList_Integer(const CGIns_Edit_RangeValueSelectionList_Integer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_RangeValueSelectionList_Integer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_RangeValueSelectionList_Integer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Edit_RangeValue_Integer[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Edit_RangeValue_Integer InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Edit_RangeValue_Integer SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Integer Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Value()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Integer Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_RangeValueSelectionList_Integer


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_StateValue
//------------------------------------------------------------------------
class CGIns_Edit_StateValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_StateValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.206");
        return str;
    }
public:
    CGIns_Edit_StateValue(void)
    {
        try
        {
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_StateValue(const CGIns_Edit_StateValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_StateValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_StateValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Value (Type: "bool")
protected:
    void Construct_Value(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Value()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_Value()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_Value()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_Value(void) const
        {
            bool GetValue = (*Value())[ItemName_Value()];
            return (bool)GetValue;
        }
        bool Get_Value(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_Value()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_StateValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify
//------------------------------------------------------------------------
class CGIns_Edit_StringSelectionListWithManualModify : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_MinSize(void)
        {
            static std::string str("MinSize");
            return str;
        }
    public:
        static std::string const& ItemName_MaxSize(void)
        {
            static std::string str("MaxSize");
            return str;
        }
    public:
        static std::string const& ItemName_Validator(void)
        {
            static std::string str("Validator");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_StringSelectionListWithManualModify");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.207");
        return str;
    }
public:
    CGIns_Edit_StringSelectionListWithManualModify(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_StringSelectionListWithManualModify(const CGIns_Edit_StringSelectionListWithManualModify& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_StringSelectionListWithManualModify(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_StringSelectionListWithManualModify(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_MinSize();
            Initialize_MaxSize();
            Initialize_Validator();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "std::string[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_List())
                {
                    SetSize_List(ArrayIndex + 1);
                }
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_List()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Value()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinSize (Type: "int32_t")
protected:
    void Construct_MinSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinSize()))
                {
                    Construct_MinSize();
                }
                if ((*Value()).hasMember(ItemName_MinSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinSize()];
            return (int32_t)GetValue;
        }
        bool Get_MinSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxSize (Type: "int32_t")
protected:
    void Construct_MaxSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxSize()))
                {
                    Construct_MaxSize();
                }
                if ((*Value()).hasMember(ItemName_MaxSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxSize()];
            return (int32_t)GetValue;
        }
        bool Get_MaxSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Validator (Type: "CGIns_Base_RawValue")
    protected:
        void Construct_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    Construct_Validator();
                }
                if ((*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Validator(const CGIns_Base_RawValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Validator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_RawValue Get_Validator(void) const
        {
            return (*Value())[ItemName_Validator()];
        }
        bool Get_Validator(CGIns_Base_RawValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Validator()]).valid())
                {
                    GetValue = (*Value())[ItemName_Validator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_StringSelectionListWithManualModify


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_StringListSelectionListWithManualModify
//------------------------------------------------------------------------
class CGIns_Edit_StringListSelectionListWithManualModify : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_MinValueCount(void)
        {
            static std::string str("MinValueCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxValueCount(void)
        {
            static std::string str("MaxValueCount");
            return str;
        }
    public:
        static std::string const& ItemName_MinSize(void)
        {
            static std::string str("MinSize");
            return str;
        }
    public:
        static std::string const& ItemName_MaxSize(void)
        {
            static std::string str("MaxSize");
            return str;
        }
    public:
        static std::string const& ItemName_Validator(void)
        {
            static std::string str("Validator");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_StringListSelectionListWithManualModify");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.208");
        return str;
    }
public:
    CGIns_Edit_StringListSelectionListWithManualModify(void)
    {
        try
        {
            Construct_List();
            Construct_Value();
            Construct_MinValueCount();
            Construct_MaxValueCount();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_StringListSelectionListWithManualModify(const CGIns_Edit_StringListSelectionListWithManualModify& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_StringListSelectionListWithManualModify(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Value();
            Construct_MinValueCount();
            Construct_MaxValueCount();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_StringListSelectionListWithManualModify(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Value();
            Initialize_MinValueCount();
            Initialize_MaxValueCount();
            Initialize_MinSize();
            Initialize_MaxSize();
            Initialize_Validator();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "std::string[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_List())
                {
                    SetSize_List(ArrayIndex + 1);
                }
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_List()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string[0]")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Value(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_Value()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Value(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    return (*Value())[ItemName_Value()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Value(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    (*Value())[ItemName_Value()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Value(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Value(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    (*Value())[ItemName_Value()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_Value())
                {
                    SetSize_Value(ArrayIndex + 1);
                }
                (*Value())[ItemName_Value()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(int ArrayIndex) const
        {
            return (*Value())[ItemName_Value()][ArrayIndex];
        }
        bool Get_Value(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    if (((*Value())[ItemName_Value()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_Value()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinValueCount (Type: "int32_t")
protected:
    void Construct_MinValueCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinValueCount()))
            {
                int32_t InitValue;
                InitValue = -1;
                    (*Value())[ItemName_MinValueCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinValueCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinValueCount()))
                {
                    Construct_MinValueCount();
                }
                if ((*Value()).hasMember(ItemName_MinValueCount()))
                {
                    int32_t InitValue;
                    InitValue = -1;
                    (*Value())[ItemName_MinValueCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinValueCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinValueCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinValueCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinValueCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinValueCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinValueCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinValueCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxValueCount (Type: "int32_t")
protected:
    void Construct_MaxValueCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxValueCount()))
            {
                int32_t InitValue;
                InitValue = -1;
                    (*Value())[ItemName_MaxValueCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxValueCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxValueCount()))
                {
                    Construct_MaxValueCount();
                }
                if ((*Value()).hasMember(ItemName_MaxValueCount()))
                {
                    int32_t InitValue;
                    InitValue = -1;
                    (*Value())[ItemName_MaxValueCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxValueCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxValueCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxValueCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxValueCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxValueCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxValueCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxValueCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinSize (Type: "int32_t")
protected:
    void Construct_MinSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinSize()))
                {
                    Construct_MinSize();
                }
                if ((*Value()).hasMember(ItemName_MinSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinSize()];
            return (int32_t)GetValue;
        }
        bool Get_MinSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxSize (Type: "int32_t")
protected:
    void Construct_MaxSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxSize()))
                {
                    Construct_MaxSize();
                }
                if ((*Value()).hasMember(ItemName_MaxSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxSize()];
            return (int32_t)GetValue;
        }
        bool Get_MaxSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Validator (Type: "CGIns_Base_RawValue")
    protected:
        void Construct_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    Construct_Validator();
                }
                if ((*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Validator(const CGIns_Base_RawValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Validator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_RawValue Get_Validator(void) const
        {
            return (*Value())[ItemName_Validator()];
        }
        bool Get_Validator(CGIns_Base_RawValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Validator()]).valid())
                {
                    GetValue = (*Value())[ItemName_Validator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_StringListSelectionListWithManualModify


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_StringValue
//------------------------------------------------------------------------
class CGIns_Edit_StringValue : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Value(void)
        {
            static std::string str("Value");
            return str;
        }
    public:
        static std::string const& ItemName_MinSize(void)
        {
            static std::string str("MinSize");
            return str;
        }
    public:
        static std::string const& ItemName_MaxSize(void)
        {
            static std::string str("MaxSize");
            return str;
        }
    public:
        static std::string const& ItemName_Validator(void)
        {
            static std::string str("Validator");
            return str;
        }
    public:
        static std::string const& ItemName_PresType(void)
        {
            static std::string str("PresType");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_StringValue");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.209");
        return str;
    }
public:
    CGIns_Edit_StringValue(void)
    {
        try
        {
            Construct_Value();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_StringValue(const CGIns_Edit_StringValue& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_StringValue(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Value();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_PresType();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_StringValue(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Value();
            Initialize_MinSize();
            Initialize_MaxSize();
            Initialize_Validator();
            Initialize_PresType();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Value (Type: "std::string")
    protected:
        void Construct_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value()))
                {
                    Construct_Value();
                }
                if ((*Value()).hasMember(ItemName_Value()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Value()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Value(void) const
        {
            return (*Value())[ItemName_Value()];
        }
        bool Get_Value(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Value()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinSize (Type: "int32_t")
protected:
    void Construct_MinSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinSize()))
                {
                    Construct_MinSize();
                }
                if ((*Value()).hasMember(ItemName_MinSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinSize()];
            return (int32_t)GetValue;
        }
        bool Get_MinSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxSize (Type: "int32_t")
protected:
    void Construct_MaxSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxSize()))
                {
                    Construct_MaxSize();
                }
                if ((*Value()).hasMember(ItemName_MaxSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxSize()];
            return (int32_t)GetValue;
        }
        bool Get_MaxSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Validator (Type: "CGIns_Base_RawValue")
    protected:
        void Construct_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    Construct_Validator();
                }
                if ((*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Validator(const CGIns_Base_RawValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Validator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_RawValue Get_Validator(void) const
        {
            return (*Value())[ItemName_Validator()];
        }
        bool Get_Validator(CGIns_Base_RawValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Validator()]).valid())
                {
                    GetValue = (*Value())[ItemName_Validator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PresType (Type: "std::string")
    protected:
        void Construct_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PresType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PresType()))
                {
                    Construct_PresType();
                }
                if ((*Value()).hasMember(ItemName_PresType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PresType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PresType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PresType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PresType(void) const
        {
            return (*Value())[ItemName_PresType()];
        }
        bool Get_PresType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PresType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PresType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_StringValue


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_DeviceType
//------------------------------------------------------------------------
class CGIns_Edit_DeviceType : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Info(void)
        {
            static std::string str("Info");
            return str;
        }
    public:
        static std::string const& ItemName_NameFilterSeries(void)
        {
            static std::string str("NameFilterSeries");
            return str;
        }
    public:
        static std::string const& ItemName_NameFilterMain(void)
        {
            static std::string str("NameFilterMain");
            return str;
        }
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_DeviceType");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.210");
        return str;
    }
public:
    CGIns_Edit_DeviceType(void)
    {
        try
        {
            Construct_Info();
            Construct_NameFilterSeries();
            Construct_NameFilterMain();
            Construct_Name();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_DeviceType(const CGIns_Edit_DeviceType& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_DeviceType(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Info();
            Construct_NameFilterSeries();
            Construct_NameFilterMain();
            Construct_Name();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_DeviceType(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Info();
            Initialize_NameFilterSeries();
            Initialize_NameFilterMain();
            Initialize_Name();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Info (Type: "CGIns_Info_DeviceType")
    protected:
        void Construct_Info(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Info()))
                {
                    CGIns_Info_DeviceType InitValue;
                    (*Value())[ItemName_Info()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Info(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Info()))
                {
                    Construct_Info();
                }
                if ((*Value()).hasMember(ItemName_Info()))
                {
                    CGIns_Info_DeviceType InitValue;
                    (*Value())[ItemName_Info()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Info(const CGIns_Info_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_Info()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_DeviceType Get_Info(void) const
        {
            return (*Value())[ItemName_Info()];
        }
        bool Get_Info(CGIns_Info_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Info()]).valid())
                {
                    GetValue = (*Value())[ItemName_Info()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NameFilterSeries (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_NameFilterSeries(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NameFilterSeries()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_NameFilterSeries()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NameFilterSeries(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NameFilterSeries()))
                {
                    Construct_NameFilterSeries();
                }
                if ((*Value()).hasMember(ItemName_NameFilterSeries()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_NameFilterSeries()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NameFilterSeries(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_NameFilterSeries()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_NameFilterSeries(void) const
        {
            return (*Value())[ItemName_NameFilterSeries()];
        }
        bool Get_NameFilterSeries(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NameFilterSeries()]).valid())
                {
                    GetValue = (*Value())[ItemName_NameFilterSeries()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NameFilterMain (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_NameFilterMain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NameFilterMain()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_NameFilterMain()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NameFilterMain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NameFilterMain()))
                {
                    Construct_NameFilterMain();
                }
                if ((*Value()).hasMember(ItemName_NameFilterMain()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_NameFilterMain()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NameFilterMain(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_NameFilterMain()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_NameFilterMain(void) const
        {
            return (*Value())[ItemName_NameFilterMain()];
        }
        bool Get_NameFilterMain(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NameFilterMain()]).valid())
                {
                    GetValue = (*Value())[ItemName_NameFilterMain()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Name (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Name()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (*Value())[ItemName_Name()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_DeviceType


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_PointList
//------------------------------------------------------------------------
class CGIns_Edit_PointList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_MinX(void)
        {
            static std::string str("MinX");
            return str;
        }
    public:
        static std::string const& ItemName_MaxX(void)
        {
            static std::string str("MaxX");
            return str;
        }
    public:
        static std::string const& ItemName_UnitX(void)
        {
            static std::string str("UnitX");
            return str;
        }
    public:
        static std::string const& ItemName_MinY(void)
        {
            static std::string str("MinY");
            return str;
        }
    public:
        static std::string const& ItemName_MaxY(void)
        {
            static std::string str("MaxY");
            return str;
        }
    public:
        static std::string const& ItemName_UnitY(void)
        {
            static std::string str("UnitY");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_PointList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.211");
        return str;
    }
public:
    CGIns_Edit_PointList(void)
    {
        try
        {
            Construct_List();
            Construct_MinX();
            Construct_MaxX();
            Construct_UnitX();
            Construct_MinY();
            Construct_MaxY();
            Construct_UnitY();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_PointList(const CGIns_Edit_PointList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_PointList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_MinX();
            Construct_MaxX();
            Construct_UnitX();
            Construct_MinY();
            Construct_MaxY();
            Construct_UnitY();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_PointList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_MinX();
            Initialize_MaxX();
            Initialize_UnitX();
            Initialize_MinY();
            Initialize_MaxY();
            Initialize_UnitY();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CGIns_Base_Point[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Point InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CGIns_Base_Point InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CGIns_Base_Point InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CGIns_Base_Point SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CGIns_Base_Point& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_Point Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CGIns_Base_Point& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinX (Type: "double")
protected:
    void Construct_MinX(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinX()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_MinX()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinX()))
                {
                    Construct_MinX();
                }
                if ((*Value()).hasMember(ItemName_MinX()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_MinX()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinX(double SetValue)
        {
            try
            {
                (*Value())[ItemName_MinX()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_MinX(void) const
        {
            double GetValue = (*Value())[ItemName_MinX()];
            return (double)GetValue;
        }
        bool Get_MinX(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinX()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_MinX()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxX (Type: "double")
protected:
    void Construct_MaxX(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxX()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_MaxX()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxX()))
                {
                    Construct_MaxX();
                }
                if ((*Value()).hasMember(ItemName_MaxX()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_MaxX()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxX(double SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxX()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_MaxX(void) const
        {
            double GetValue = (*Value())[ItemName_MaxX()];
            return (double)GetValue;
        }
        bool Get_MaxX(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxX()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_MaxX()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UnitX (Type: "std::string")
    protected:
        void Construct_UnitX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitX()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitX()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitX(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitX()))
                {
                    Construct_UnitX();
                }
                if ((*Value()).hasMember(ItemName_UnitX()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitX()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitX(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitX()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UnitX(void) const
        {
            return (*Value())[ItemName_UnitX()];
        }
        bool Get_UnitX(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitX()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UnitX()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinY (Type: "double")
protected:
    void Construct_MinY(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinY()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_MinY()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinY()))
                {
                    Construct_MinY();
                }
                if ((*Value()).hasMember(ItemName_MinY()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_MinY()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinY(double SetValue)
        {
            try
            {
                (*Value())[ItemName_MinY()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_MinY(void) const
        {
            double GetValue = (*Value())[ItemName_MinY()];
            return (double)GetValue;
        }
        bool Get_MinY(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinY()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_MinY()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxY (Type: "double")
protected:
    void Construct_MaxY(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxY()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_MaxY()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxY()))
                {
                    Construct_MaxY();
                }
                if ((*Value()).hasMember(ItemName_MaxY()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_MaxY()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxY(double SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxY()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_MaxY(void) const
        {
            double GetValue = (*Value())[ItemName_MaxY()];
            return (double)GetValue;
        }
        bool Get_MaxY(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxY()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_MaxY()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UnitY (Type: "std::string")
    protected:
        void Construct_UnitY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitY()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitY()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitY(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitY()))
                {
                    Construct_UnitY();
                }
                if ((*Value()).hasMember(ItemName_UnitY()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UnitY()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitY(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitY()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UnitY(void) const
        {
            return (*Value())[ItemName_UnitY()];
        }
        bool Get_UnitY(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitY()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UnitY()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_PointList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer
//------------------------------------------------------------------------
class CGIns_Edit_ValueList_Integer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Min(void)
        {
            static std::string str("Min");
            return str;
        }
    public:
        static std::string const& ItemName_Max(void)
        {
            static std::string str("Max");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_ValueList_Integer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.212");
        return str;
    }
public:
    CGIns_Edit_ValueList_Integer(void)
    {
        try
        {
            Construct_List();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_ValueList_Integer(const CGIns_Edit_ValueList_Integer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_ValueList_Integer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_ValueList_Integer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Min();
            Initialize_Max();
            Initialize_Unit();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item List (Type: "int64_t[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                int64_t InitValue;
                InitValue = 0;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch(...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,(int64_t)SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Set_List(const std::vector<int64_t>& SetValue)
        {
            try
            {
                SetSize_List((int)SetValue.size());
                for (int ArrayIndex = 0; ArrayIndex < (int)SetValue.size(); ArrayIndex++)
                {
                    (*Value())[ItemName_List()][ArrayIndex] = (int64_t)SetValue[ArrayIndex];
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_List(int ArrayIndex) const
        {
            int64_t GetValue = (*Value())[ItemName_List()][ArrayIndex];
            return (int64_t)GetValue;
        }
        bool Get_List(int ArrayIndex, int64_t& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (int64_t)((int64_t)((*Value())[ItemName_List()][ArrayIndex]));
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Min (Type: "int64_t")
protected:
    void Construct_Min(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Min()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Min()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Min(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Min()))
                {
                    Construct_Min();
                }
                if ((*Value()).hasMember(ItemName_Min()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Min()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Min(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Min()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Min(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Min()];
            return (int64_t)GetValue;
        }
        bool Get_Min(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Min()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Min()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Max (Type: "int64_t")
protected:
    void Construct_Max(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Max()))
            {
                int64_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Max()] = (int64_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Max(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Max()))
                {
                    Construct_Max();
                }
                if ((*Value()).hasMember(ItemName_Max()))
                {
                    int64_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Max()] = (int64_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Max(int64_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Max()] = (int64_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int64_t Get_Max(void) const
        {
            int64_t GetValue = (*Value())[ItemName_Max()];
            return (int64_t)GetValue;
        }
        bool Get_Max(int64_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Max()]).valid())
                {
                    GetValue = (int64_t)((int64_t)((*Value())[ItemName_Max()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_ValueList_Integer


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float
//------------------------------------------------------------------------
class CGIns_Edit_ValueList_Float : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_Min(void)
        {
            static std::string str("Min");
            return str;
        }
    public:
        static std::string const& ItemName_Max(void)
        {
            static std::string str("Max");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_ValueList_Float");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.213");
        return str;
    }
public:
    CGIns_Edit_ValueList_Float(void)
    {
        try
        {
            Construct_List();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_ValueList_Float(const CGIns_Edit_ValueList_Float& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_ValueList_Float(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_Min();
            Construct_Max();
            Construct_Unit();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_ValueList_Float(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_Min();
            Initialize_Max();
            Initialize_Unit();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item List (Type: "double[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                double InitValue;
                InitValue = 0.0;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch(...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, double SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,(double)SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, double SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Set_List(const std::vector<double>& SetValue)
        {
            try
            {
                SetSize_List((int)SetValue.size());
                for (int ArrayIndex = 0; ArrayIndex < (int)SetValue.size(); ArrayIndex++)
                {
                    (*Value())[ItemName_List()][ArrayIndex] = (double)SetValue[ArrayIndex];
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_List(int ArrayIndex) const
        {
            double GetValue = (*Value())[ItemName_List()][ArrayIndex];
            return (double)GetValue;
        }
        bool Get_List(int ArrayIndex, double& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (double)((double)((*Value())[ItemName_List()][ArrayIndex]));
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Min (Type: "double")
protected:
    void Construct_Min(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Min()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Min()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Min(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Min()))
                {
                    Construct_Min();
                }
                if ((*Value()).hasMember(ItemName_Min()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Min()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Min(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Min()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Min(void) const
        {
            double GetValue = (*Value())[ItemName_Min()];
            return (double)GetValue;
        }
        bool Get_Min(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Min()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Min()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Max (Type: "double")
protected:
    void Construct_Max(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Max()))
            {
                double InitValue;
                InitValue = 0.0;
                    (*Value())[ItemName_Max()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Max(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Max()))
                {
                    Construct_Max();
                }
                if ((*Value()).hasMember(ItemName_Max()))
                {
                    double InitValue;
                    InitValue = 0.0;
                    (*Value())[ItemName_Max()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Max(double SetValue)
        {
            try
            {
                (*Value())[ItemName_Max()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_Max(void) const
        {
            double GetValue = (*Value())[ItemName_Max()];
            return (double)GetValue;
        }
        bool Get_Max(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Max()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_Max()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "std::string")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Unit()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Unit()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_ValueList_Float


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_Edit_StringList
//------------------------------------------------------------------------
class CGIns_Edit_StringList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_MinSize(void)
        {
            static std::string str("MinSize");
            return str;
        }
    public:
        static std::string const& ItemName_MaxSize(void)
        {
            static std::string str("MaxSize");
            return str;
        }
    public:
        static std::string const& ItemName_Validator(void)
        {
            static std::string str("Validator");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_Edit_StringList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.214");
        return str;
    }
public:
    CGIns_Edit_StringList(void)
    {
        try
        {
            Construct_List();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_Edit_StringList(const CGIns_Edit_StringList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_Edit_StringList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_MinSize();
            Construct_MaxSize();
            Construct_Validator();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_Edit_StringList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_MinSize();
            Initialize_MaxSize();
            Initialize_Validator();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "std::string[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_List())
                {
                    SetSize_List(ArrayIndex + 1);
                }
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_List()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinSize (Type: "int32_t")
protected:
    void Construct_MinSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinSize()))
                {
                    Construct_MinSize();
                }
                if ((*Value()).hasMember(ItemName_MinSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinSize()];
            return (int32_t)GetValue;
        }
        bool Get_MinSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxSize (Type: "int32_t")
protected:
    void Construct_MaxSize(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxSize()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxSize(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxSize()))
                {
                    Construct_MaxSize();
                }
                if ((*Value()).hasMember(ItemName_MaxSize()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxSize()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxSize(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxSize()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxSize(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxSize()];
            return (int32_t)GetValue;
        }
        bool Get_MaxSize(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxSize()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxSize()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Validator (Type: "CGIns_Base_RawValue")
    protected:
        void Construct_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Validator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Validator()))
                {
                    Construct_Validator();
                }
                if ((*Value()).hasMember(ItemName_Validator()))
                {
                    CGIns_Base_RawValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Validator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Validator(const CGIns_Base_RawValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Validator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_RawValue Get_Validator(void) const
        {
            return (*Value())[ItemName_Validator()];
        }
        bool Get_Validator(CGIns_Base_RawValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Validator()]).valid())
                {
                    GetValue = (*Value())[ItemName_Validator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_Edit_StringList


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_Trigger
//------------------------------------------------------------------------
class CGIns_LoggerConfig_Trigger : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_Condition(void)
        {
            static std::string str("Condition");
            return str;
        }
    public:
        static std::string const& ItemName_TriggerLevel(void)
        {
            static std::string str("TriggerLevel");
            return str;
        }
    public:
        static std::string const& ItemName_AddDurationValueType(void)
        {
            static std::string str("AddDurationValueType");
            return str;
        }
    public:
        static std::string const& ItemName_AddDuration(void)
        {
            static std::string str("AddDuration");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_Trigger");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.300");
        return str;
    }
public:
    CGIns_LoggerConfig_Trigger(void)
    {
        try
        {
            Construct_Enabled();
            Construct_Variable();
            Construct_Condition();
            Construct_TriggerLevel();
            Construct_AddDurationValueType();
            Construct_AddDuration();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_Trigger(const CGIns_LoggerConfig_Trigger& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_Trigger(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_Variable();
            Construct_Condition();
            Construct_TriggerLevel();
            Construct_AddDurationValueType();
            Construct_AddDuration();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_Trigger(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_Variable();
            Initialize_Condition();
            Initialize_TriggerLevel();
            Initialize_AddDurationValueType();
            Initialize_AddDuration();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Condition (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Condition(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Condition()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Condition()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Condition(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Condition()))
                {
                    Construct_Condition();
                }
                if ((*Value()).hasMember(ItemName_Condition()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Condition()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Condition(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Condition()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Condition(void) const
        {
            return (*Value())[ItemName_Condition()];
        }
        bool Get_Condition(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Condition()]).valid())
                {
                    GetValue = (*Value())[ItemName_Condition()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TriggerLevel (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TriggerLevel(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerLevel()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TriggerLevel()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TriggerLevel(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerLevel()))
                {
                    Construct_TriggerLevel();
                }
                if ((*Value()).hasMember(ItemName_TriggerLevel()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TriggerLevel()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TriggerLevel(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TriggerLevel()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_TriggerLevel(void) const
        {
            return (*Value())[ItemName_TriggerLevel()];
        }
        bool Get_TriggerLevel(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TriggerLevel()]).valid())
                {
                    GetValue = (*Value())[ItemName_TriggerLevel()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AddDurationValueType (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AddDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AddDurationValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AddDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddDurationValueType()))
                {
                    Construct_AddDurationValueType();
                }
                if ((*Value()).hasMember(ItemName_AddDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AddDurationValueType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AddDurationValueType(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AddDurationValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_AddDurationValueType(void) const
        {
            return (*Value())[ItemName_AddDurationValueType()];
        }
        bool Get_AddDurationValueType(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AddDurationValueType()]).valid())
                {
                    GetValue = (*Value())[ItemName_AddDurationValueType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AddDuration (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AddDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AddDuration()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AddDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddDuration()))
                {
                    Construct_AddDuration();
                }
                if ((*Value()).hasMember(ItemName_AddDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AddDuration()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AddDuration(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AddDuration()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_AddDuration(void) const
        {
            return (*Value())[ItemName_AddDuration()];
        }
        bool Get_AddDuration(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AddDuration()]).valid())
                {
                    GetValue = (*Value())[ItemName_AddDuration()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_Trigger


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_SendMail
//------------------------------------------------------------------------
class CGIns_LoggerConfig_SendMail : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_MailServer(void)
        {
            static std::string str("MailServer");
            return str;
        }
    public:
        static std::string const& ItemName_Subject(void)
        {
            static std::string str("Subject");
            return str;
        }
    public:
        static std::string const& ItemName_Body(void)
        {
            static std::string str("Body");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_SendMail");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.301");
        return str;
    }
public:
    CGIns_LoggerConfig_SendMail(void)
    {
        try
        {
            Construct_MailServer();
            Construct_Subject();
            Construct_Body();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_SendMail(const CGIns_LoggerConfig_SendMail& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_SendMail(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_MailServer();
            Construct_Subject();
            Construct_Body();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_SendMail(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_MailServer();
            Initialize_Subject();
            Initialize_Body();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item MailServer (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_MailServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MailServer()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MailServer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MailServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MailServer()))
                {
                    Construct_MailServer();
                }
                if ((*Value()).hasMember(ItemName_MailServer()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MailServer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MailServer(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_MailServer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_MailServer(void) const
        {
            return (*Value())[ItemName_MailServer()];
        }
        bool Get_MailServer(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MailServer()]).valid())
                {
                    GetValue = (*Value())[ItemName_MailServer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Subject (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_Subject(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Subject()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Subject()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Subject(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Subject()))
                {
                    Construct_Subject();
                }
                if ((*Value()).hasMember(ItemName_Subject()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Subject()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Subject(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Subject()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_Subject(void) const
        {
            return (*Value())[ItemName_Subject()];
        }
        bool Get_Subject(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Subject()]).valid())
                {
                    GetValue = (*Value())[ItemName_Subject()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Body (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_Body(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Body()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Body()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Body(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Body()))
                {
                    Construct_Body();
                }
                if ((*Value()).hasMember(ItemName_Body()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Body()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Body(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Body()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_Body(void) const
        {
            return (*Value())[ItemName_Body()];
        }
        bool Get_Body(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Body()]).valid())
                {
                    GetValue = (*Value())[ItemName_Body()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_SendMail


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_EventBased
//------------------------------------------------------------------------
class CGIns_LoggerConfig_EventBased : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_TriggerEvent(void)
        {
            static std::string str("TriggerEvent");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_EventBased");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.302");
        return str;
    }
public:
    CGIns_LoggerConfig_EventBased(void)
    {
        try
        {
            Construct_TriggerEvent();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_EventBased(const CGIns_LoggerConfig_EventBased& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_EventBased(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_TriggerEvent();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_EventBased(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_TriggerEvent();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item TriggerEvent (Type: "CGIns_LoggerConfig_Trigger")
    protected:
        void Construct_TriggerEvent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerEvent()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerEvent()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TriggerEvent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerEvent()))
                {
                    Construct_TriggerEvent();
                }
                if ((*Value()).hasMember(ItemName_TriggerEvent()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerEvent()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TriggerEvent(const CGIns_LoggerConfig_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_TriggerEvent()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_Trigger Get_TriggerEvent(void) const
        {
            return (*Value())[ItemName_TriggerEvent()];
        }
        bool Get_TriggerEvent(CGIns_LoggerConfig_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TriggerEvent()]).valid())
                {
                    GetValue = (*Value())[ItemName_TriggerEvent()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_EventBased


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_Triggered
//------------------------------------------------------------------------
class CGIns_LoggerConfig_Triggered : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_TriggerStart(void)
        {
            static std::string str("TriggerStart");
            return str;
        }
    public:
        static std::string const& ItemName_TriggerStop(void)
        {
            static std::string str("TriggerStop");
            return str;
        }
    public:
        static std::string const& ItemName_LogDurationValueType(void)
        {
            static std::string str("LogDurationValueType");
            return str;
        }
    public:
        static std::string const& ItemName_LogDuration(void)
        {
            static std::string str("LogDuration");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_Triggered");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.303");
        return str;
    }
public:
    CGIns_LoggerConfig_Triggered(void)
    {
        try
        {
            Construct_TriggerStart();
            Construct_TriggerStop();
            Construct_LogDurationValueType();
            Construct_LogDuration();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_Triggered(const CGIns_LoggerConfig_Triggered& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_Triggered(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_TriggerStart();
            Construct_TriggerStop();
            Construct_LogDurationValueType();
            Construct_LogDuration();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_Triggered(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_TriggerStart();
            Initialize_TriggerStop();
            Initialize_LogDurationValueType();
            Initialize_LogDuration();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item TriggerStart (Type: "CGIns_LoggerConfig_Trigger")
    protected:
        void Construct_TriggerStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerStart()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TriggerStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerStart()))
                {
                    Construct_TriggerStart();
                }
                if ((*Value()).hasMember(ItemName_TriggerStart()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TriggerStart(const CGIns_LoggerConfig_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_TriggerStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_Trigger Get_TriggerStart(void) const
        {
            return (*Value())[ItemName_TriggerStart()];
        }
        bool Get_TriggerStart(CGIns_LoggerConfig_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TriggerStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_TriggerStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TriggerStop (Type: "CGIns_LoggerConfig_Trigger")
    protected:
        void Construct_TriggerStop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerStop()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerStop()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TriggerStop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TriggerStop()))
                {
                    Construct_TriggerStop();
                }
                if ((*Value()).hasMember(ItemName_TriggerStop()))
                {
                    CGIns_LoggerConfig_Trigger InitValue;
                    (*Value())[ItemName_TriggerStop()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TriggerStop(const CGIns_LoggerConfig_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_TriggerStop()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_Trigger Get_TriggerStop(void) const
        {
            return (*Value())[ItemName_TriggerStop()];
        }
        bool Get_TriggerStop(CGIns_LoggerConfig_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TriggerStop()]).valid())
                {
                    GetValue = (*Value())[ItemName_TriggerStop()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LogDurationValueType (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_LogDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LogDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_LogDurationValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LogDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LogDurationValueType()))
                {
                    Construct_LogDurationValueType();
                }
                if ((*Value()).hasMember(ItemName_LogDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_LogDurationValueType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LogDurationValueType(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_LogDurationValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_LogDurationValueType(void) const
        {
            return (*Value())[ItemName_LogDurationValueType()];
        }
        bool Get_LogDurationValueType(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LogDurationValueType()]).valid())
                {
                    GetValue = (*Value())[ItemName_LogDurationValueType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LogDuration (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_LogDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LogDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LogDuration()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LogDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LogDuration()))
                {
                    Construct_LogDuration();
                }
                if ((*Value()).hasMember(ItemName_LogDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LogDuration()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LogDuration(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_LogDuration()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_LogDuration(void) const
        {
            return (*Value())[ItemName_LogDuration()];
        }
        bool Get_LogDuration(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LogDuration()]).valid())
                {
                    GetValue = (*Value())[ItemName_LogDuration()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_Triggered


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_CSVStorage
//------------------------------------------------------------------------
class CGIns_LoggerConfig_CSVStorage : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_AddHeader(void)
        {
            static std::string str("AddHeader");
            return str;
        }
    public:
        static std::string const& ItemName_HeaderText(void)
        {
            static std::string str("HeaderText");
            return str;
        }
    public:
        static std::string const& ItemName_DateTimeHeader(void)
        {
            static std::string str("DateTimeHeader");
            return str;
        }
    public:
        static std::string const& ItemName_DateTimeFormat(void)
        {
            static std::string str("DateTimeFormat");
            return str;
        }
    public:
        static std::string const& ItemName_ColumnSeparator(void)
        {
            static std::string str("ColumnSeparator");
            return str;
        }
    public:
        static std::string const& ItemName_DecSeparator(void)
        {
            static std::string str("DecSeparator");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_CSVStorage");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.304");
        return str;
    }
public:
    CGIns_LoggerConfig_CSVStorage(void)
    {
        try
        {
            Construct_AddHeader();
            Construct_HeaderText();
            Construct_DateTimeHeader();
            Construct_DateTimeFormat();
            Construct_ColumnSeparator();
            Construct_DecSeparator();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_CSVStorage(const CGIns_LoggerConfig_CSVStorage& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_CSVStorage(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_AddHeader();
            Construct_HeaderText();
            Construct_DateTimeHeader();
            Construct_DateTimeFormat();
            Construct_ColumnSeparator();
            Construct_DecSeparator();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_CSVStorage(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_AddHeader();
            Initialize_HeaderText();
            Initialize_DateTimeHeader();
            Initialize_DateTimeFormat();
            Initialize_ColumnSeparator();
            Initialize_DecSeparator();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item AddHeader (Type: "CGIns_Edit_StateValue")
    protected:
        void Construct_AddHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddHeader()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AddHeader()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AddHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddHeader()))
                {
                    Construct_AddHeader();
                }
                if ((*Value()).hasMember(ItemName_AddHeader()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AddHeader()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AddHeader(const CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AddHeader()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StateValue Get_AddHeader(void) const
        {
            return (*Value())[ItemName_AddHeader()];
        }
        bool Get_AddHeader(CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AddHeader()]).valid())
                {
                    GetValue = (*Value())[ItemName_AddHeader()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HeaderText (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_HeaderText(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HeaderText()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HeaderText()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HeaderText(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HeaderText()))
                {
                    Construct_HeaderText();
                }
                if ((*Value()).hasMember(ItemName_HeaderText()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HeaderText()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HeaderText(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_HeaderText()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_HeaderText(void) const
        {
            return (*Value())[ItemName_HeaderText()];
        }
        bool Get_HeaderText(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HeaderText()]).valid())
                {
                    GetValue = (*Value())[ItemName_HeaderText()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DateTimeHeader (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_DateTimeHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeHeader()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DateTimeHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    Construct_DateTimeHeader();
                }
                if ((*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeHeader()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DateTimeHeader(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DateTimeHeader()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_DateTimeHeader(void) const
        {
            return (*Value())[ItemName_DateTimeHeader()];
        }
        bool Get_DateTimeHeader(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DateTimeHeader()]).valid())
                {
                    GetValue = (*Value())[ItemName_DateTimeHeader()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DateTimeFormat (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_DateTimeFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DateTimeFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    Construct_DateTimeFormat();
                }
                if ((*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DateTimeFormat(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DateTimeFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_DateTimeFormat(void) const
        {
            return (*Value())[ItemName_DateTimeFormat()];
        }
        bool Get_DateTimeFormat(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DateTimeFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_DateTimeFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ColumnSeparator (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_ColumnSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ColumnSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ColumnSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    Construct_ColumnSeparator();
                }
                if ((*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ColumnSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ColumnSeparator(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ColumnSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_ColumnSeparator(void) const
        {
            return (*Value())[ItemName_ColumnSeparator()];
        }
        bool Get_ColumnSeparator(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ColumnSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_ColumnSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DecSeparator (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_DecSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecSeparator()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DecSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DecSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecSeparator()))
                {
                    Construct_DecSeparator();
                }
                if ((*Value()).hasMember(ItemName_DecSeparator()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DecSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DecSeparator(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DecSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_DecSeparator(void) const
        {
            return (*Value())[ItemName_DecSeparator()];
        }
        bool Get_DecSeparator(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DecSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_DecSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_CSVStorage


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig_Storage
//------------------------------------------------------------------------
class CGIns_LoggerConfig_Storage : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StorageMode(void)
        {
            static std::string str("StorageMode");
            return str;
        }
    public:
        static std::string const& ItemName_Destinations(void)
        {
            static std::string str("Destinations");
            return str;
        }
    public:
        static std::string const& ItemName_FileSaveMode(void)
        {
            static std::string str("FileSaveMode");
            return str;
        }
    public:
        static std::string const& ItemName_MaxFilesDest(void)
        {
            static std::string str("MaxFilesDest");
            return str;
        }
    public:
        static std::string const& ItemName_MaxFilesDir(void)
        {
            static std::string str("MaxFilesDir");
            return str;
        }
    public:
        static std::string const& ItemName_MaxBytes(void)
        {
            static std::string str("MaxBytes");
            return str;
        }
    public:
        static std::string const& ItemName_AutoDeleteFiles(void)
        {
            static std::string str("AutoDeleteFiles");
            return str;
        }
    public:
        static std::string const& ItemName_Compress(void)
        {
            static std::string str("Compress");
            return str;
        }
    public:
        static std::string const& ItemName_FileNameExt(void)
        {
            static std::string str("FileNameExt");
            return str;
        }
    public:
        static std::string const& ItemName_FileFormat(void)
        {
            static std::string str("FileFormat");
            return str;
        }
    public:
        static std::string const& ItemName_FileFormatSettings_CSV(void)
        {
            static std::string str("FileFormatSettings_CSV");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig_Storage");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.305");
        return str;
    }
public:
    CGIns_LoggerConfig_Storage(void)
    {
        try
        {
            Construct_StorageMode();
            Construct_Destinations();
            Construct_FileSaveMode();
            Construct_MaxFilesDest();
            Construct_MaxFilesDir();
            Construct_MaxBytes();
            Construct_AutoDeleteFiles();
            Construct_Compress();
            Construct_FileNameExt();
            Construct_FileFormat();
            Construct_FileFormatSettings_CSV();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig_Storage(const CGIns_LoggerConfig_Storage& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig_Storage(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StorageMode();
            Construct_Destinations();
            Construct_FileSaveMode();
            Construct_MaxFilesDest();
            Construct_MaxFilesDir();
            Construct_MaxBytes();
            Construct_AutoDeleteFiles();
            Construct_Compress();
            Construct_FileNameExt();
            Construct_FileFormat();
            Construct_FileFormatSettings_CSV();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig_Storage(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StorageMode();
            Initialize_Destinations();
            Initialize_FileSaveMode();
            Initialize_MaxFilesDest();
            Initialize_MaxFilesDir();
            Initialize_MaxBytes();
            Initialize_AutoDeleteFiles();
            Initialize_Compress();
            Initialize_FileNameExt();
            Initialize_FileFormat();
            Initialize_FileFormatSettings_CSV();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StorageMode (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StorageMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StorageMode()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StorageMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StorageMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StorageMode()))
                {
                    Construct_StorageMode();
                }
                if ((*Value()).hasMember(ItemName_StorageMode()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StorageMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StorageMode(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StorageMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_StorageMode(void) const
        {
            return (*Value())[ItemName_StorageMode()];
        }
        bool Get_StorageMode(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StorageMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_StorageMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Destinations (Type: "CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_Destinations(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destinations()))
                {
                    CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Destinations()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Destinations(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destinations()))
                {
                    Construct_Destinations();
                }
                if ((*Value()).hasMember(ItemName_Destinations()))
                {
                    CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Destinations()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Destinations(const CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Destinations()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementListSelectionList Get_Destinations(void) const
        {
            return (*Value())[ItemName_Destinations()];
        }
        bool Get_Destinations(CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Destinations()]).valid())
                {
                    GetValue = (*Value())[ItemName_Destinations()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileSaveMode (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_FileSaveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileSaveMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileSaveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    Construct_FileSaveMode();
                }
                if ((*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileSaveMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileSaveMode(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileSaveMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_FileSaveMode(void) const
        {
            return (*Value())[ItemName_FileSaveMode()];
        }
        bool Get_FileSaveMode(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileSaveMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileSaveMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaxFilesDest (Type: "CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaxFilesDest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxFilesDest()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxFilesDest()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaxFilesDest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxFilesDest()))
                {
                    Construct_MaxFilesDest();
                }
                if ((*Value()).hasMember(ItemName_MaxFilesDest()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxFilesDest()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxFilesDest(const CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxFilesDest()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Integer Get_MaxFilesDest(void) const
        {
            return (*Value())[ItemName_MaxFilesDest()];
        }
        bool Get_MaxFilesDest(CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxFilesDest()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaxFilesDest()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaxFilesDir (Type: "CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaxFilesDir(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxFilesDir()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxFilesDir()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaxFilesDir(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxFilesDir()))
                {
                    Construct_MaxFilesDir();
                }
                if ((*Value()).hasMember(ItemName_MaxFilesDir()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxFilesDir()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxFilesDir(const CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxFilesDir()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Integer Get_MaxFilesDir(void) const
        {
            return (*Value())[ItemName_MaxFilesDir()];
        }
        bool Get_MaxFilesDir(CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxFilesDir()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaxFilesDir()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaxBytes (Type: "CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaxBytes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxBytes()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxBytes()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaxBytes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxBytes()))
                {
                    Construct_MaxBytes();
                }
                if ((*Value()).hasMember(ItemName_MaxBytes()))
                {
                    CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaxBytes()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxBytes(const CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxBytes()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Integer Get_MaxBytes(void) const
        {
            return (*Value())[ItemName_MaxBytes()];
        }
        bool Get_MaxBytes(CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxBytes()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaxBytes()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AutoDeleteFiles (Type: "CGIns_Edit_StateValue")
    protected:
        void Construct_AutoDeleteFiles(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AutoDeleteFiles()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AutoDeleteFiles(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    Construct_AutoDeleteFiles();
                }
                if ((*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AutoDeleteFiles()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AutoDeleteFiles(const CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AutoDeleteFiles()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StateValue Get_AutoDeleteFiles(void) const
        {
            return (*Value())[ItemName_AutoDeleteFiles()];
        }
        bool Get_AutoDeleteFiles(CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AutoDeleteFiles()]).valid())
                {
                    GetValue = (*Value())[ItemName_AutoDeleteFiles()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Compress (Type: "CGIns_Edit_StateValue")
    protected:
        void Construct_Compress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Compress()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Compress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Compress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Compress()))
                {
                    Construct_Compress();
                }
                if ((*Value()).hasMember(ItemName_Compress()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Compress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Compress(const CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Compress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StateValue Get_Compress(void) const
        {
            return (*Value())[ItemName_Compress()];
        }
        bool Get_Compress(CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Compress()]).valid())
                {
                    GetValue = (*Value())[ItemName_Compress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileNameExt (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_FileNameExt(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileNameExt()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FileNameExt()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileNameExt(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileNameExt()))
                {
                    Construct_FileNameExt();
                }
                if ((*Value()).hasMember(ItemName_FileNameExt()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FileNameExt()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileNameExt(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileNameExt()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_FileNameExt(void) const
        {
            return (*Value())[ItemName_FileNameExt()];
        }
        bool Get_FileNameExt(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileNameExt()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileNameExt()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileFormat (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_FileFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormat()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormat()))
                {
                    Construct_FileFormat();
                }
                if ((*Value()).hasMember(ItemName_FileFormat()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileFormat(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_FileFormat(void) const
        {
            return (*Value())[ItemName_FileFormat()];
        }
        bool Get_FileFormat(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileFormatSettings_CSV (Type: "CGIns_LoggerConfig_CSVStorage")
    protected:
        void Construct_FileFormatSettings_CSV(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormatSettings_CSV()))
                {
                    CGIns_LoggerConfig_CSVStorage InitValue;
                    (*Value())[ItemName_FileFormatSettings_CSV()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileFormatSettings_CSV(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormatSettings_CSV()))
                {
                    Construct_FileFormatSettings_CSV();
                }
                if ((*Value()).hasMember(ItemName_FileFormatSettings_CSV()))
                {
                    CGIns_LoggerConfig_CSVStorage InitValue;
                    (*Value())[ItemName_FileFormatSettings_CSV()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileFormatSettings_CSV(const CGIns_LoggerConfig_CSVStorage& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileFormatSettings_CSV()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_CSVStorage Get_FileFormatSettings_CSV(void) const
        {
            return (*Value())[ItemName_FileFormatSettings_CSV()];
        }
        bool Get_FileFormatSettings_CSV(CGIns_LoggerConfig_CSVStorage& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileFormatSettings_CSV()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileFormatSettings_CSV()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig_Storage


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_LoggerConfig
//------------------------------------------------------------------------
class CGIns_LoggerConfig : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_SubDirectory(void)
        {
            static std::string str("SubDirectory");
            return str;
        }
    public:
        static std::string const& ItemName_DataSource(void)
        {
            static std::string str("DataSource");
            return str;
        }
    public:
        static std::string const& ItemName_InitState(void)
        {
            static std::string str("InitState");
            return str;
        }
    public:
        static std::string const& ItemName_Variables(void)
        {
            static std::string str("Variables");
            return str;
        }
    public:
        static std::string const& ItemName_LoggingRateValueType(void)
        {
            static std::string str("LoggingRateValueType");
            return str;
        }
    public:
        static std::string const& ItemName_LoggingRate(void)
        {
            static std::string str("LoggingRate");
            return str;
        }
    public:
        static std::string const& ItemName_FileDurationValueType(void)
        {
            static std::string str("FileDurationValueType");
            return str;
        }
    public:
        static std::string const& ItemName_FileDuration(void)
        {
            static std::string str("FileDuration");
            return str;
        }
    public:
        static std::string const& ItemName_SendFTP(void)
        {
            static std::string str("SendFTP");
            return str;
        }
    public:
        static std::string const& ItemName_SendMail(void)
        {
            static std::string str("SendMail");
            return str;
        }
    public:
        static std::string const& ItemName_DeleteAfterSent(void)
        {
            static std::string str("DeleteAfterSent");
            return str;
        }
    public:
        static std::string const& ItemName_EventBased(void)
        {
            static std::string str("EventBased");
            return str;
        }
    public:
        static std::string const& ItemName_Triggered(void)
        {
            static std::string str("Triggered");
            return str;
        }
    public:
        static std::string const& ItemName_Storage(void)
        {
            static std::string str("Storage");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_LoggerConfig");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.306");
        return str;
    }
public:
    CGIns_LoggerConfig(void)
    {
        try
        {
            Construct_Type();
            Construct_Name();
            Construct_SubDirectory();
            Construct_DataSource();
            Construct_InitState();
            Construct_Variables();
            Construct_LoggingRateValueType();
            Construct_LoggingRate();
            Construct_FileDurationValueType();
            Construct_FileDuration();
            Construct_SendFTP();
            Construct_SendMail();
            Construct_DeleteAfterSent();
            Construct_EventBased();
            Construct_Triggered();
            Construct_Storage();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_LoggerConfig(const CGIns_LoggerConfig& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_LoggerConfig(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Name();
            Construct_SubDirectory();
            Construct_DataSource();
            Construct_InitState();
            Construct_Variables();
            Construct_LoggingRateValueType();
            Construct_LoggingRate();
            Construct_FileDurationValueType();
            Construct_FileDuration();
            Construct_SendFTP();
            Construct_SendMail();
            Construct_DeleteAfterSent();
            Construct_EventBased();
            Construct_Triggered();
            Construct_Storage();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_LoggerConfig(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Name();
            Initialize_SubDirectory();
            Initialize_DataSource();
            Initialize_InitState();
            Initialize_Variables();
            Initialize_LoggingRateValueType();
            Initialize_LoggingRate();
            Initialize_FileDurationValueType();
            Initialize_FileDuration();
            Initialize_SendFTP();
            Initialize_SendMail();
            Initialize_DeleteAfterSent();
            Initialize_EventBased();
            Initialize_Triggered();
            Initialize_Storage();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Name (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Name()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (*Value())[ItemName_Name()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SubDirectory (Type: "CGIns_Edit_StringValue")
    protected:
        void Construct_SubDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubDirectory()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SubDirectory()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SubDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubDirectory()))
                {
                    Construct_SubDirectory();
                }
                if ((*Value()).hasMember(ItemName_SubDirectory()))
                {
                    CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SubDirectory()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SubDirectory(const CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SubDirectory()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StringValue Get_SubDirectory(void) const
        {
            return (*Value())[ItemName_SubDirectory()];
        }
        bool Get_SubDirectory(CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SubDirectory()]).valid())
                {
                    GetValue = (*Value())[ItemName_SubDirectory()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataSource (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DataSource(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataSource()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataSource()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataSource(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataSource()))
                {
                    Construct_DataSource();
                }
                if ((*Value()).hasMember(ItemName_DataSource()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataSource()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataSource(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataSource()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_DataSource(void) const
        {
            return (*Value())[ItemName_DataSource()];
        }
        bool Get_DataSource(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataSource()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataSource()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InitState (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_InitState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitState()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InitState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitState()))
                {
                    Construct_InitState();
                }
                if ((*Value()).hasMember(ItemName_InitState()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InitState(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_InitState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_InitState(void) const
        {
            return (*Value())[ItemName_InitState()];
        }
        bool Get_InitState(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InitState()]).valid())
                {
                    GetValue = (*Value())[ItemName_InitState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variables (Type: "CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_Variables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variables()))
                {
                    CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Variables()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variables()))
                {
                    Construct_Variables();
                }
                if ((*Value()).hasMember(ItemName_Variables()))
                {
                    CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Variables()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variables(const CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variables()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementListSelectionList Get_Variables(void) const
        {
            return (*Value())[ItemName_Variables()];
        }
        bool Get_Variables(CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variables()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variables()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LoggingRateValueType (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_LoggingRateValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LoggingRateValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_LoggingRateValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LoggingRateValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LoggingRateValueType()))
                {
                    Construct_LoggingRateValueType();
                }
                if ((*Value()).hasMember(ItemName_LoggingRateValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_LoggingRateValueType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LoggingRateValueType(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_LoggingRateValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_LoggingRateValueType(void) const
        {
            return (*Value())[ItemName_LoggingRateValueType()];
        }
        bool Get_LoggingRateValueType(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LoggingRateValueType()]).valid())
                {
                    GetValue = (*Value())[ItemName_LoggingRateValueType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LoggingRate (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_LoggingRate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LoggingRate()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LoggingRate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LoggingRate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LoggingRate()))
                {
                    Construct_LoggingRate();
                }
                if ((*Value()).hasMember(ItemName_LoggingRate()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LoggingRate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LoggingRate(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_LoggingRate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_LoggingRate(void) const
        {
            return (*Value())[ItemName_LoggingRate()];
        }
        bool Get_LoggingRate(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LoggingRate()]).valid())
                {
                    GetValue = (*Value())[ItemName_LoggingRate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileDurationValueType (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_FileDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileDurationValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileDurationValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileDurationValueType()))
                {
                    Construct_FileDurationValueType();
                }
                if ((*Value()).hasMember(ItemName_FileDurationValueType()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileDurationValueType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileDurationValueType(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileDurationValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_FileDurationValueType(void) const
        {
            return (*Value())[ItemName_FileDurationValueType()];
        }
        bool Get_FileDurationValueType(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileDurationValueType()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileDurationValueType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileDuration (Type: "CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_FileDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FileDuration()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileDuration(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileDuration()))
                {
                    Construct_FileDuration();
                }
                if ((*Value()).hasMember(ItemName_FileDuration()))
                {
                    CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FileDuration()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileDuration(const CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileDuration()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_RangeValue_Float Get_FileDuration(void) const
        {
            return (*Value())[ItemName_FileDuration()];
        }
        bool Get_FileDuration(CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileDuration()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileDuration()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SendFTP (Type: "CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SendFTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendFTP()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SendFTP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SendFTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendFTP()))
                {
                    Construct_SendFTP();
                }
                if ((*Value()).hasMember(ItemName_SendFTP()))
                {
                    CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SendFTP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SendFTP(const CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SendFTP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_ElementSelectionList Get_SendFTP(void) const
        {
            return (*Value())[ItemName_SendFTP()];
        }
        bool Get_SendFTP(CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SendFTP()]).valid())
                {
                    GetValue = (*Value())[ItemName_SendFTP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SendMail (Type: "CGIns_LoggerConfig_SendMail")
    protected:
        void Construct_SendMail(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendMail()))
                {
                    CGIns_LoggerConfig_SendMail InitValue;
                    (*Value())[ItemName_SendMail()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SendMail(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendMail()))
                {
                    Construct_SendMail();
                }
                if ((*Value()).hasMember(ItemName_SendMail()))
                {
                    CGIns_LoggerConfig_SendMail InitValue;
                    (*Value())[ItemName_SendMail()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SendMail(const CGIns_LoggerConfig_SendMail& SetValue)
        {
            try
            {
                (*Value())[ItemName_SendMail()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_SendMail Get_SendMail(void) const
        {
            return (*Value())[ItemName_SendMail()];
        }
        bool Get_SendMail(CGIns_LoggerConfig_SendMail& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SendMail()]).valid())
                {
                    GetValue = (*Value())[ItemName_SendMail()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeleteAfterSent (Type: "CGIns_Edit_StateValue")
    protected:
        void Construct_DeleteAfterSent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeleteAfterSent()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DeleteAfterSent()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeleteAfterSent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeleteAfterSent()))
                {
                    Construct_DeleteAfterSent();
                }
                if ((*Value()).hasMember(ItemName_DeleteAfterSent()))
                {
                    CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DeleteAfterSent()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeleteAfterSent(const CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeleteAfterSent()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Edit_StateValue Get_DeleteAfterSent(void) const
        {
            return (*Value())[ItemName_DeleteAfterSent()];
        }
        bool Get_DeleteAfterSent(CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeleteAfterSent()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeleteAfterSent()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EventBased (Type: "CGIns_LoggerConfig_EventBased")
    protected:
        void Construct_EventBased(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventBased()))
                {
                    CGIns_LoggerConfig_EventBased InitValue;
                    (*Value())[ItemName_EventBased()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EventBased(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventBased()))
                {
                    Construct_EventBased();
                }
                if ((*Value()).hasMember(ItemName_EventBased()))
                {
                    CGIns_LoggerConfig_EventBased InitValue;
                    (*Value())[ItemName_EventBased()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EventBased(const CGIns_LoggerConfig_EventBased& SetValue)
        {
            try
            {
                (*Value())[ItemName_EventBased()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_EventBased Get_EventBased(void) const
        {
            return (*Value())[ItemName_EventBased()];
        }
        bool Get_EventBased(CGIns_LoggerConfig_EventBased& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EventBased()]).valid())
                {
                    GetValue = (*Value())[ItemName_EventBased()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Triggered (Type: "CGIns_LoggerConfig_Triggered")
    protected:
        void Construct_Triggered(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Triggered()))
                {
                    CGIns_LoggerConfig_Triggered InitValue;
                    (*Value())[ItemName_Triggered()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Triggered(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Triggered()))
                {
                    Construct_Triggered();
                }
                if ((*Value()).hasMember(ItemName_Triggered()))
                {
                    CGIns_LoggerConfig_Triggered InitValue;
                    (*Value())[ItemName_Triggered()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Triggered(const CGIns_LoggerConfig_Triggered& SetValue)
        {
            try
            {
                (*Value())[ItemName_Triggered()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_Triggered Get_Triggered(void) const
        {
            return (*Value())[ItemName_Triggered()];
        }
        bool Get_Triggered(CGIns_LoggerConfig_Triggered& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Triggered()]).valid())
                {
                    GetValue = (*Value())[ItemName_Triggered()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Storage (Type: "CGIns_LoggerConfig_Storage")
    protected:
        void Construct_Storage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Storage()))
                {
                    CGIns_LoggerConfig_Storage InitValue;
                    (*Value())[ItemName_Storage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Storage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Storage()))
                {
                    Construct_Storage();
                }
                if ((*Value()).hasMember(ItemName_Storage()))
                {
                    CGIns_LoggerConfig_Storage InitValue;
                    (*Value())[ItemName_Storage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Storage(const CGIns_LoggerConfig_Storage& SetValue)
        {
            try
            {
                (*Value())[ItemName_Storage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_LoggerConfig_Storage Get_Storage(void) const
        {
            return (*Value())[ItemName_Storage()];
        }
        bool Get_Storage(CGIns_LoggerConfig_Storage& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Storage()]).valid())
                {
                    GetValue = (*Value())[ItemName_Storage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_LoggerConfig


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_PortMapping
//------------------------------------------------------------------------
class CGIns_PortMapping : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_PortMapping");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.307");
        return str;
    }
public:
    CGIns_PortMapping(void)
    {
        try
        {
            Construct_Name();
            Construct_Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_PortMapping(const CGIns_PortMapping& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_PortMapping(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_PortMapping(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Port();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Port (Type: "int32_t")
protected:
    void Construct_Port(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Port()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Port()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Port()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Port(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Port()];
            return (int32_t)GetValue;
        }
        bool Get_Port(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Port()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_PortMapping


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_DeviceInfo
//------------------------------------------------------------------------
class CGIns_DeviceInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_IPAddress(void)
        {
            static std::string str("IPAddress");
            return str;
        }
    public:
        static std::string const& ItemName_Serialnumber(void)
        {
            static std::string str("Serialnumber");
            return str;
        }
    public:
        static std::string const& ItemName_Routes(void)
        {
            static std::string str("Routes");
            return str;
        }
    public:
        static std::string const& ItemName_Ports(void)
        {
            static std::string str("Ports");
            return str;
        }
    public:
        static std::string const& ItemName_HeartbeatTimeSec(void)
        {
            static std::string str("HeartbeatTimeSec");
            return str;
        }
    public:
        static std::string const& ItemName_LastHeartbeatTime(void)
        {
            static std::string str("LastHeartbeatTime");
            return str;
        }
    public:
        static std::string const& ItemName_MessageCount(void)
        {
            static std::string str("MessageCount");
            return str;
        }
    public:
        static std::string const& ItemName_Connected(void)
        {
            static std::string str("Connected");
            return str;
        }
    public:
        static std::string const& ItemName_Firmware(void)
        {
            static std::string str("Firmware");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceType(void)
        {
            static std::string str("DeviceType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_DeviceInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.308");
        return str;
    }
public:
    CGIns_DeviceInfo(void)
    {
        try
        {
            Construct_ID();
            Construct_Name();
            Construct_IPAddress();
            Construct_Serialnumber();
            Construct_Routes();
            Construct_Ports();
            Construct_HeartbeatTimeSec();
            Construct_LastHeartbeatTime();
            Construct_MessageCount();
            Construct_Connected();
            Construct_Firmware();
            Construct_DeviceType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_DeviceInfo(const CGIns_DeviceInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_DeviceInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_Name();
            Construct_IPAddress();
            Construct_Serialnumber();
            Construct_Routes();
            Construct_Ports();
            Construct_HeartbeatTimeSec();
            Construct_LastHeartbeatTime();
            Construct_MessageCount();
            Construct_Connected();
            Construct_Firmware();
            Construct_DeviceType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_DeviceInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_Name();
            Initialize_IPAddress();
            Initialize_Serialnumber();
            Initialize_Routes();
            Initialize_Ports();
            Initialize_HeartbeatTimeSec();
            Initialize_LastHeartbeatTime();
            Initialize_MessageCount();
            Initialize_Connected();
            Initialize_Firmware();
            Initialize_DeviceType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "Undef";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "Undef";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IPAddress (Type: "std::string")
    protected:
        void Construct_IPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_IPAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress()))
                {
                    Construct_IPAddress();
                }
                if ((*Value()).hasMember(ItemName_IPAddress()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_IPAddress()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_IPAddress(void) const
        {
            return (*Value())[ItemName_IPAddress()];
        }
        bool Get_IPAddress(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_IPAddress()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Serialnumber (Type: "std::string")
    protected:
        void Construct_Serialnumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Serialnumber()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Serialnumber()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Serialnumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Serialnumber()))
                {
                    Construct_Serialnumber();
                }
                if ((*Value()).hasMember(ItemName_Serialnumber()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Serialnumber()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Serialnumber(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Serialnumber()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Serialnumber(void) const
        {
            return (*Value())[ItemName_Serialnumber()];
        }
        bool Get_Serialnumber(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Serialnumber()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Serialnumber()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Routes (Type: "std::string[0]")
    protected:
        void Construct_Routes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Routes()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Routes()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Routes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Routes()))
                {
                    Construct_Routes();
                }
                if ((*Value()).hasMember(ItemName_Routes()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Routes()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Routes(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "-";
                (*Value())[ItemName_Routes()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Routes(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Routes()))
                {
                    return (*Value())[ItemName_Routes()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Routes(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Routes()))
                {
                    (*Value())[ItemName_Routes()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Routes(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_Routes()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Routes(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Routes()))
                {
                    (*Value())[ItemName_Routes()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Routes(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_Routes())
                {
                    SetSize_Routes(ArrayIndex + 1);
                }
                (*Value())[ItemName_Routes()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Routes(int ArrayIndex) const
        {
            return (*Value())[ItemName_Routes()][ArrayIndex];
        }
        bool Get_Routes(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Routes()))
                {
                    if (((*Value())[ItemName_Routes()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_Routes()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Ports (Type: "CGIns_PortMapping[0]")
    protected:
        void Construct_Ports(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ports()))
                {
                    CGIns_PortMapping InitValue;
                    (*Value())[ItemName_Ports()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Ports(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ports()))
                {
                    Construct_Ports();
                }
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    CGIns_PortMapping InitValue;
                    (*Value())[ItemName_Ports()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Ports(int NewSize)
        {
            try
            {
                CGIns_PortMapping InitValue;
                (*Value())[ItemName_Ports()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Ports(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    return (*Value())[ItemName_Ports()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Ports(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    (*Value())[ItemName_Ports()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Ports(int ArrayIndex, CGIns_PortMapping SetValue)
        {
            try
            {
                (*Value())[ItemName_Ports()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Ports(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    (*Value())[ItemName_Ports()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Ports(int ArrayIndex, const CGIns_PortMapping& SetValue)
        {
            try
            {
                (*Value())[ItemName_Ports()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Ports()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_PortMapping Get_Ports(int ArrayIndex) const
        {
            return (*Value())[ItemName_Ports()][ArrayIndex];
        }
        bool Get_Ports(int ArrayIndex, CGIns_PortMapping& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    if (((*Value())[ItemName_Ports()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Ports()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item HeartbeatTimeSec (Type: "int32_t")
protected:
    void Construct_HeartbeatTimeSec(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_HeartbeatTimeSec()))
            {
                int32_t InitValue;
                InitValue = -1;
                    (*Value())[ItemName_HeartbeatTimeSec()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_HeartbeatTimeSec(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HeartbeatTimeSec()))
                {
                    Construct_HeartbeatTimeSec();
                }
                if ((*Value()).hasMember(ItemName_HeartbeatTimeSec()))
                {
                    int32_t InitValue;
                    InitValue = -1;
                    (*Value())[ItemName_HeartbeatTimeSec()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HeartbeatTimeSec(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_HeartbeatTimeSec()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_HeartbeatTimeSec(void) const
        {
            int32_t GetValue = (*Value())[ItemName_HeartbeatTimeSec()];
            return (int32_t)GetValue;
        }
        bool Get_HeartbeatTimeSec(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HeartbeatTimeSec()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_HeartbeatTimeSec()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LastHeartbeatTime (Type: "std::string")
    protected:
        void Construct_LastHeartbeatTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastHeartbeatTime()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_LastHeartbeatTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LastHeartbeatTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LastHeartbeatTime()))
                {
                    Construct_LastHeartbeatTime();
                }
                if ((*Value()).hasMember(ItemName_LastHeartbeatTime()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_LastHeartbeatTime()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LastHeartbeatTime(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_LastHeartbeatTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_LastHeartbeatTime(void) const
        {
            return (*Value())[ItemName_LastHeartbeatTime()];
        }
        bool Get_LastHeartbeatTime(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LastHeartbeatTime()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_LastHeartbeatTime()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MessageCount (Type: "int32_t")
protected:
    void Construct_MessageCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MessageCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MessageCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MessageCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MessageCount()))
                {
                    Construct_MessageCount();
                }
                if ((*Value()).hasMember(ItemName_MessageCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MessageCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MessageCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MessageCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MessageCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MessageCount()];
            return (int32_t)GetValue;
        }
        bool Get_MessageCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MessageCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MessageCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Connected (Type: "bool")
protected:
    void Construct_Connected(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Connected()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_Connected()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Connected(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connected()))
                {
                    Construct_Connected();
                }
                if ((*Value()).hasMember(ItemName_Connected()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_Connected()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connected(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_Connected()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_Connected(void) const
        {
            bool GetValue = (*Value())[ItemName_Connected()];
            return (bool)GetValue;
        }
        bool Get_Connected(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connected()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_Connected()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Firmware (Type: "std::string")
    protected:
        void Construct_Firmware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Firmware()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Firmware()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Firmware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Firmware()))
                {
                    Construct_Firmware();
                }
                if ((*Value()).hasMember(ItemName_Firmware()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_Firmware()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Firmware(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Firmware()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Firmware(void) const
        {
            return (*Value())[ItemName_Firmware()];
        }
        bool Get_Firmware(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Firmware()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Firmware()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceType (Type: "std::string")
    protected:
        void Construct_DeviceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceType()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_DeviceType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceType()))
                {
                    Construct_DeviceType();
                }
                if ((*Value()).hasMember(ItemName_DeviceType()))
                {
                    std::string InitValue;
                    InitValue = "-";
                    (*Value())[ItemName_DeviceType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DeviceType(void) const
        {
            return (*Value())[ItemName_DeviceType()];
        }
        bool Get_DeviceType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DeviceType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_DeviceInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_UDBFHeaderInfo
//------------------------------------------------------------------------
class CGIns_UDBFHeaderInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DeviceID(void)
        {
            static std::string str("DeviceID");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceLocation(void)
        {
            static std::string str("DeviceLocation");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceSerialNumber(void)
        {
            static std::string str("DeviceSerialNumber");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceAppVersion(void)
        {
            static std::string str("DeviceAppVersion");
            return str;
        }
    public:
        static std::string const& ItemName_SourceID(void)
        {
            static std::string str("SourceID");
            return str;
        }
    public:
        static std::string const& ItemName_SourceName(void)
        {
            static std::string str("SourceName");
            return str;
        }
    public:
        static std::string const& ItemName_MeasID(void)
        {
            static std::string str("MeasID");
            return str;
        }
    public:
        static std::string const& ItemName_MeasName(void)
        {
            static std::string str("MeasName");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_UDBFHeaderInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.309");
        return str;
    }
public:
    CGIns_UDBFHeaderInfo(void)
    {
        try
        {
            Construct_DeviceID();
            Construct_DeviceLocation();
            Construct_DeviceSerialNumber();
            Construct_DeviceAppVersion();
            Construct_SourceID();
            Construct_SourceName();
            Construct_MeasID();
            Construct_MeasName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_UDBFHeaderInfo(const CGIns_UDBFHeaderInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_UDBFHeaderInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DeviceID();
            Construct_DeviceLocation();
            Construct_DeviceSerialNumber();
            Construct_DeviceAppVersion();
            Construct_SourceID();
            Construct_SourceName();
            Construct_MeasID();
            Construct_MeasName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_UDBFHeaderInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DeviceID();
            Initialize_DeviceLocation();
            Initialize_DeviceSerialNumber();
            Initialize_DeviceAppVersion();
            Initialize_SourceID();
            Initialize_SourceName();
            Initialize_MeasID();
            Initialize_MeasName();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DeviceID (Type: "std::string")
    protected:
        void Construct_DeviceID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceID()))
                {
                    Construct_DeviceID();
                }
                if ((*Value()).hasMember(ItemName_DeviceID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DeviceID(void) const
        {
            return (*Value())[ItemName_DeviceID()];
        }
        bool Get_DeviceID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DeviceID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceLocation (Type: "std::string")
    protected:
        void Construct_DeviceLocation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceLocation()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceLocation()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceLocation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceLocation()))
                {
                    Construct_DeviceLocation();
                }
                if ((*Value()).hasMember(ItemName_DeviceLocation()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceLocation()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceLocation(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceLocation()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DeviceLocation(void) const
        {
            return (*Value())[ItemName_DeviceLocation()];
        }
        bool Get_DeviceLocation(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceLocation()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DeviceLocation()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceSerialNumber (Type: "std::string")
    protected:
        void Construct_DeviceSerialNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceSerialNumber()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceSerialNumber()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceSerialNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceSerialNumber()))
                {
                    Construct_DeviceSerialNumber();
                }
                if ((*Value()).hasMember(ItemName_DeviceSerialNumber()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceSerialNumber()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceSerialNumber(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceSerialNumber()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DeviceSerialNumber(void) const
        {
            return (*Value())[ItemName_DeviceSerialNumber()];
        }
        bool Get_DeviceSerialNumber(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceSerialNumber()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DeviceSerialNumber()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceAppVersion (Type: "std::string")
    protected:
        void Construct_DeviceAppVersion(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceAppVersion()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceAppVersion()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceAppVersion(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceAppVersion()))
                {
                    Construct_DeviceAppVersion();
                }
                if ((*Value()).hasMember(ItemName_DeviceAppVersion()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DeviceAppVersion()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceAppVersion(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceAppVersion()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DeviceAppVersion(void) const
        {
            return (*Value())[ItemName_DeviceAppVersion()];
        }
        bool Get_DeviceAppVersion(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceAppVersion()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DeviceAppVersion()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SourceID (Type: "std::string")
    protected:
        void Construct_SourceID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceID()))
                {
                    Construct_SourceID();
                }
                if ((*Value()).hasMember(ItemName_SourceID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SourceID(void) const
        {
            return (*Value())[ItemName_SourceID()];
        }
        bool Get_SourceID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SourceID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SourceName (Type: "std::string")
    protected:
        void Construct_SourceName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceName()))
                {
                    Construct_SourceName();
                }
                if ((*Value()).hasMember(ItemName_SourceName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SourceName(void) const
        {
            return (*Value())[ItemName_SourceName()];
        }
        bool Get_SourceName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SourceName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MeasID (Type: "std::string")
    protected:
        void Construct_MeasID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MeasID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MeasID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasID()))
                {
                    Construct_MeasID();
                }
                if ((*Value()).hasMember(ItemName_MeasID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MeasID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MeasID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_MeasID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_MeasID(void) const
        {
            return (*Value())[ItemName_MeasID()];
        }
        bool Get_MeasID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MeasID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_MeasID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MeasName (Type: "std::string")
    protected:
        void Construct_MeasName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MeasName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MeasName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasName()))
                {
                    Construct_MeasName();
                }
                if ((*Value()).hasMember(ItemName_MeasName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MeasName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MeasName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_MeasName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_MeasName(void) const
        {
            return (*Value())[ItemName_MeasName()];
        }
        bool Get_MeasName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MeasName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_MeasName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_UDBFHeaderInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_UDBFHeaderVariableInfo
//------------------------------------------------------------------------
class CGIns_UDBFHeaderVariableInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_UUID(void)
        {
            static std::string str("UUID");
            return str;
        }
    public:
        static std::string const& ItemName_RangeMin(void)
        {
            static std::string str("RangeMin");
            return str;
        }
    public:
        static std::string const& ItemName_RangeMax(void)
        {
            static std::string str("RangeMax");
            return str;
        }
    public:
        static std::string const& ItemName_ValueType(void)
        {
            static std::string str("ValueType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_UDBFHeaderVariableInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.313");
        return str;
    }
public:
    CGIns_UDBFHeaderVariableInfo(void)
    {
        try
        {
            Construct_UUID();
            Construct_RangeMin();
            Construct_RangeMax();
            Construct_ValueType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_UDBFHeaderVariableInfo(const CGIns_UDBFHeaderVariableInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_UDBFHeaderVariableInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_UUID();
            Construct_RangeMin();
            Construct_RangeMax();
            Construct_ValueType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_UDBFHeaderVariableInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_UUID();
            Initialize_RangeMin();
            Initialize_RangeMax();
            Initialize_ValueType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item UUID (Type: "std::string")
    protected:
        void Construct_UUID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UUID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UUID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UUID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UUID()))
                {
                    Construct_UUID();
                }
                if ((*Value()).hasMember(ItemName_UUID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_UUID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UUID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_UUID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_UUID(void) const
        {
            return (*Value())[ItemName_UUID()];
        }
        bool Get_UUID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UUID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_UUID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item RangeMin (Type: "double")
protected:
    void Construct_RangeMin(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_RangeMin()))
            {
                double InitValue;
                InitValue = 0;
                    (*Value())[ItemName_RangeMin()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_RangeMin(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RangeMin()))
                {
                    Construct_RangeMin();
                }
                if ((*Value()).hasMember(ItemName_RangeMin()))
                {
                    double InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_RangeMin()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RangeMin(double SetValue)
        {
            try
            {
                (*Value())[ItemName_RangeMin()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_RangeMin(void) const
        {
            double GetValue = (*Value())[ItemName_RangeMin()];
            return (double)GetValue;
        }
        bool Get_RangeMin(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RangeMin()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_RangeMin()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item RangeMax (Type: "double")
protected:
    void Construct_RangeMax(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_RangeMax()))
            {
                double InitValue;
                InitValue = 0;
                    (*Value())[ItemName_RangeMax()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_RangeMax(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RangeMax()))
                {
                    Construct_RangeMax();
                }
                if ((*Value()).hasMember(ItemName_RangeMax()))
                {
                    double InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_RangeMax()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RangeMax(double SetValue)
        {
            try
            {
                (*Value())[ItemName_RangeMax()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_RangeMax(void) const
        {
            double GetValue = (*Value())[ItemName_RangeMax()];
            return (double)GetValue;
        }
        bool Get_RangeMax(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RangeMax()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_RangeMax()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueType (Type: "std::string")
    protected:
        void Construct_ValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueType()))
                {
                    Construct_ValueType();
                }
                if ((*Value()).hasMember(ItemName_ValueType()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ValueType()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueType(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ValueType(void) const
        {
            return (*Value())[ItemName_ValueType()];
        }
        bool Get_ValueType(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueType()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ValueType()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_UDBFHeaderVariableInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_StreamMeasurementInfo
//------------------------------------------------------------------------
class CGIns_StreamMeasurementInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_MID(void)
        {
            static std::string str("MID");
            return str;
        }
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_StartTimeEpochMS(void)
        {
            static std::string str("StartTimeEpochMS");
            return str;
        }
    public:
        static std::string const& ItemName_EndTimeEpochMS(void)
        {
            static std::string str("EndTimeEpochMS");
            return str;
        }
    public:
        static std::string const& ItemName_DataRateHz(void)
        {
            static std::string str("DataRateHz");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_StreamMeasurementInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.310");
        return str;
    }
public:
    CGIns_StreamMeasurementInfo(void)
    {
        try
        {
            Construct_MID();
            Construct_Name();
            Construct_StartTimeEpochMS();
            Construct_EndTimeEpochMS();
            Construct_DataRateHz();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_StreamMeasurementInfo(const CGIns_StreamMeasurementInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_StreamMeasurementInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_MID();
            Construct_Name();
            Construct_StartTimeEpochMS();
            Construct_EndTimeEpochMS();
            Construct_DataRateHz();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_StreamMeasurementInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_MID();
            Initialize_Name();
            Initialize_StartTimeEpochMS();
            Initialize_EndTimeEpochMS();
            Initialize_DataRateHz();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item MID (Type: "std::string")
    protected:
        void Construct_MID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MID()))
                {
                    Construct_MID();
                }
                if ((*Value()).hasMember(ItemName_MID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_MID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_MID(void) const
        {
            return (*Value())[ItemName_MID()];
        }
        bool Get_MID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_MID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartTimeEpochMS (Type: "double")
protected:
    void Construct_StartTimeEpochMS(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartTimeEpochMS()))
            {
                double InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartTimeEpochMS()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartTimeEpochMS(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartTimeEpochMS()))
                {
                    Construct_StartTimeEpochMS();
                }
                if ((*Value()).hasMember(ItemName_StartTimeEpochMS()))
                {
                    double InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartTimeEpochMS()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartTimeEpochMS(double SetValue)
        {
            try
            {
                (*Value())[ItemName_StartTimeEpochMS()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_StartTimeEpochMS(void) const
        {
            double GetValue = (*Value())[ItemName_StartTimeEpochMS()];
            return (double)GetValue;
        }
        bool Get_StartTimeEpochMS(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartTimeEpochMS()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_StartTimeEpochMS()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item EndTimeEpochMS (Type: "double")
protected:
    void Construct_EndTimeEpochMS(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_EndTimeEpochMS()))
            {
                double InitValue;
                InitValue = 0;
                    (*Value())[ItemName_EndTimeEpochMS()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_EndTimeEpochMS(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EndTimeEpochMS()))
                {
                    Construct_EndTimeEpochMS();
                }
                if ((*Value()).hasMember(ItemName_EndTimeEpochMS()))
                {
                    double InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_EndTimeEpochMS()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EndTimeEpochMS(double SetValue)
        {
            try
            {
                (*Value())[ItemName_EndTimeEpochMS()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_EndTimeEpochMS(void) const
        {
            double GetValue = (*Value())[ItemName_EndTimeEpochMS()];
            return (double)GetValue;
        }
        bool Get_EndTimeEpochMS(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EndTimeEpochMS()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_EndTimeEpochMS()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DataRateHz (Type: "double")
protected:
    void Construct_DataRateHz(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DataRateHz()))
            {
                double InitValue;
                InitValue = 0;
                    (*Value())[ItemName_DataRateHz()] = (double)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DataRateHz(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataRateHz()))
                {
                    Construct_DataRateHz();
                }
                if ((*Value()).hasMember(ItemName_DataRateHz()))
                {
                    double InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_DataRateHz()] = (double)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataRateHz(double SetValue)
        {
            try
            {
                (*Value())[ItemName_DataRateHz()] = (double)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        double Get_DataRateHz(void) const
        {
            double GetValue = (*Value())[ItemName_DataRateHz()];
            return (double)GetValue;
        }
        bool Get_DataRateHz(double& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataRateHz()]).valid())
                {
                    GetValue = (double)((double)((*Value())[ItemName_DataRateHz()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_StreamMeasurementInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_StreamSourceInfo
//------------------------------------------------------------------------
class CGIns_StreamSourceInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SID(void)
        {
            static std::string str("SID");
            return str;
        }
    public:
        static std::string const& ItemName_Partition(void)
        {
            static std::string str("Partition");
            return str;
        }
    public:
        static std::string const& ItemName_Topic(void)
        {
            static std::string str("Topic");
            return str;
        }
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_MeasurementInfos(void)
        {
            static std::string str("MeasurementInfos");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_StreamSourceInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.311");
        return str;
    }
public:
    CGIns_StreamSourceInfo(void)
    {
        try
        {
            Construct_SID();
            Construct_Partition();
            Construct_Topic();
            Construct_Name();
            Construct_MeasurementInfos();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_StreamSourceInfo(const CGIns_StreamSourceInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_StreamSourceInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SID();
            Construct_Partition();
            Construct_Topic();
            Construct_Name();
            Construct_MeasurementInfos();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_StreamSourceInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SID();
            Initialize_Partition();
            Initialize_Topic();
            Initialize_Name();
            Initialize_MeasurementInfos();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SID (Type: "std::string")
    protected:
        void Construct_SID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SID()))
                {
                    Construct_SID();
                }
                if ((*Value()).hasMember(ItemName_SID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SID(void) const
        {
            return (*Value())[ItemName_SID()];
        }
        bool Get_SID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Partition (Type: "int32_t")
protected:
    void Construct_Partition(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Partition()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Partition()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Partition(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Partition()))
                {
                    Construct_Partition();
                }
                if ((*Value()).hasMember(ItemName_Partition()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Partition()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Partition(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Partition()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Partition(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Partition()];
            return (int32_t)GetValue;
        }
        bool Get_Partition(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Partition()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Partition()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Topic (Type: "std::string")
    protected:
        void Construct_Topic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Topic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Topic()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Topic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Topic()))
                {
                    Construct_Topic();
                }
                if ((*Value()).hasMember(ItemName_Topic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Topic()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Topic(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Topic()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Topic(void) const
        {
            return (*Value())[ItemName_Topic()];
        }
        bool Get_Topic(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Topic()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Topic()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MeasurementInfos (Type: "CGIns_StreamMeasurementInfo[0]")
    protected:
        void Construct_MeasurementInfos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    CGIns_StreamMeasurementInfo InitValue;
                    (*Value())[ItemName_MeasurementInfos()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_MeasurementInfos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    Construct_MeasurementInfos();
                }
                if ((*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    CGIns_StreamMeasurementInfo InitValue;
                    (*Value())[ItemName_MeasurementInfos()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_MeasurementInfos(int NewSize)
        {
            try
            {
                CGIns_StreamMeasurementInfo InitValue;
                (*Value())[ItemName_MeasurementInfos()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_MeasurementInfos(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    return (*Value())[ItemName_MeasurementInfos()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_MeasurementInfos(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    (*Value())[ItemName_MeasurementInfos()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_MeasurementInfos(int ArrayIndex, CGIns_StreamMeasurementInfo SetValue)
        {
            try
            {
                (*Value())[ItemName_MeasurementInfos()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_MeasurementInfos(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    (*Value())[ItemName_MeasurementInfos()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MeasurementInfos(int ArrayIndex, const CGIns_StreamMeasurementInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_MeasurementInfos()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_MeasurementInfos()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_StreamMeasurementInfo Get_MeasurementInfos(int ArrayIndex) const
        {
            return (*Value())[ItemName_MeasurementInfos()][ArrayIndex];
        }
        bool Get_MeasurementInfos(int ArrayIndex, CGIns_StreamMeasurementInfo& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_MeasurementInfos()))
                {
                    if (((*Value())[ItemName_MeasurementInfos()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_MeasurementInfos()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_StreamSourceInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_StreamInfo
//------------------------------------------------------------------------
class CGIns_StreamInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SourceInfos(void)
        {
            static std::string str("SourceInfos");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_StreamInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.312");
        return str;
    }
public:
    CGIns_StreamInfo(void)
    {
        try
        {
            Construct_SourceInfos();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_StreamInfo(const CGIns_StreamInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_StreamInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SourceInfos();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_StreamInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SourceInfos();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SourceInfos (Type: "CGIns_StreamSourceInfo[0]")
    protected:
        void Construct_SourceInfos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceInfos()))
                {
                    CGIns_StreamSourceInfo InitValue;
                    (*Value())[ItemName_SourceInfos()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_SourceInfos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceInfos()))
                {
                    Construct_SourceInfos();
                }
                if ((*Value()).hasMember(ItemName_SourceInfos()))
                {
                    CGIns_StreamSourceInfo InitValue;
                    (*Value())[ItemName_SourceInfos()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_SourceInfos(int NewSize)
        {
            try
            {
                CGIns_StreamSourceInfo InitValue;
                (*Value())[ItemName_SourceInfos()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_SourceInfos(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SourceInfos()))
                {
                    return (*Value())[ItemName_SourceInfos()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_SourceInfos(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SourceInfos()))
                {
                    (*Value())[ItemName_SourceInfos()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_SourceInfos(int ArrayIndex, CGIns_StreamSourceInfo SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceInfos()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_SourceInfos(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SourceInfos()))
                {
                    (*Value())[ItemName_SourceInfos()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceInfos(int ArrayIndex, const CGIns_StreamSourceInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceInfos()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_SourceInfos()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_StreamSourceInfo Get_SourceInfos(int ArrayIndex) const
        {
            return (*Value())[ItemName_SourceInfos()][ArrayIndex];
        }
        bool Get_SourceInfos(int ArrayIndex, CGIns_StreamSourceInfo& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_SourceInfos()))
                {
                    if (((*Value())[ItemName_SourceInfos()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_SourceInfos()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_StreamInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_NetworkScan_UART_Info
//------------------------------------------------------------------------
class CGIns_NetworkScan_UART_Info : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_PortIndex(void)
        {
            static std::string str("PortIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_NetworkScan_UART_Info");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.400");
        return str;
    }
public:
    CGIns_NetworkScan_UART_Info(void)
    {
        try
        {
            Construct_PortIndex();
            Construct_Address();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_NetworkScan_UART_Info(const CGIns_NetworkScan_UART_Info& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_NetworkScan_UART_Info(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_PortIndex();
            Construct_Address();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_NetworkScan_UART_Info(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_PortIndex();
            Initialize_Address();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item PortIndex (Type: "int32_t")
protected:
    void Construct_PortIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_PortIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_PortIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_PortIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PortIndex()))
                {
                    Construct_PortIndex();
                }
                if ((*Value()).hasMember(ItemName_PortIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_PortIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PortIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_PortIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_PortIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_PortIndex()];
            return (int32_t)GetValue;
        }
        bool Get_PortIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PortIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_PortIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Address (Type: "int32_t")
protected:
    void Construct_Address(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Address()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Address()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Address()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Address(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Address()];
            return (int32_t)GetValue;
        }
        bool Get_Address(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Address()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_NetworkScan_UART_Info


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_NetworkScan_NetworkInfo
//------------------------------------------------------------------------
class CGIns_NetworkScan_NetworkInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_IPAddress_IPv4_Dynamic(void)
        {
            static std::string str("IPAddress_IPv4_Dynamic");
            return str;
        }
    public:
        static std::string const& ItemName_IPAddress_IPv6_Dynamic(void)
        {
            static std::string str("IPAddress_IPv6_Dynamic");
            return str;
        }
    public:
        static std::string const& ItemName_IPAddress_IPv4_Static(void)
        {
            static std::string str("IPAddress_IPv4_Static");
            return str;
        }
    public:
        static std::string const& ItemName_DHCP_Enabled(void)
        {
            static std::string str("DHCP_Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_MACAddress(void)
        {
            static std::string str("MACAddress");
            return str;
        }
    public:
        static std::string const& ItemName_SubnetMask(void)
        {
            static std::string str("SubnetMask");
            return str;
        }
    public:
        static std::string const& ItemName_GatewayAddress(void)
        {
            static std::string str("GatewayAddress");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_NetworkScan_NetworkInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.401");
        return str;
    }
public:
    CGIns_NetworkScan_NetworkInfo(void)
    {
        try
        {
            Construct_IPAddress_IPv4_Dynamic();
            Construct_IPAddress_IPv6_Dynamic();
            Construct_IPAddress_IPv4_Static();
            Construct_DHCP_Enabled();
            Construct_MACAddress();
            Construct_SubnetMask();
            Construct_GatewayAddress();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_NetworkScan_NetworkInfo(const CGIns_NetworkScan_NetworkInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_NetworkScan_NetworkInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_IPAddress_IPv4_Dynamic();
            Construct_IPAddress_IPv6_Dynamic();
            Construct_IPAddress_IPv4_Static();
            Construct_DHCP_Enabled();
            Construct_MACAddress();
            Construct_SubnetMask();
            Construct_GatewayAddress();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_NetworkScan_NetworkInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_IPAddress_IPv4_Dynamic();
            Initialize_IPAddress_IPv6_Dynamic();
            Initialize_IPAddress_IPv4_Static();
            Initialize_DHCP_Enabled();
            Initialize_MACAddress();
            Initialize_SubnetMask();
            Initialize_GatewayAddress();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item IPAddress_IPv4_Dynamic (Type: "std::string")
    protected:
        void Construct_IPAddress_IPv4_Dynamic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_Dynamic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4_Dynamic()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IPAddress_IPv4_Dynamic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_Dynamic()))
                {
                    Construct_IPAddress_IPv4_Dynamic();
                }
                if ((*Value()).hasMember(ItemName_IPAddress_IPv4_Dynamic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4_Dynamic()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress_IPv4_Dynamic(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress_IPv4_Dynamic()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_IPAddress_IPv4_Dynamic(void) const
        {
            return (*Value())[ItemName_IPAddress_IPv4_Dynamic()];
        }
        bool Get_IPAddress_IPv4_Dynamic(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress_IPv4_Dynamic()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_IPAddress_IPv4_Dynamic()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IPAddress_IPv6_Dynamic (Type: "std::string")
    protected:
        void Construct_IPAddress_IPv6_Dynamic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv6_Dynamic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv6_Dynamic()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IPAddress_IPv6_Dynamic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv6_Dynamic()))
                {
                    Construct_IPAddress_IPv6_Dynamic();
                }
                if ((*Value()).hasMember(ItemName_IPAddress_IPv6_Dynamic()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv6_Dynamic()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress_IPv6_Dynamic(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress_IPv6_Dynamic()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_IPAddress_IPv6_Dynamic(void) const
        {
            return (*Value())[ItemName_IPAddress_IPv6_Dynamic()];
        }
        bool Get_IPAddress_IPv6_Dynamic(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress_IPv6_Dynamic()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_IPAddress_IPv6_Dynamic()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IPAddress_IPv4_Static (Type: "std::string")
    protected:
        void Construct_IPAddress_IPv4_Static(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_Static()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4_Static()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IPAddress_IPv4_Static(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_Static()))
                {
                    Construct_IPAddress_IPv4_Static();
                }
                if ((*Value()).hasMember(ItemName_IPAddress_IPv4_Static()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4_Static()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress_IPv4_Static(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress_IPv4_Static()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_IPAddress_IPv4_Static(void) const
        {
            return (*Value())[ItemName_IPAddress_IPv4_Static()];
        }
        bool Get_IPAddress_IPv4_Static(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress_IPv4_Static()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_IPAddress_IPv4_Static()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DHCP_Enabled (Type: "bool")
protected:
    void Construct_DHCP_Enabled(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DHCP_Enabled()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DHCP_Enabled()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DHCP_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DHCP_Enabled()))
                {
                    Construct_DHCP_Enabled();
                }
                if ((*Value()).hasMember(ItemName_DHCP_Enabled()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DHCP_Enabled()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DHCP_Enabled(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DHCP_Enabled()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DHCP_Enabled(void) const
        {
            bool GetValue = (*Value())[ItemName_DHCP_Enabled()];
            return (bool)GetValue;
        }
        bool Get_DHCP_Enabled(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DHCP_Enabled()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DHCP_Enabled()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MACAddress (Type: "std::string")
    protected:
        void Construct_MACAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MACAddress()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MACAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MACAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MACAddress()))
                {
                    Construct_MACAddress();
                }
                if ((*Value()).hasMember(ItemName_MACAddress()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_MACAddress()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MACAddress(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_MACAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_MACAddress(void) const
        {
            return (*Value())[ItemName_MACAddress()];
        }
        bool Get_MACAddress(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MACAddress()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_MACAddress()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SubnetMask (Type: "std::string")
    protected:
        void Construct_SubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubnetMask()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SubnetMask()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubnetMask()))
                {
                    Construct_SubnetMask();
                }
                if ((*Value()).hasMember(ItemName_SubnetMask()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SubnetMask()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SubnetMask(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SubnetMask()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SubnetMask(void) const
        {
            return (*Value())[ItemName_SubnetMask()];
        }
        bool Get_SubnetMask(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SubnetMask()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SubnetMask()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item GatewayAddress (Type: "std::string")
    protected:
        void Construct_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_GatewayAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    Construct_GatewayAddress();
                }
                if ((*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_GatewayAddress()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_GatewayAddress(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_GatewayAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_GatewayAddress(void) const
        {
            return (*Value())[ItemName_GatewayAddress()];
        }
        bool Get_GatewayAddress(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_GatewayAddress()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_GatewayAddress()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_NetworkScan_NetworkInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_NetworkScan_DeviceInfo
//------------------------------------------------------------------------
class CGIns_NetworkScan_DeviceInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Location(void)
        {
            static std::string str("Location");
            return str;
        }
    public:
        static std::string const& ItemName_SerialNumber(void)
        {
            static std::string str("SerialNumber");
            return str;
        }
    public:
        static std::string const& ItemName_Firmware(void)
        {
            static std::string str("Firmware");
            return str;
        }
    public:
        static std::string const& ItemName_TypeName(void)
        {
            static std::string str("TypeName");
            return str;
        }
    public:
        static std::string const& ItemName_TypeInfo(void)
        {
            static std::string str("TypeInfo");
            return str;
        }
    public:
        static std::string const& ItemName_Ethernet(void)
        {
            static std::string str("Ethernet");
            return str;
        }
    public:
        static std::string const& ItemName_RS232_PPP(void)
        {
            static std::string str("RS232_PPP");
            return str;
        }
    public:
        static std::string const& ItemName_RS485_PPP(void)
        {
            static std::string str("RS485_PPP");
            return str;
        }
    public:
        static std::string const& ItemName_UART(void)
        {
            static std::string str("UART");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_NetworkScan_DeviceInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.402");
        return str;
    }
public:
    CGIns_NetworkScan_DeviceInfo(void)
    {
        try
        {
            Construct_Location();
            Construct_SerialNumber();
            Construct_Firmware();
            Construct_TypeName();
            Construct_TypeInfo();
            Construct_Ethernet();
            Construct_RS232_PPP();
            Construct_RS485_PPP();
            Construct_UART();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_NetworkScan_DeviceInfo(const CGIns_NetworkScan_DeviceInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_NetworkScan_DeviceInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Location();
            Construct_SerialNumber();
            Construct_Firmware();
            Construct_TypeName();
            Construct_TypeInfo();
            Construct_Ethernet();
            Construct_RS232_PPP();
            Construct_RS485_PPP();
            Construct_UART();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_NetworkScan_DeviceInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Location();
            Initialize_SerialNumber();
            Initialize_Firmware();
            Initialize_TypeName();
            Initialize_TypeInfo();
            Initialize_Ethernet();
            Initialize_RS232_PPP();
            Initialize_RS485_PPP();
            Initialize_UART();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Location (Type: "std::string")
    protected:
        void Construct_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Location()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    Construct_Location();
                }
                if ((*Value()).hasMember(ItemName_Location()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Location()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Location(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Location()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Location(void) const
        {
            return (*Value())[ItemName_Location()];
        }
        bool Get_Location(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Location()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Location()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SerialNumber (Type: "std::string")
    protected:
        void Construct_SerialNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SerialNumber()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SerialNumber()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SerialNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SerialNumber()))
                {
                    Construct_SerialNumber();
                }
                if ((*Value()).hasMember(ItemName_SerialNumber()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SerialNumber()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SerialNumber(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SerialNumber()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SerialNumber(void) const
        {
            return (*Value())[ItemName_SerialNumber()];
        }
        bool Get_SerialNumber(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SerialNumber()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SerialNumber()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Firmware (Type: "std::string")
    protected:
        void Construct_Firmware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Firmware()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Firmware()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Firmware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Firmware()))
                {
                    Construct_Firmware();
                }
                if ((*Value()).hasMember(ItemName_Firmware()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Firmware()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Firmware(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Firmware()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Firmware(void) const
        {
            return (*Value())[ItemName_Firmware()];
        }
        bool Get_Firmware(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Firmware()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Firmware()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeName (Type: "std::string")
    protected:
        void Construct_TypeName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_TypeName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeName()))
                {
                    Construct_TypeName();
                }
                if ((*Value()).hasMember(ItemName_TypeName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_TypeName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_TypeName(void) const
        {
            return (*Value())[ItemName_TypeName()];
        }
        bool Get_TypeName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_TypeName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeInfo (Type: "CGIns_Info_DeviceType")
    protected:
        void Construct_TypeInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeInfo()))
                {
                    CGIns_Info_DeviceType InitValue;
                    (*Value())[ItemName_TypeInfo()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeInfo()))
                {
                    Construct_TypeInfo();
                }
                if ((*Value()).hasMember(ItemName_TypeInfo()))
                {
                    CGIns_Info_DeviceType InitValue;
                    (*Value())[ItemName_TypeInfo()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeInfo(const CGIns_Info_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeInfo()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_DeviceType Get_TypeInfo(void) const
        {
            return (*Value())[ItemName_TypeInfo()];
        }
        bool Get_TypeInfo(CGIns_Info_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeInfo()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeInfo()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Ethernet (Type: "CGIns_NetworkScan_NetworkInfo")
    protected:
        void Construct_Ethernet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Ethernet()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Ethernet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet()))
                {
                    Construct_Ethernet();
                }
                if ((*Value()).hasMember(ItemName_Ethernet()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Ethernet()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Ethernet(const CGIns_NetworkScan_NetworkInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_Ethernet()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_NetworkInfo Get_Ethernet(void) const
        {
            return (*Value())[ItemName_Ethernet()];
        }
        bool Get_Ethernet(CGIns_NetworkScan_NetworkInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Ethernet()]).valid())
                {
                    GetValue = (*Value())[ItemName_Ethernet()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS232_PPP (Type: "CGIns_NetworkScan_NetworkInfo")
    protected:
        void Construct_RS232_PPP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS232_PPP()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_RS232_PPP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS232_PPP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS232_PPP()))
                {
                    Construct_RS232_PPP();
                }
                if ((*Value()).hasMember(ItemName_RS232_PPP()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_RS232_PPP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS232_PPP(const CGIns_NetworkScan_NetworkInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS232_PPP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_NetworkInfo Get_RS232_PPP(void) const
        {
            return (*Value())[ItemName_RS232_PPP()];
        }
        bool Get_RS232_PPP(CGIns_NetworkScan_NetworkInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS232_PPP()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS232_PPP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485_PPP (Type: "CGIns_NetworkScan_NetworkInfo")
    protected:
        void Construct_RS485_PPP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485_PPP()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_RS485_PPP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485_PPP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485_PPP()))
                {
                    Construct_RS485_PPP();
                }
                if ((*Value()).hasMember(ItemName_RS485_PPP()))
                {
                    CGIns_NetworkScan_NetworkInfo InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_RS485_PPP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485_PPP(const CGIns_NetworkScan_NetworkInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485_PPP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_NetworkInfo Get_RS485_PPP(void) const
        {
            return (*Value())[ItemName_RS485_PPP()];
        }
        bool Get_RS485_PPP(CGIns_NetworkScan_NetworkInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485_PPP()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485_PPP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UART (Type: "CGIns_NetworkScan_UART_Info")
    protected:
        void Construct_UART(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UART()))
                {
                    CGIns_NetworkScan_UART_Info InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_UART()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UART(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UART()))
                {
                    Construct_UART();
                }
                if ((*Value()).hasMember(ItemName_UART()))
                {
                    CGIns_NetworkScan_UART_Info InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_UART()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UART(const CGIns_NetworkScan_UART_Info& SetValue)
        {
            try
            {
                (*Value())[ItemName_UART()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_UART_Info Get_UART(void) const
        {
            return (*Value())[ItemName_UART()];
        }
        bool Get_UART(CGIns_NetworkScan_UART_Info& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UART()]).valid())
                {
                    GetValue = (*Value())[ItemName_UART()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_NetworkScan_DeviceInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_NetworkScan_InterfaceInfo
//------------------------------------------------------------------------
class CGIns_NetworkScan_InterfaceInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ConnectionType(void)
        {
            static std::string str("ConnectionType");
            return str;
        }
    public:
        static std::string const& ItemName_IPAddress_IPv4(void)
        {
            static std::string str("IPAddress_IPv4");
            return str;
        }
    public:
        static std::string const& ItemName_SubnetMask_IPv4(void)
        {
            static std::string str("SubnetMask_IPv4");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_NetworkScan_InterfaceInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.403");
        return str;
    }
public:
    CGIns_NetworkScan_InterfaceInfo(void)
    {
        try
        {
            Construct_ConnectionType();
            Construct_IPAddress_IPv4();
            Construct_SubnetMask_IPv4();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_NetworkScan_InterfaceInfo(const CGIns_NetworkScan_InterfaceInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_NetworkScan_InterfaceInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ConnectionType();
            Construct_IPAddress_IPv4();
            Construct_SubnetMask_IPv4();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_NetworkScan_InterfaceInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ConnectionType();
            Initialize_IPAddress_IPv4();
            Initialize_SubnetMask_IPv4();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ConnectionType (Type: "CGIns_Base_ElementValue")
    protected:
        void Construct_ConnectionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionType()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ConnectionType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionType()))
                {
                    Construct_ConnectionType();
                }
                if ((*Value()).hasMember(ItemName_ConnectionType()))
                {
                    CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ConnectionType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionType(const CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Base_ElementValue Get_ConnectionType(void) const
        {
            return (*Value())[ItemName_ConnectionType()];
        }
        bool Get_ConnectionType(CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IPAddress_IPv4 (Type: "std::string")
    protected:
        void Construct_IPAddress_IPv4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IPAddress_IPv4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4()))
                {
                    Construct_IPAddress_IPv4();
                }
                if ((*Value()).hasMember(ItemName_IPAddress_IPv4()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_IPAddress_IPv4()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress_IPv4(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress_IPv4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_IPAddress_IPv4(void) const
        {
            return (*Value())[ItemName_IPAddress_IPv4()];
        }
        bool Get_IPAddress_IPv4(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress_IPv4()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_IPAddress_IPv4()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SubnetMask_IPv4 (Type: "std::string")
    protected:
        void Construct_SubnetMask_IPv4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubnetMask_IPv4()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SubnetMask_IPv4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SubnetMask_IPv4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubnetMask_IPv4()))
                {
                    Construct_SubnetMask_IPv4();
                }
                if ((*Value()).hasMember(ItemName_SubnetMask_IPv4()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SubnetMask_IPv4()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SubnetMask_IPv4(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SubnetMask_IPv4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SubnetMask_IPv4(void) const
        {
            return (*Value())[ItemName_SubnetMask_IPv4()];
        }
        bool Get_SubnetMask_IPv4(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SubnetMask_IPv4()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SubnetMask_IPv4()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_NetworkScan_InterfaceInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::CGIns_NetworkScan_ResultInfo
//------------------------------------------------------------------------
class CGIns_NetworkScan_ResultInfo : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_IDAmbiguous(void)
        {
            static std::string str("IDAmbiguous");
            return str;
        }
    public:
        static std::string const& ItemName_SerialNumberAmbiguous(void)
        {
            static std::string str("SerialNumberAmbiguous");
            return str;
        }
    public:
        static std::string const& ItemName_IPAddress_IPv4_DynamicAmbiguous(void)
        {
            static std::string str("IPAddress_IPv4_DynamicAmbiguous");
            return str;
        }
    public:
        static std::string const& ItemName_Interface(void)
        {
            static std::string str("Interface");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceInfo(void)
        {
            static std::string str("DeviceInfo");
            return str;
        }
    public:
        static std::string const& ItemName_IsOperational(void)
        {
            static std::string str("IsOperational");
            return str;
        }
    public:
        static std::string const& ItemName_IsMaintainable(void)
        {
            static std::string str("IsMaintainable");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("GIns_NetworkScan_ResultInfo");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("0.404");
        return str;
    }
public:
    CGIns_NetworkScan_ResultInfo(void)
    {
        try
        {
            Construct_ID();
            Construct_IDAmbiguous();
            Construct_SerialNumberAmbiguous();
            Construct_IPAddress_IPv4_DynamicAmbiguous();
            Construct_Interface();
            Construct_DeviceInfo();
            Construct_IsOperational();
            Construct_IsMaintainable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CGIns_NetworkScan_ResultInfo(const CGIns_NetworkScan_ResultInfo& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CGIns_NetworkScan_ResultInfo(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_IDAmbiguous();
            Construct_SerialNumberAmbiguous();
            Construct_IPAddress_IPv4_DynamicAmbiguous();
            Construct_Interface();
            Construct_DeviceInfo();
            Construct_IsOperational();
            Construct_IsMaintainable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CGIns_NetworkScan_ResultInfo(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_IDAmbiguous();
            Initialize_SerialNumberAmbiguous();
            Initialize_IPAddress_IPv4_DynamicAmbiguous();
            Initialize_Interface();
            Initialize_DeviceInfo();
            Initialize_IsOperational();
            Initialize_IsMaintainable();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IDAmbiguous (Type: "bool")
protected:
    void Construct_IDAmbiguous(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IDAmbiguous()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IDAmbiguous()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IDAmbiguous(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDAmbiguous()))
                {
                    Construct_IDAmbiguous();
                }
                if ((*Value()).hasMember(ItemName_IDAmbiguous()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IDAmbiguous()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDAmbiguous(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IDAmbiguous()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IDAmbiguous(void) const
        {
            bool GetValue = (*Value())[ItemName_IDAmbiguous()];
            return (bool)GetValue;
        }
        bool Get_IDAmbiguous(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDAmbiguous()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IDAmbiguous()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item SerialNumberAmbiguous (Type: "bool")
protected:
    void Construct_SerialNumberAmbiguous(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_SerialNumberAmbiguous()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_SerialNumberAmbiguous()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_SerialNumberAmbiguous(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SerialNumberAmbiguous()))
                {
                    Construct_SerialNumberAmbiguous();
                }
                if ((*Value()).hasMember(ItemName_SerialNumberAmbiguous()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_SerialNumberAmbiguous()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SerialNumberAmbiguous(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_SerialNumberAmbiguous()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_SerialNumberAmbiguous(void) const
        {
            bool GetValue = (*Value())[ItemName_SerialNumberAmbiguous()];
            return (bool)GetValue;
        }
        bool Get_SerialNumberAmbiguous(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SerialNumberAmbiguous()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_SerialNumberAmbiguous()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IPAddress_IPv4_DynamicAmbiguous (Type: "bool")
protected:
    void Construct_IPAddress_IPv4_DynamicAmbiguous(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_DynamicAmbiguous()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IPAddress_IPv4_DynamicAmbiguous(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IPAddress_IPv4_DynamicAmbiguous()))
                {
                    Construct_IPAddress_IPv4_DynamicAmbiguous();
                }
                if ((*Value()).hasMember(ItemName_IPAddress_IPv4_DynamicAmbiguous()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IPAddress_IPv4_DynamicAmbiguous(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IPAddress_IPv4_DynamicAmbiguous(void) const
        {
            bool GetValue = (*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()];
            return (bool)GetValue;
        }
        bool Get_IPAddress_IPv4_DynamicAmbiguous(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IPAddress_IPv4_DynamicAmbiguous()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Interface (Type: "CGIns_NetworkScan_InterfaceInfo")
    protected:
        void Construct_Interface(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Interface()))
                {
                    CGIns_NetworkScan_InterfaceInfo InitValue;
                    (*Value())[ItemName_Interface()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Interface(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Interface()))
                {
                    Construct_Interface();
                }
                if ((*Value()).hasMember(ItemName_Interface()))
                {
                    CGIns_NetworkScan_InterfaceInfo InitValue;
                    (*Value())[ItemName_Interface()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Interface(const CGIns_NetworkScan_InterfaceInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_Interface()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_InterfaceInfo Get_Interface(void) const
        {
            return (*Value())[ItemName_Interface()];
        }
        bool Get_Interface(CGIns_NetworkScan_InterfaceInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Interface()]).valid())
                {
                    GetValue = (*Value())[ItemName_Interface()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceInfo (Type: "CGIns_NetworkScan_DeviceInfo")
    protected:
        void Construct_DeviceInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceInfo()))
                {
                    CGIns_NetworkScan_DeviceInfo InitValue;
                    (*Value())[ItemName_DeviceInfo()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceInfo(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceInfo()))
                {
                    Construct_DeviceInfo();
                }
                if ((*Value()).hasMember(ItemName_DeviceInfo()))
                {
                    CGIns_NetworkScan_DeviceInfo InitValue;
                    (*Value())[ItemName_DeviceInfo()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceInfo(const CGIns_NetworkScan_DeviceInfo& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceInfo()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_NetworkScan_DeviceInfo Get_DeviceInfo(void) const
        {
            return (*Value())[ItemName_DeviceInfo()];
        }
        bool Get_DeviceInfo(CGIns_NetworkScan_DeviceInfo& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceInfo()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeviceInfo()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IsOperational (Type: "bool")
protected:
    void Construct_IsOperational(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IsOperational()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IsOperational()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IsOperational(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IsOperational()))
                {
                    Construct_IsOperational();
                }
                if ((*Value()).hasMember(ItemName_IsOperational()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IsOperational()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IsOperational(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IsOperational()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IsOperational(void) const
        {
            bool GetValue = (*Value())[ItemName_IsOperational()];
            return (bool)GetValue;
        }
        bool Get_IsOperational(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IsOperational()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IsOperational()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IsMaintainable (Type: "bool")
protected:
    void Construct_IsMaintainable(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IsMaintainable()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IsMaintainable()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IsMaintainable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IsMaintainable()))
                {
                    Construct_IsMaintainable();
                }
                if ((*Value()).hasMember(ItemName_IsMaintainable()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IsMaintainable()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IsMaintainable(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IsMaintainable()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IsMaintainable(void) const
        {
            bool GetValue = (*Value())[ItemName_IsMaintainable()];
            return (bool)GetValue;
        }
        bool Get_IsMaintainable(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IsMaintainable()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IsMaintainable()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CGIns_NetworkScan_ResultInfo


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Notification::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_NOTIFICATION)
namespace GIns_Notification
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Notification(void)
    {
        static std::string str("Notification");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Notification");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Notification();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Notification();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Notification();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Notification");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Notification (Type: "CGIns_Info_Notification")
    protected:
        void Construct_Notification(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Notification()))
                {
                    CGIns_Info_Notification InitValue;
                    (*Value())[ItemName_Notification()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Notification(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Notification()))
                {
                    Construct_Notification();
                }
                if ((*Value()).hasMember(ItemName_Notification()))
                {
                    CGIns_Info_Notification InitValue;
                    (*Value())[ItemName_Notification()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Notification(const CGIns_Info_Notification& SetValue)
        {
            try
            {
                (*Value())[ItemName_Notification()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_Notification Get_Notification(void) const
        {
            return (*Value())[ItemName_Notification()];
        }
        bool Get_Notification(CGIns_Info_Notification& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Notification()]).valid())
                {
                    GetValue = (*Value())[ItemName_Notification()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GIns_Notification
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_NOTIFICATION)


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Trace::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_TRACE)
namespace GIns_Trace
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Traces(void)
    {
        static std::string str("Traces");
        return str;
    }
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Trace");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Traces();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Traces();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Traces();
            Initialize_ID();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Trace");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Traces (Type: "CGIns_Info_TraceItem[0]")
    protected:
        void Construct_Traces(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Traces()))
                {
                    CGIns_Info_TraceItem InitValue;
                    (*Value())[ItemName_Traces()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Traces(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Traces()))
                {
                    Construct_Traces();
                }
                if ((*Value()).hasMember(ItemName_Traces()))
                {
                    CGIns_Info_TraceItem InitValue;
                    (*Value())[ItemName_Traces()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Traces(int NewSize)
        {
            try
            {
                CGIns_Info_TraceItem InitValue;
                (*Value())[ItemName_Traces()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Traces(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Traces()))
                {
                    return (*Value())[ItemName_Traces()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Traces(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Traces()))
                {
                    (*Value())[ItemName_Traces()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Traces(int ArrayIndex, CGIns_Info_TraceItem SetValue)
        {
            try
            {
                (*Value())[ItemName_Traces()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Traces(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Traces()))
                {
                    (*Value())[ItemName_Traces()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Traces(int ArrayIndex, const CGIns_Info_TraceItem& SetValue)
        {
            try
            {
                (*Value())[ItemName_Traces()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Traces()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CGIns_Info_TraceItem Get_Traces(int ArrayIndex) const
        {
            return (*Value())[ItemName_Traces()][ArrayIndex];
        }
        bool Get_Traces(int ArrayIndex, CGIns_Info_TraceItem& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Traces()))
                {
                    if (((*Value())[ItemName_Traces()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Traces()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GIns_Trace
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_TRACE)


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Connect::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_CONNECT)
namespace GIns_Connect
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Text(void)
    {
        static std::string str("Text");
        return str;
    }
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Connect");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Text();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Text();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Text();
            Initialize_ID();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Connect");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Text (Type: "std::string")
    protected:
        void Construct_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Text(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Text()))
                {
                    Construct_Text();
                }
                if ((*Value()).hasMember(ItemName_Text()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Text()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Text(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Text()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Text(void) const
        {
            return (*Value())[ItemName_Text()];
        }
        bool Get_Text(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Text()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Text()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GIns_Connect
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_CONNECT)


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Disconnect::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_DISCONNECT)
namespace GIns_Disconnect
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReuseID(void)
    {
        static std::string str("ReuseID");
        return str;
    }
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Disconnect");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReuseID();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReuseID();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReuseID();
            Initialize_ID();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Disconnect");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
//------------------------------------------------------------------------
// Item ReuseID (Type: "bool")
protected:
    void Construct_ReuseID(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReuseID()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_ReuseID()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReuseID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReuseID()))
                {
                    Construct_ReuseID();
                }
                if ((*Value()).hasMember(ItemName_ReuseID()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_ReuseID()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReuseID(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_ReuseID()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_ReuseID(void) const
        {
            bool GetValue = (*Value())[ItemName_ReuseID()];
            return (bool)GetValue;
        }
        bool Get_ReuseID(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReuseID()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_ReuseID()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GIns_Disconnect
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_DISCONNECT)


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Notification::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_NOTIFICATION)
namespace GIns_Notification
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_MessagesAccepted(void)
    {
        static std::string str("MessagesAccepted");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Notification");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_MessagesAccepted();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_MessagesAccepted();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_MessagesAccepted();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Notification");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
//------------------------------------------------------------------------
// Item MessagesAccepted (Type: "int32_t")
protected:
    void Construct_MessagesAccepted(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MessagesAccepted()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MessagesAccepted()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MessagesAccepted(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MessagesAccepted()))
                {
                    Construct_MessagesAccepted();
                }
                if ((*Value()).hasMember(ItemName_MessagesAccepted()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MessagesAccepted()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MessagesAccepted(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MessagesAccepted()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MessagesAccepted(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MessagesAccepted()];
            return (int32_t)GetValue;
        }
        bool Get_MessagesAccepted(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MessagesAccepted()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MessagesAccepted()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GIns_Notification
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_NOTIFICATION)


//------------------------------------------------------------------------
// GInsXmlRpcStdAPI::GIns_Connect::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_CONNECT)
namespace GIns_Connect
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("GInsXmlRpcStdAPI.GIns_Connect");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("GInsXmlRpcStdAPI::GIns_Connect");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GIns_Connect
#endif //#if defined(IMPLEMENT_GINSXMLRPCSTDAPI_GINS_CONNECT)
//========================================================================
}; // namespace GInsXmlRpcStdAPI
//========================================================================
#endif // #if !defined(_GINSXMLRPCSTDAPI_TYPES_H)

