//========================================================================
// GInsXmlRpcIFGenEng V2.41 (2021-04-26)
// This file was produced by means of an automated generator tool.
// Please modify content between labeled "{{...}}" positions ONLY!
//========================================================================
#if !defined(_GICONFIG_CONFIGAPI_TYPES_H)
#define _GICONFIG_CONFIGAPI_TYPES_H
//========================================================================
// Implemented methods
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETOBJECTTYPES
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETIDSFROMOBJECTTYPE
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETINFOSFROMIDS
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMES
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMEVARIANTS
#define IMPLEMENT_GICONFIG_CONFIGAPI_GETCONFIGS
#define IMPLEMENT_GICONFIG_CONFIGAPI_SETCONFIGS
#define IMPLEMENT_GICONFIG_CONFIGAPI_SETDEFAULTCONFIGS
#define IMPLEMENT_GICONFIG_CONFIGAPI_REMOVEOBJECTS
#define IMPLEMENT_GICONFIG_CONFIGAPI_MOVEOBJECTS
#define IMPLEMENT_GICONFIG_CONFIGAPI_COPYOBJECTS
#define IMPLEMENT_GICONFIG_CONFIGAPI_HANDLEOBJECTS
#define IMPLEMENT_GICONFIG_CONFIGAPI_CREATEOBJECT
#define IMPLEMENT_GICONFIG_CONFIGAPI_SAVEOBJECT
#define IMPLEMENT_GICONFIG_CONFIGAPI_ASSIGNOBJECTFROMFILE
#define IMPLEMENT_GICONFIG_CONFIGAPI_SETTINGS
#define IMPLEMENT_GICONFIG_CONFIGAPI_CONVERT
#define IMPLEMENT_GICONFIG_CONFIGAPI_CALLASSISTANT


#include <string>
#include <vector>
#include <map>


// GInsXmlRpc
#include "GInsXmlRpcValue.h"
#include "ginsdefs.h"
#include "giconfig_ConfigAPI_Options.h"


/*{{Add_Own_Includes_Or_Declarations*/
#include "GInsXmlRpcStdAPI_Types.h"
/*}}Add_Own_Includes_Or_Declarations*/


//========================================================================
namespace giconfig_ConfigAPI {
//========================================================================
//------------------------------------------------------------------------
// giconfig_ConfigAPI::CAPIInfo
//------------------------------------------------------------------------
class CAPIInfo
{
public:
    static std::string const& Name(void)
    {
        static std::string str("ConfigAPI");
        return str;
    }
    static std::string const& Revision(void)
    {
        static std::string str("0.1");
        return str;
    }
    static std::string const& GeneratorInfo(void)
    {
        static std::string str("GInsXmlRpcIFGenEng V2.41 (2021-04-26)");
        return str;
    }
}; // class CAPIInfo


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_ObjectRef
//------------------------------------------------------------------------
class CType_Base_ObjectRef : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_OwnerIndex(void)
        {
            static std::string str("OwnerIndex");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_ObjectRef");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.0");
        return str;
    }
public:
    CType_Base_ObjectRef(void)
    {
        try
        {
            Construct_Name();
            Construct_OwnerIndex();
            Construct_ID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_ObjectRef(const CType_Base_ObjectRef& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_ObjectRef(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_OwnerIndex();
            Construct_ID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_ObjectRef(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_OwnerIndex();
            Initialize_ID();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item OwnerIndex (Type: "int32_t")
protected:
    void Construct_OwnerIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_OwnerIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_OwnerIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_OwnerIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerIndex()))
                {
                    Construct_OwnerIndex();
                }
                if ((*Value()).hasMember(ItemName_OwnerIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_OwnerIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_OwnerIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_OwnerIndex()];
            return (int32_t)GetValue;
        }
        bool Get_OwnerIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_OwnerIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "std::string")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_ObjectRef


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_PNV_PropertyItem
//------------------------------------------------------------------------
class CType_Base_PNV_PropertyItem : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Types(void)
        {
            static std::string str("Types");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_PNV_PropertyItem");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.1");
        return str;
    }
public:
    CType_Base_PNV_PropertyItem(void)
    {
        try
        {
            Construct_Name();
            Construct_Types();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_PNV_PropertyItem(const CType_Base_PNV_PropertyItem& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_PNV_PropertyItem(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Types();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_PNV_PropertyItem(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Types();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Types (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_Types(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Types()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Types()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Types(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Types()))
                {
                    Construct_Types();
                }
                if ((*Value()).hasMember(ItemName_Types()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Types()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Types(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Types()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_Types(void) const
        {
            return (*Value())[ItemName_Types()];
        }
        bool Get_Types(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Types()]).valid())
                {
                    GetValue = (*Value())[ItemName_Types()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_PNV_PropertyItem


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_PNV_ContainerItem
//------------------------------------------------------------------------
class CType_Base_PNV_ContainerItem : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Name(void)
        {
            static std::string str("Name");
            return str;
        }
    public:
        static std::string const& ItemName_Properties(void)
        {
            static std::string str("Properties");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_PNV_ContainerItem");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.2");
        return str;
    }
public:
    CType_Base_PNV_ContainerItem(void)
    {
        try
        {
            Construct_Name();
            Construct_Properties();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_PNV_ContainerItem(const CType_Base_PNV_ContainerItem& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_PNV_ContainerItem(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Name();
            Construct_Properties();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_PNV_ContainerItem(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Name();
            Initialize_Properties();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Name (Type: "std::string")
    protected:
        void Construct_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Name(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Name()))
                {
                    Construct_Name();
                }
                if ((*Value()).hasMember(ItemName_Name()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Name()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Name(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_Name()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Name(void) const
        {
            return (*Value())[ItemName_Name()];
        }
        bool Get_Name(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Name()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_Name()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Properties (Type: "CType_Base_PNV_PropertyItem[0]")
    protected:
        void Construct_Properties(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Properties()))
                {
                    CType_Base_PNV_PropertyItem InitValue;
                    (*Value())[ItemName_Properties()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Properties(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Properties()))
                {
                    Construct_Properties();
                }
                if ((*Value()).hasMember(ItemName_Properties()))
                {
                    CType_Base_PNV_PropertyItem InitValue;
                    (*Value())[ItemName_Properties()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Properties(int NewSize)
        {
            try
            {
                CType_Base_PNV_PropertyItem InitValue;
                (*Value())[ItemName_Properties()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Properties(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Properties()))
                {
                    return (*Value())[ItemName_Properties()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Properties(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Properties()))
                {
                    (*Value())[ItemName_Properties()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Properties(int ArrayIndex, CType_Base_PNV_PropertyItem SetValue)
        {
            try
            {
                (*Value())[ItemName_Properties()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Properties(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Properties()))
                {
                    (*Value())[ItemName_Properties()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Properties(int ArrayIndex, const CType_Base_PNV_PropertyItem& SetValue)
        {
            try
            {
                (*Value())[ItemName_Properties()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Properties()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_PNV_PropertyItem Get_Properties(int ArrayIndex) const
        {
            return (*Value())[ItemName_Properties()][ArrayIndex];
        }
        bool Get_Properties(int ArrayIndex, CType_Base_PNV_PropertyItem& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Properties()))
                {
                    if (((*Value())[ItemName_Properties()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Properties()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_PNV_ContainerItem


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_PNV
//------------------------------------------------------------------------
class CType_Base_PNV : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Containers(void)
        {
            static std::string str("Containers");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_PNV");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.3");
        return str;
    }
public:
    CType_Base_PNV(void)
    {
        try
        {
            Construct_Containers();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_PNV(const CType_Base_PNV& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_PNV(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Containers();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_PNV(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Containers();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Containers (Type: "CType_Base_PNV_ContainerItem[0]")
    protected:
        void Construct_Containers(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Containers()))
                {
                    CType_Base_PNV_ContainerItem InitValue;
                    (*Value())[ItemName_Containers()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Containers(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Containers()))
                {
                    Construct_Containers();
                }
                if ((*Value()).hasMember(ItemName_Containers()))
                {
                    CType_Base_PNV_ContainerItem InitValue;
                    (*Value())[ItemName_Containers()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Containers(int NewSize)
        {
            try
            {
                CType_Base_PNV_ContainerItem InitValue;
                (*Value())[ItemName_Containers()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Containers(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Containers()))
                {
                    return (*Value())[ItemName_Containers()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Containers(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Containers()))
                {
                    (*Value())[ItemName_Containers()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Containers(int ArrayIndex, CType_Base_PNV_ContainerItem SetValue)
        {
            try
            {
                (*Value())[ItemName_Containers()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Containers(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Containers()))
                {
                    (*Value())[ItemName_Containers()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Containers(int ArrayIndex, const CType_Base_PNV_ContainerItem& SetValue)
        {
            try
            {
                (*Value())[ItemName_Containers()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Containers()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_PNV_ContainerItem Get_Containers(int ArrayIndex) const
        {
            return (*Value())[ItemName_Containers()][ArrayIndex];
        }
        bool Get_Containers(int ArrayIndex, CType_Base_PNV_ContainerItem& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Containers()))
                {
                    if (((*Value())[ItemName_Containers()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Containers()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_PNV


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_InfoWithOwner
//------------------------------------------------------------------------
class CType_Base_InfoWithOwner : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_InfoWithOwner");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.4");
        return str;
    }
public:
    CType_Base_InfoWithOwner(void)
    {
        try
        {
            Construct_ID();
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_InfoWithOwner(const CType_Base_InfoWithOwner& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_InfoWithOwner(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_InfoWithOwner(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_InfoWithOwner


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Base_ConfigWithOwner
//------------------------------------------------------------------------
class CType_Base_ConfigWithOwner : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_Config(void)
        {
            static std::string str("Config");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Base_ConfigWithOwner");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.5");
        return str;
    }
public:
    CType_Base_ConfigWithOwner(void)
    {
        try
        {
            Construct_ID();
            Construct_Config();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Base_ConfigWithOwner(const CType_Base_ConfigWithOwner& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Base_ConfigWithOwner(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_Config();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Base_ConfigWithOwner(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_Config();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Config (Type: "GInsXmlRpc::XmlRpcValue")
    protected:
        void Construct_Config(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Config()))
                {
                    GInsXmlRpc::XmlRpcValue InitValue = (int)0;
                    (*Value())[ItemName_Config()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Config(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Config()))
                {
                    Construct_Config();
                }
                if ((*Value()).hasMember(ItemName_Config()))
                {
                    GInsXmlRpc::XmlRpcValue InitValue = (int)0;
                    (*Value())[ItemName_Config()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Config(const GInsXmlRpc::XmlRpcValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Config()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpc::XmlRpcValue Get_Config(void) const
        {
            return (*Value())[ItemName_Config()];
        }
        bool Get_Config(GInsXmlRpc::XmlRpcValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Config()]).valid())
                {
                    GetValue = (*Value())[ItemName_Config()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Base_ConfigWithOwner


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Info_ReturnLists
//------------------------------------------------------------------------
class CType_Info_ReturnLists : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_States(void)
        {
            static std::string str("States");
            return str;
        }
    public:
        static std::string const& ItemName_Changes(void)
        {
            static std::string str("Changes");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Info_ReturnLists");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.100");
        return str;
    }
public:
    CType_Info_ReturnLists(void)
    {
        try
        {
            Construct_States();
            Construct_Changes();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Info_ReturnLists(const CType_Info_ReturnLists& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Info_ReturnLists(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_States();
            Construct_Changes();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Info_ReturnLists(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_States();
            Initialize_Changes();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item States (Type: "GInsXmlRpcStdAPI::CGIns_Info_States[0]")
    protected:
        void Construct_States(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_States()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_States InitValue;
                    (*Value())[ItemName_States()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_States(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_States()))
                {
                    Construct_States();
                }
                if ((*Value()).hasMember(ItemName_States()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_States InitValue;
                    (*Value())[ItemName_States()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_States(int NewSize)
        {
            try
            {
                GInsXmlRpcStdAPI::CGIns_Info_States InitValue;
                (*Value())[ItemName_States()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_States(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_States()))
                {
                    return (*Value())[ItemName_States()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_States(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_States()))
                {
                    (*Value())[ItemName_States()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_States(int ArrayIndex, GInsXmlRpcStdAPI::CGIns_Info_States SetValue)
        {
            try
            {
                (*Value())[ItemName_States()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_States(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_States()))
                {
                    (*Value())[ItemName_States()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_States(int ArrayIndex, const GInsXmlRpcStdAPI::CGIns_Info_States& SetValue)
        {
            try
            {
                (*Value())[ItemName_States()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_States()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_States Get_States(int ArrayIndex) const
        {
            return (*Value())[ItemName_States()][ArrayIndex];
        }
        bool Get_States(int ArrayIndex, GInsXmlRpcStdAPI::CGIns_Info_States& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_States()))
                {
                    if (((*Value())[ItemName_States()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_States()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Changes (Type: "GInsXmlRpcStdAPI::CGIns_Info_Notification[0]")
    protected:
        void Construct_Changes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Changes()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Notification InitValue;
                    (*Value())[ItemName_Changes()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Changes(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Changes()))
                {
                    Construct_Changes();
                }
                if ((*Value()).hasMember(ItemName_Changes()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Notification InitValue;
                    (*Value())[ItemName_Changes()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Changes(int NewSize)
        {
            try
            {
                GInsXmlRpcStdAPI::CGIns_Info_Notification InitValue;
                (*Value())[ItemName_Changes()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Changes(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Changes()))
                {
                    return (*Value())[ItemName_Changes()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Changes(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Changes()))
                {
                    (*Value())[ItemName_Changes()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Changes(int ArrayIndex, GInsXmlRpcStdAPI::CGIns_Info_Notification SetValue)
        {
            try
            {
                (*Value())[ItemName_Changes()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Changes(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Changes()))
                {
                    (*Value())[ItemName_Changes()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Changes(int ArrayIndex, const GInsXmlRpcStdAPI::CGIns_Info_Notification& SetValue)
        {
            try
            {
                (*Value())[ItemName_Changes()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Changes()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Notification Get_Changes(int ArrayIndex) const
        {
            return (*Value())[ItemName_Changes()][ArrayIndex];
        }
        bool Get_Changes(int ArrayIndex, GInsXmlRpcStdAPI::CGIns_Info_Notification& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Changes()))
                {
                    if (((*Value())[ItemName_Changes()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Changes()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Info_ReturnLists


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Info_DeviceTypeDetails
//------------------------------------------------------------------------
class CType_Info_DeviceTypeDetails : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_EnabledAdapterCountFieldbusSlaveEthercat(void)
        {
            static std::string str("EnabledAdapterCountFieldbusSlaveEthercat");
            return str;
        }
    public:
        static std::string const& ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP(void)
        {
            static std::string str("EnabledAdapterCountFieldbusSlaveProfibusDP");
            return str;
        }
    public:
        static std::string const& ItemName_EnabledAdapterCountFieldbusSlaveCanOpen(void)
        {
            static std::string str("EnabledAdapterCountFieldbusSlaveCanOpen");
            return str;
        }
    public:
        static std::string const& ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU(void)
        {
            static std::string str("EnabledAdapterCountFieldbusSlaveModbusRTU");
            return str;
        }
    public:
        static std::string const& ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP(void)
        {
            static std::string str("EnabledAdapterCountFieldbusSlaveModbusTCPIP");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Info_DeviceTypeDetails");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.101");
        return str;
    }
public:
    CType_Info_DeviceTypeDetails(void)
    {
        try
        {
            Construct_EnabledAdapterCountFieldbusSlaveEthercat();
            Construct_EnabledAdapterCountFieldbusSlaveProfibusDP();
            Construct_EnabledAdapterCountFieldbusSlaveCanOpen();
            Construct_EnabledAdapterCountFieldbusSlaveModbusRTU();
            Construct_EnabledAdapterCountFieldbusSlaveModbusTCPIP();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Info_DeviceTypeDetails(const CType_Info_DeviceTypeDetails& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Info_DeviceTypeDetails(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_EnabledAdapterCountFieldbusSlaveEthercat();
            Construct_EnabledAdapterCountFieldbusSlaveProfibusDP();
            Construct_EnabledAdapterCountFieldbusSlaveCanOpen();
            Construct_EnabledAdapterCountFieldbusSlaveModbusRTU();
            Construct_EnabledAdapterCountFieldbusSlaveModbusTCPIP();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Info_DeviceTypeDetails(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_EnabledAdapterCountFieldbusSlaveEthercat();
            Initialize_EnabledAdapterCountFieldbusSlaveProfibusDP();
            Initialize_EnabledAdapterCountFieldbusSlaveCanOpen();
            Initialize_EnabledAdapterCountFieldbusSlaveModbusRTU();
            Initialize_EnabledAdapterCountFieldbusSlaveModbusTCPIP();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item EnabledAdapterCountFieldbusSlaveEthercat (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Integer")
    protected:
        void Construct_EnabledAdapterCountFieldbusSlaveEthercat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveEthercat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnabledAdapterCountFieldbusSlaveEthercat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveEthercat()))
                {
                    Construct_EnabledAdapterCountFieldbusSlaveEthercat();
                }
                if ((*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveEthercat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnabledAdapterCountFieldbusSlaveEthercat(const GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Integer Get_EnabledAdapterCountFieldbusSlaveEthercat(void) const
        {
            return (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()];
        }
        bool Get_EnabledAdapterCountFieldbusSlaveEthercat(GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveEthercat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnabledAdapterCountFieldbusSlaveProfibusDP (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Integer")
    protected:
        void Construct_EnabledAdapterCountFieldbusSlaveProfibusDP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnabledAdapterCountFieldbusSlaveProfibusDP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()))
                {
                    Construct_EnabledAdapterCountFieldbusSlaveProfibusDP();
                }
                if ((*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnabledAdapterCountFieldbusSlaveProfibusDP(const GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Integer Get_EnabledAdapterCountFieldbusSlaveProfibusDP(void) const
        {
            return (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()];
        }
        bool Get_EnabledAdapterCountFieldbusSlaveProfibusDP(GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveProfibusDP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnabledAdapterCountFieldbusSlaveCanOpen (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Integer")
    protected:
        void Construct_EnabledAdapterCountFieldbusSlaveCanOpen(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnabledAdapterCountFieldbusSlaveCanOpen(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()))
                {
                    Construct_EnabledAdapterCountFieldbusSlaveCanOpen();
                }
                if ((*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnabledAdapterCountFieldbusSlaveCanOpen(const GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Integer Get_EnabledAdapterCountFieldbusSlaveCanOpen(void) const
        {
            return (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()];
        }
        bool Get_EnabledAdapterCountFieldbusSlaveCanOpen(GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveCanOpen()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnabledAdapterCountFieldbusSlaveModbusRTU (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Integer")
    protected:
        void Construct_EnabledAdapterCountFieldbusSlaveModbusRTU(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnabledAdapterCountFieldbusSlaveModbusRTU(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()))
                {
                    Construct_EnabledAdapterCountFieldbusSlaveModbusRTU();
                }
                if ((*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnabledAdapterCountFieldbusSlaveModbusRTU(const GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Integer Get_EnabledAdapterCountFieldbusSlaveModbusRTU(void) const
        {
            return (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()];
        }
        bool Get_EnabledAdapterCountFieldbusSlaveModbusRTU(GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusRTU()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnabledAdapterCountFieldbusSlaveModbusTCPIP (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Integer")
    protected:
        void Construct_EnabledAdapterCountFieldbusSlaveModbusTCPIP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnabledAdapterCountFieldbusSlaveModbusTCPIP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()))
                {
                    Construct_EnabledAdapterCountFieldbusSlaveModbusTCPIP();
                }
                if ((*Value()).hasMember(ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Integer InitValue;
                    (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnabledAdapterCountFieldbusSlaveModbusTCPIP(const GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Integer Get_EnabledAdapterCountFieldbusSlaveModbusTCPIP(void) const
        {
            return (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()];
        }
        bool Get_EnabledAdapterCountFieldbusSlaveModbusTCPIP(GInsXmlRpcStdAPI::CGIns_Info_Value_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnabledAdapterCountFieldbusSlaveModbusTCPIP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Info_DeviceTypeDetails


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_MultipleParametersCombinedAndSplit
//------------------------------------------------------------------------
class CType_Edit_MultipleParametersCombinedAndSplit : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ActualCombinedValue(void)
        {
            static std::string str("ActualCombinedValue");
            return str;
        }
    public:
        static std::string const& ItemName_Combined(void)
        {
            static std::string str("Combined");
            return str;
        }
    public:
        static std::string const& ItemName_Group(void)
        {
            static std::string str("Group");
            return str;
        }
    public:
        static std::string const& ItemName_Param0(void)
        {
            static std::string str("Param0");
            return str;
        }
    public:
        static std::string const& ItemName_Param1(void)
        {
            static std::string str("Param1");
            return str;
        }
    public:
        static std::string const& ItemName_Param2(void)
        {
            static std::string str("Param2");
            return str;
        }
    public:
        static std::string const& ItemName_Param3(void)
        {
            static std::string str("Param3");
            return str;
        }
    public:
        static std::string const& ItemName_Param4(void)
        {
            static std::string str("Param4");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_MultipleParametersCombinedAndSplit");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.200");
        return str;
    }
public:
    CType_Edit_MultipleParametersCombinedAndSplit(void)
    {
        try
        {
            Construct_ActualCombinedValue();
            Construct_Combined();
            Construct_Group();
            Construct_Param0();
            Construct_Param1();
            Construct_Param2();
            Construct_Param3();
            Construct_Param4();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_MultipleParametersCombinedAndSplit(const CType_Edit_MultipleParametersCombinedAndSplit& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_MultipleParametersCombinedAndSplit(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ActualCombinedValue();
            Construct_Combined();
            Construct_Group();
            Construct_Param0();
            Construct_Param1();
            Construct_Param2();
            Construct_Param3();
            Construct_Param4();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_MultipleParametersCombinedAndSplit(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ActualCombinedValue();
            Initialize_Combined();
            Initialize_Group();
            Initialize_Param0();
            Initialize_Param1();
            Initialize_Param2();
            Initialize_Param3();
            Initialize_Param4();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ActualCombinedValue (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_ActualCombinedValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualCombinedValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ActualCombinedValue()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActualCombinedValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualCombinedValue()))
                {
                    Construct_ActualCombinedValue();
                }
                if ((*Value()).hasMember(ItemName_ActualCombinedValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ActualCombinedValue()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActualCombinedValue(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActualCombinedValue()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_ActualCombinedValue(void) const
        {
            return (*Value())[ItemName_ActualCombinedValue()];
        }
        bool Get_ActualCombinedValue(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActualCombinedValue()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActualCombinedValue()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Combined (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Combined(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Combined()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Combined()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Combined(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Combined()))
                {
                    Construct_Combined();
                }
                if ((*Value()).hasMember(ItemName_Combined()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Combined()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Combined(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Combined()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Combined(void) const
        {
            return (*Value())[ItemName_Combined()];
        }
        bool Get_Combined(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Combined()]).valid())
                {
                    GetValue = (*Value())[ItemName_Combined()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Group (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Group(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Group()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Group()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Group(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Group()))
                {
                    Construct_Group();
                }
                if ((*Value()).hasMember(ItemName_Group()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Group()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Group(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Group()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Group(void) const
        {
            return (*Value())[ItemName_Group()];
        }
        bool Get_Group(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Group()]).valid())
                {
                    GetValue = (*Value())[ItemName_Group()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Param0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Param0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Param0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param0()))
                {
                    Construct_Param0();
                }
                if ((*Value()).hasMember(ItemName_Param0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Param0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Param0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Param0(void) const
        {
            return (*Value())[ItemName_Param0()];
        }
        bool Get_Param0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Param0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Param0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Param1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Param1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Param1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param1()))
                {
                    Construct_Param1();
                }
                if ((*Value()).hasMember(ItemName_Param1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Param1(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Param1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Param1(void) const
        {
            return (*Value())[ItemName_Param1()];
        }
        bool Get_Param1(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Param1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Param1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Param2 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Param2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Param2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param2()))
                {
                    Construct_Param2();
                }
                if ((*Value()).hasMember(ItemName_Param2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Param2(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Param2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Param2(void) const
        {
            return (*Value())[ItemName_Param2()];
        }
        bool Get_Param2(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Param2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Param2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Param3 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Param3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Param3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param3()))
                {
                    Construct_Param3();
                }
                if ((*Value()).hasMember(ItemName_Param3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Param3(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Param3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Param3(void) const
        {
            return (*Value())[ItemName_Param3()];
        }
        bool Get_Param3(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Param3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Param3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Param4 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Param4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Param4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Param4()))
                {
                    Construct_Param4();
                }
                if ((*Value()).hasMember(ItemName_Param4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Param4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Param4(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Param4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Param4(void) const
        {
            return (*Value())[ItemName_Param4()];
        }
        bool Get_Param4(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Param4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Param4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_MultipleParametersCombinedAndSplit


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_VariableAccessRule
//------------------------------------------------------------------------
class CType_Edit_VariableAccessRule : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_AtInternalVariable(void)
        {
            static std::string str("AtInternalVariable");
            return str;
        }
    public:
        static std::string const& ItemName_AtStreamProcessorDataBufferProcess(void)
        {
            static std::string str("AtStreamProcessorDataBufferProcess");
            return str;
        }
    public:
        static std::string const& ItemName_AtPacKernelPort(void)
        {
            static std::string str("AtPacKernelPort");
            return str;
        }
    public:
        static std::string const& ItemName_AtFieldbus(void)
        {
            static std::string str("AtFieldbus");
            return str;
        }
    public:
        static std::string const& ItemName_AtHighspeedTCPIPPort(void)
        {
            static std::string str("AtHighspeedTCPIPPort");
            return str;
        }
    public:
        static std::string const& ItemName_AtHighspeedUDPPort(void)
        {
            static std::string str("AtHighspeedUDPPort");
            return str;
        }
    public:
        static std::string const& ItemName_AtDistributorPort(void)
        {
            static std::string str("AtDistributorPort");
            return str;
        }
    public:
        static std::string const& ItemName_AtDataPort(void)
        {
            static std::string str("AtDataPort");
            return str;
        }
    public:
        static std::string const& ItemName_AtHostRS485Port(void)
        {
            static std::string str("AtHostRS485Port");
            return str;
        }
    public:
        static std::string const& ItemName_AtHostRS232Port(void)
        {
            static std::string str("AtHostRS232Port");
            return str;
        }
    public:
        static std::string const& ItemName_AtTerminal(void)
        {
            static std::string str("AtTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_AtExternalWorker(void)
        {
            static std::string str("AtExternalWorker");
            return str;
        }
    public:
        static std::string const& ItemName_AtCANSlave(void)
        {
            static std::string str("AtCANSlave");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_VariableAccessRule");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.220");
        return str;
    }
public:
    CType_Edit_VariableAccessRule(void)
    {
        try
        {
            Construct_Variable();
            Construct_AtInternalVariable();
            Construct_AtStreamProcessorDataBufferProcess();
            Construct_AtPacKernelPort();
            Construct_AtFieldbus();
            Construct_AtHighspeedTCPIPPort();
            Construct_AtHighspeedUDPPort();
            Construct_AtDistributorPort();
            Construct_AtDataPort();
            Construct_AtHostRS485Port();
            Construct_AtHostRS232Port();
            Construct_AtTerminal();
            Construct_AtExternalWorker();
            Construct_AtCANSlave();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_VariableAccessRule(const CType_Edit_VariableAccessRule& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_VariableAccessRule(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Variable();
            Construct_AtInternalVariable();
            Construct_AtStreamProcessorDataBufferProcess();
            Construct_AtPacKernelPort();
            Construct_AtFieldbus();
            Construct_AtHighspeedTCPIPPort();
            Construct_AtHighspeedUDPPort();
            Construct_AtDistributorPort();
            Construct_AtDataPort();
            Construct_AtHostRS485Port();
            Construct_AtHostRS232Port();
            Construct_AtTerminal();
            Construct_AtExternalWorker();
            Construct_AtCANSlave();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_VariableAccessRule(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Variable();
            Initialize_AtInternalVariable();
            Initialize_AtStreamProcessorDataBufferProcess();
            Initialize_AtPacKernelPort();
            Initialize_AtFieldbus();
            Initialize_AtHighspeedTCPIPPort();
            Initialize_AtHighspeedUDPPort();
            Initialize_AtDistributorPort();
            Initialize_AtDataPort();
            Initialize_AtHostRS485Port();
            Initialize_AtHostRS232Port();
            Initialize_AtTerminal();
            Initialize_AtExternalWorker();
            Initialize_AtCANSlave();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtInternalVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtInternalVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtInternalVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtInternalVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtInternalVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtInternalVariable()))
                {
                    Construct_AtInternalVariable();
                }
                if ((*Value()).hasMember(ItemName_AtInternalVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtInternalVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtInternalVariable(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtInternalVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtInternalVariable(void) const
        {
            return (*Value())[ItemName_AtInternalVariable()];
        }
        bool Get_AtInternalVariable(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtInternalVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtInternalVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtStreamProcessorDataBufferProcess (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtStreamProcessorDataBufferProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtStreamProcessorDataBufferProcess()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtStreamProcessorDataBufferProcess()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtStreamProcessorDataBufferProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtStreamProcessorDataBufferProcess()))
                {
                    Construct_AtStreamProcessorDataBufferProcess();
                }
                if ((*Value()).hasMember(ItemName_AtStreamProcessorDataBufferProcess()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtStreamProcessorDataBufferProcess()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtStreamProcessorDataBufferProcess(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtStreamProcessorDataBufferProcess()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtStreamProcessorDataBufferProcess(void) const
        {
            return (*Value())[ItemName_AtStreamProcessorDataBufferProcess()];
        }
        bool Get_AtStreamProcessorDataBufferProcess(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtStreamProcessorDataBufferProcess()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtStreamProcessorDataBufferProcess()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtPacKernelPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtPacKernelPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtPacKernelPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtPacKernelPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtPacKernelPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtPacKernelPort()))
                {
                    Construct_AtPacKernelPort();
                }
                if ((*Value()).hasMember(ItemName_AtPacKernelPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtPacKernelPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtPacKernelPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtPacKernelPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtPacKernelPort(void) const
        {
            return (*Value())[ItemName_AtPacKernelPort()];
        }
        bool Get_AtPacKernelPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtPacKernelPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtPacKernelPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtFieldbus (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtFieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtFieldbus()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtFieldbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtFieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtFieldbus()))
                {
                    Construct_AtFieldbus();
                }
                if ((*Value()).hasMember(ItemName_AtFieldbus()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtFieldbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtFieldbus(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtFieldbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtFieldbus(void) const
        {
            return (*Value())[ItemName_AtFieldbus()];
        }
        bool Get_AtFieldbus(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtFieldbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtFieldbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtHighspeedTCPIPPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtHighspeedTCPIPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHighspeedTCPIPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHighspeedTCPIPPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtHighspeedTCPIPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHighspeedTCPIPPort()))
                {
                    Construct_AtHighspeedTCPIPPort();
                }
                if ((*Value()).hasMember(ItemName_AtHighspeedTCPIPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHighspeedTCPIPPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtHighspeedTCPIPPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtHighspeedTCPIPPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtHighspeedTCPIPPort(void) const
        {
            return (*Value())[ItemName_AtHighspeedTCPIPPort()];
        }
        bool Get_AtHighspeedTCPIPPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtHighspeedTCPIPPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtHighspeedTCPIPPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtHighspeedUDPPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtHighspeedUDPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHighspeedUDPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHighspeedUDPPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtHighspeedUDPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHighspeedUDPPort()))
                {
                    Construct_AtHighspeedUDPPort();
                }
                if ((*Value()).hasMember(ItemName_AtHighspeedUDPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHighspeedUDPPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtHighspeedUDPPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtHighspeedUDPPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtHighspeedUDPPort(void) const
        {
            return (*Value())[ItemName_AtHighspeedUDPPort()];
        }
        bool Get_AtHighspeedUDPPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtHighspeedUDPPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtHighspeedUDPPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtDistributorPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtDistributorPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtDistributorPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtDistributorPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtDistributorPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtDistributorPort()))
                {
                    Construct_AtDistributorPort();
                }
                if ((*Value()).hasMember(ItemName_AtDistributorPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtDistributorPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtDistributorPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtDistributorPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtDistributorPort(void) const
        {
            return (*Value())[ItemName_AtDistributorPort()];
        }
        bool Get_AtDistributorPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtDistributorPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtDistributorPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtDataPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtDataPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtDataPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtDataPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtDataPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtDataPort()))
                {
                    Construct_AtDataPort();
                }
                if ((*Value()).hasMember(ItemName_AtDataPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtDataPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtDataPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtDataPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtDataPort(void) const
        {
            return (*Value())[ItemName_AtDataPort()];
        }
        bool Get_AtDataPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtDataPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtDataPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtHostRS485Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtHostRS485Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHostRS485Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHostRS485Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtHostRS485Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHostRS485Port()))
                {
                    Construct_AtHostRS485Port();
                }
                if ((*Value()).hasMember(ItemName_AtHostRS485Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHostRS485Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtHostRS485Port(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtHostRS485Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtHostRS485Port(void) const
        {
            return (*Value())[ItemName_AtHostRS485Port()];
        }
        bool Get_AtHostRS485Port(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtHostRS485Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtHostRS485Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtHostRS232Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtHostRS232Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHostRS232Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHostRS232Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtHostRS232Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtHostRS232Port()))
                {
                    Construct_AtHostRS232Port();
                }
                if ((*Value()).hasMember(ItemName_AtHostRS232Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtHostRS232Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtHostRS232Port(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtHostRS232Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtHostRS232Port(void) const
        {
            return (*Value())[ItemName_AtHostRS232Port()];
        }
        bool Get_AtHostRS232Port(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtHostRS232Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtHostRS232Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtTerminal()))
                {
                    Construct_AtTerminal();
                }
                if ((*Value()).hasMember(ItemName_AtTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtTerminal(void) const
        {
            return (*Value())[ItemName_AtTerminal()];
        }
        bool Get_AtTerminal(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtExternalWorker (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtExternalWorker(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtExternalWorker()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtExternalWorker()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtExternalWorker(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtExternalWorker()))
                {
                    Construct_AtExternalWorker();
                }
                if ((*Value()).hasMember(ItemName_AtExternalWorker()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtExternalWorker()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtExternalWorker(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtExternalWorker()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtExternalWorker(void) const
        {
            return (*Value())[ItemName_AtExternalWorker()];
        }
        bool Get_AtExternalWorker(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtExternalWorker()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtExternalWorker()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AtCANSlave (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AtCANSlave(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtCANSlave()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtCANSlave()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AtCANSlave(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AtCANSlave()))
                {
                    Construct_AtCANSlave();
                }
                if ((*Value()).hasMember(ItemName_AtCANSlave()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AtCANSlave()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AtCANSlave(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AtCANSlave()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AtCANSlave(void) const
        {
            return (*Value())[ItemName_AtCANSlave()];
        }
        bool Get_AtCANSlave(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AtCANSlave()]).valid())
                {
                    GetValue = (*Value())[ItemName_AtCANSlave()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_VariableAccessRule


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_VariableAccessRuleList
//------------------------------------------------------------------------
class CType_Edit_VariableAccessRuleList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_VariableAccessRuleList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.221");
        return str;
    }
public:
    CType_Edit_VariableAccessRuleList(void)
    {
        try
        {
            Construct_List();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_VariableAccessRuleList(const CType_Edit_VariableAccessRuleList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_VariableAccessRuleList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_VariableAccessRuleList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CType_Edit_VariableAccessRule[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CType_Edit_VariableAccessRule InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CType_Edit_VariableAccessRule InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CType_Edit_VariableAccessRule InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CType_Edit_VariableAccessRule SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CType_Edit_VariableAccessRule& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_VariableAccessRule Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CType_Edit_VariableAccessRule& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_VariableAccessRuleList


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_CANConfig
//------------------------------------------------------------------------
class CType_Edit_CANConfig : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_Ports(void)
        {
            static std::string str("Ports");
            return str;
        }
    public:
        static std::string const& ItemName_EnableRemoteTransmissionRequest(void)
        {
            static std::string str("EnableRemoteTransmissionRequest");
            return str;
        }
    public:
        static std::string const& ItemName_ActionControlType(void)
        {
            static std::string str("ActionControlType");
            return str;
        }
    public:
        static std::string const& ItemName_CycleTime(void)
        {
            static std::string str("CycleTime");
            return str;
        }
    public:
        static std::string const& ItemName_EnableExtendedID(void)
        {
            static std::string str("EnableExtendedID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_DataByteOrder(void)
        {
            static std::string str("DataByteOrder");
            return str;
        }
    public:
        static std::string const& ItemName_DataFormat(void)
        {
            static std::string str("DataFormat");
            return str;
        }
    public:
        static std::string const& ItemName_DataBitStart(void)
        {
            static std::string str("DataBitStart");
            return str;
        }
    public:
        static std::string const& ItemName_DataBitLength(void)
        {
            static std::string str("DataBitLength");
            return str;
        }
    public:
        static std::string const& ItemName_DataSend(void)
        {
            static std::string str("DataSend");
            return str;
        }
    public:
        static std::string const& ItemName_DataReceive(void)
        {
            static std::string str("DataReceive");
            return str;
        }
    public:
        static std::string const& ItemName_DataFactor(void)
        {
            static std::string str("DataFactor");
            return str;
        }
    public:
        static std::string const& ItemName_DataOffset(void)
        {
            static std::string str("DataOffset");
            return str;
        }
    public:
        static std::string const& ItemName_DataMinimum(void)
        {
            static std::string str("DataMinimum");
            return str;
        }
    public:
        static std::string const& ItemName_DataMaximum(void)
        {
            static std::string str("DataMaximum");
            return str;
        }
    public:
        static std::string const& ItemName_DataUnitName(void)
        {
            static std::string str("DataUnitName");
            return str;
        }
    public:
        static std::string const& ItemName_EnableMultiplexedParameters(void)
        {
            static std::string str("EnableMultiplexedParameters");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedDataBitStart(void)
        {
            static std::string str("MultiplexedDataBitStart");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedDataBitLength(void)
        {
            static std::string str("MultiplexedDataBitLength");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedDataByteOrder(void)
        {
            static std::string str("MultiplexedDataByteOrder");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedValue(void)
        {
            static std::string str("MultiplexedValue");
            return str;
        }
    public:
        static std::string const& ItemName_EnableFD(void)
        {
            static std::string str("EnableFD");
            return str;
        }
    public:
        static std::string const& ItemName_EnableFDBitrateSwitch(void)
        {
            static std::string str("EnableFDBitrateSwitch");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_CANConfig");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.222");
        return str;
    }
public:
    CType_Edit_CANConfig(void)
    {
        try
        {
            Construct_Variable();
            Construct_Ports();
            Construct_EnableRemoteTransmissionRequest();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_EnableExtendedID();
            Construct_ID();
            Construct_DataByteOrder();
            Construct_DataFormat();
            Construct_DataBitStart();
            Construct_DataBitLength();
            Construct_DataSend();
            Construct_DataReceive();
            Construct_DataFactor();
            Construct_DataOffset();
            Construct_DataMinimum();
            Construct_DataMaximum();
            Construct_DataUnitName();
            Construct_EnableMultiplexedParameters();
            Construct_MultiplexedDataBitStart();
            Construct_MultiplexedDataBitLength();
            Construct_MultiplexedDataByteOrder();
            Construct_MultiplexedValue();
            Construct_EnableFD();
            Construct_EnableFDBitrateSwitch();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_CANConfig(const CType_Edit_CANConfig& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_CANConfig(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Variable();
            Construct_Ports();
            Construct_EnableRemoteTransmissionRequest();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_EnableExtendedID();
            Construct_ID();
            Construct_DataByteOrder();
            Construct_DataFormat();
            Construct_DataBitStart();
            Construct_DataBitLength();
            Construct_DataSend();
            Construct_DataReceive();
            Construct_DataFactor();
            Construct_DataOffset();
            Construct_DataMinimum();
            Construct_DataMaximum();
            Construct_DataUnitName();
            Construct_EnableMultiplexedParameters();
            Construct_MultiplexedDataBitStart();
            Construct_MultiplexedDataBitLength();
            Construct_MultiplexedDataByteOrder();
            Construct_MultiplexedValue();
            Construct_EnableFD();
            Construct_EnableFDBitrateSwitch();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_CANConfig(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Variable();
            Initialize_Ports();
            Initialize_EnableRemoteTransmissionRequest();
            Initialize_ActionControlType();
            Initialize_CycleTime();
            Initialize_EnableExtendedID();
            Initialize_ID();
            Initialize_DataByteOrder();
            Initialize_DataFormat();
            Initialize_DataBitStart();
            Initialize_DataBitLength();
            Initialize_DataSend();
            Initialize_DataReceive();
            Initialize_DataFactor();
            Initialize_DataOffset();
            Initialize_DataMinimum();
            Initialize_DataMaximum();
            Initialize_DataUnitName();
            Initialize_EnableMultiplexedParameters();
            Initialize_MultiplexedDataBitStart();
            Initialize_MultiplexedDataBitLength();
            Initialize_MultiplexedDataByteOrder();
            Initialize_MultiplexedValue();
            Initialize_EnableFD();
            Initialize_EnableFDBitrateSwitch();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Ports (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_Ports(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ports()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Ports()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Ports(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ports()))
                {
                    Construct_Ports();
                }
                if ((*Value()).hasMember(ItemName_Ports()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_Ports()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Ports(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Ports()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_Ports(void) const
        {
            return (*Value())[ItemName_Ports()];
        }
        bool Get_Ports(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Ports()]).valid())
                {
                    GetValue = (*Value())[ItemName_Ports()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableRemoteTransmissionRequest (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableRemoteTransmissionRequest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRemoteTransmissionRequest()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableRemoteTransmissionRequest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    Construct_EnableRemoteTransmissionRequest();
                }
                if ((*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRemoteTransmissionRequest()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableRemoteTransmissionRequest(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableRemoteTransmissionRequest()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableRemoteTransmissionRequest(void) const
        {
            return (*Value())[ItemName_EnableRemoteTransmissionRequest()];
        }
        bool Get_EnableRemoteTransmissionRequest(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableRemoteTransmissionRequest()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableRemoteTransmissionRequest()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ActionControlType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    Construct_ActionControlType();
                }
                if ((*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActionControlType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActionControlType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ActionControlType(void) const
        {
            return (*Value())[ItemName_ActionControlType()];
        }
        bool Get_ActionControlType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActionControlType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActionControlType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    Construct_CycleTime();
                }
                if ((*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_CycleTime(void) const
        {
            return (*Value())[ItemName_CycleTime()];
        }
        bool Get_CycleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableExtendedID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableExtendedID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableExtendedID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableExtendedID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableExtendedID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableExtendedID()))
                {
                    Construct_EnableExtendedID();
                }
                if ((*Value()).hasMember(ItemName_EnableExtendedID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableExtendedID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableExtendedID(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableExtendedID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableExtendedID(void) const
        {
            return (*Value())[ItemName_EnableExtendedID()];
        }
        bool Get_EnableExtendedID(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableExtendedID()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableExtendedID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataByteOrder (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataByteOrder()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataByteOrder()))
                {
                    Construct_DataByteOrder();
                }
                if ((*Value()).hasMember(ItemName_DataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataByteOrder()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataByteOrder(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataByteOrder()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DataByteOrder(void) const
        {
            return (*Value())[ItemName_DataByteOrder()];
        }
        bool Get_DataByteOrder(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataByteOrder()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataByteOrder()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_DataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_DataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFormat()))
                {
                    Construct_DataFormat();
                }
                if ((*Value()).hasMember(ItemName_DataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_DataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_DataFormat(void) const
        {
            return (*Value())[ItemName_DataFormat()];
        }
        bool Get_DataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataBitStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_DataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DataBitStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBitStart()))
                {
                    Construct_DataBitStart();
                }
                if ((*Value()).hasMember(ItemName_DataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DataBitStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataBitStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataBitStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_DataBitStart(void) const
        {
            return (*Value())[ItemName_DataBitStart()];
        }
        bool Get_DataBitStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataBitStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataBitStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_DataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBitLength()))
                {
                    Construct_DataBitLength();
                }
                if ((*Value()).hasMember(ItemName_DataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_DataBitLength(void) const
        {
            return (*Value())[ItemName_DataBitLength()];
        }
        bool Get_DataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataSend (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DataSend(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataSend()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DataSend()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataSend(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataSend()))
                {
                    Construct_DataSend();
                }
                if ((*Value()).hasMember(ItemName_DataSend()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DataSend()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataSend(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataSend()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DataSend(void) const
        {
            return (*Value())[ItemName_DataSend()];
        }
        bool Get_DataSend(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataSend()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataSend()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataReceive (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DataReceive(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataReceive()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DataReceive()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataReceive(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataReceive()))
                {
                    Construct_DataReceive();
                }
                if ((*Value()).hasMember(ItemName_DataReceive()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DataReceive()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataReceive(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataReceive()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DataReceive(void) const
        {
            return (*Value())[ItemName_DataReceive()];
        }
        bool Get_DataReceive(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataReceive()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataReceive()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataFactor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataFactor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFactor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataFactor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataFactor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFactor()))
                {
                    Construct_DataFactor();
                }
                if ((*Value()).hasMember(ItemName_DataFactor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataFactor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataFactor(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataFactor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataFactor(void) const
        {
            return (*Value())[ItemName_DataFactor()];
        }
        bool Get_DataFactor(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataFactor()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataFactor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataOffset()))
                {
                    Construct_DataOffset();
                }
                if ((*Value()).hasMember(ItemName_DataOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataOffset(void) const
        {
            return (*Value())[ItemName_DataOffset()];
        }
        bool Get_DataOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataMinimum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataMinimum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataMinimum()))
                {
                    Construct_DataMinimum();
                }
                if ((*Value()).hasMember(ItemName_DataMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataMinimum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataMinimum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataMinimum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataMinimum(void) const
        {
            return (*Value())[ItemName_DataMinimum()];
        }
        bool Get_DataMinimum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataMinimum()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataMinimum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataMaximum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataMaximum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataMaximum()))
                {
                    Construct_DataMaximum();
                }
                if ((*Value()).hasMember(ItemName_DataMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataMaximum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataMaximum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataMaximum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataMaximum(void) const
        {
            return (*Value())[ItemName_DataMaximum()];
        }
        bool Get_DataMaximum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataMaximum()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataMaximum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataUnitName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_DataUnitName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataUnitName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DataUnitName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataUnitName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataUnitName()))
                {
                    Construct_DataUnitName();
                }
                if ((*Value()).hasMember(ItemName_DataUnitName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DataUnitName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataUnitName(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataUnitName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_DataUnitName(void) const
        {
            return (*Value())[ItemName_DataUnitName()];
        }
        bool Get_DataUnitName(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataUnitName()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataUnitName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableMultiplexedParameters (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableMultiplexedParameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableMultiplexedParameters()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableMultiplexedParameters()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableMultiplexedParameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableMultiplexedParameters()))
                {
                    Construct_EnableMultiplexedParameters();
                }
                if ((*Value()).hasMember(ItemName_EnableMultiplexedParameters()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableMultiplexedParameters()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableMultiplexedParameters(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableMultiplexedParameters()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableMultiplexedParameters(void) const
        {
            return (*Value())[ItemName_EnableMultiplexedParameters()];
        }
        bool Get_EnableMultiplexedParameters(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableMultiplexedParameters()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableMultiplexedParameters()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedDataBitStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedDataBitStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataBitStart()))
                {
                    Construct_MultiplexedDataBitStart();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedDataBitStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedDataBitStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedDataBitStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedDataBitStart(void) const
        {
            return (*Value())[ItemName_MultiplexedDataBitStart()];
        }
        bool Get_MultiplexedDataBitStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedDataBitStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedDataBitStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedDataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedDataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataBitLength()))
                {
                    Construct_MultiplexedDataBitLength();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedDataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedDataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedDataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedDataBitLength(void) const
        {
            return (*Value())[ItemName_MultiplexedDataBitLength()];
        }
        bool Get_MultiplexedDataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedDataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedDataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedDataByteOrder (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_MultiplexedDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MultiplexedDataByteOrder()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedDataByteOrder()))
                {
                    Construct_MultiplexedDataByteOrder();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MultiplexedDataByteOrder()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedDataByteOrder(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedDataByteOrder()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_MultiplexedDataByteOrder(void) const
        {
            return (*Value())[ItemName_MultiplexedDataByteOrder()];
        }
        bool Get_MultiplexedDataByteOrder(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedDataByteOrder()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedDataByteOrder()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedValue (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedValue()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedValue()))
                {
                    Construct_MultiplexedValue();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedValue()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedValue(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedValue()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedValue(void) const
        {
            return (*Value())[ItemName_MultiplexedValue()];
        }
        bool Get_MultiplexedValue(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedValue()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedValue()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableFD (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableFD(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFD()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFD()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableFD(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFD()))
                {
                    Construct_EnableFD();
                }
                if ((*Value()).hasMember(ItemName_EnableFD()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFD()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableFD(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableFD()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableFD(void) const
        {
            return (*Value())[ItemName_EnableFD()];
        }
        bool Get_EnableFD(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableFD()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableFD()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableFDBitrateSwitch (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableFDBitrateSwitch(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFDBitrateSwitch()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableFDBitrateSwitch(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    Construct_EnableFDBitrateSwitch();
                }
                if ((*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFDBitrateSwitch()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableFDBitrateSwitch(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableFDBitrateSwitch()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableFDBitrateSwitch(void) const
        {
            return (*Value())[ItemName_EnableFDBitrateSwitch()];
        }
        bool Get_EnableFDBitrateSwitch(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableFDBitrateSwitch()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableFDBitrateSwitch()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_CANConfig


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_CANConfigList
//------------------------------------------------------------------------
class CType_Edit_CANConfigList : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_List(void)
        {
            static std::string str("List");
            return str;
        }
    public:
        static std::string const& ItemName_MinCount(void)
        {
            static std::string str("MinCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaxCount(void)
        {
            static std::string str("MaxCount");
            return str;
        }
    public:
        static std::string const& ItemName_StartIndex(void)
        {
            static std::string str("StartIndex");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_Hint(void)
        {
            static std::string str("Hint");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_CANConfigList");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.223");
        return str;
    }
public:
    CType_Edit_CANConfigList(void)
    {
        try
        {
            Construct_List();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_CANConfigList(const CType_Edit_CANConfigList& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_CANConfigList(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_List();
            Construct_MinCount();
            Construct_MaxCount();
            Construct_StartIndex();
            Construct_Length();
            Construct_Command();
            Construct_Hint();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_CANConfigList(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_List();
            Initialize_MinCount();
            Initialize_MaxCount();
            Initialize_StartIndex();
            Initialize_Length();
            Initialize_Command();
            Initialize_Hint();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item List (Type: "CType_Edit_CANConfig[0]")
    protected:
        void Construct_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    CType_Edit_CANConfig InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_List()))
                {
                    Construct_List();
                }
                if ((*Value()).hasMember(ItemName_List()))
                {
                    CType_Edit_CANConfig InitValue;
                    (*Value())[ItemName_List()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_List(int NewSize)
        {
            try
            {
                CType_Edit_CANConfig InitValue;
                (*Value())[ItemName_List()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_List(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    return (*Value())[ItemName_List()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_List(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_List(int ArrayIndex, CType_Edit_CANConfig SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_List(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    (*Value())[ItemName_List()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_List(int ArrayIndex, const CType_Edit_CANConfig& SetValue)
        {
            try
            {
                (*Value())[ItemName_List()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_List()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_CANConfig Get_List(int ArrayIndex) const
        {
            return (*Value())[ItemName_List()][ArrayIndex];
        }
        bool Get_List(int ArrayIndex, CType_Edit_CANConfig& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_List()))
                {
                    if (((*Value())[ItemName_List()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_List()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MinCount (Type: "int32_t")
protected:
    void Construct_MinCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MinCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MinCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MinCount()))
                {
                    Construct_MinCount();
                }
                if ((*Value()).hasMember(ItemName_MinCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MinCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MinCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MinCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MinCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MinCount()];
            return (int32_t)GetValue;
        }
        bool Get_MinCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MinCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MinCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item MaxCount (Type: "int32_t")
protected:
    void Construct_MaxCount(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_MaxCount()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_MaxCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaxCount()))
                {
                    Construct_MaxCount();
                }
                if ((*Value()).hasMember(ItemName_MaxCount()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_MaxCount()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaxCount(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_MaxCount()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_MaxCount(void) const
        {
            int32_t GetValue = (*Value())[ItemName_MaxCount()];
            return (int32_t)GetValue;
        }
        bool Get_MaxCount(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaxCount()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_MaxCount()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartIndex (Type: "int32_t")
protected:
    void Construct_StartIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartIndex()))
                {
                    Construct_StartIndex();
                }
                if ((*Value()).hasMember(ItemName_StartIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item Length (Type: "int32_t")
protected:
    void Construct_Length(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Length()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_Length()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_Length(void) const
        {
            int32_t GetValue = (*Value())[ItemName_Length()];
            return (int32_t)GetValue;
        }
        bool Get_Length(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_Length()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hint (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hint()))
                {
                    Construct_Hint();
                }
                if ((*Value()).hasMember(ItemName_Hint()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_Hint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hint(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Hint(void) const
        {
            return (*Value())[ItemName_Hint()];
        }
        bool Get_Hint(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hint()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_CANConfigList


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Edit_TraceOutputTheme
//------------------------------------------------------------------------
class CType_Edit_TraceOutputTheme : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DRCBaseMessages(void)
        {
            static std::string str("DRCBaseMessages");
            return str;
        }
    public:
        static std::string const& ItemName_DRCInfoMessages(void)
        {
            static std::string str("DRCInfoMessages");
            return str;
        }
    public:
        static std::string const& ItemName_RPCAPICallMessages(void)
        {
            static std::string str("RPCAPICallMessages");
            return str;
        }
    public:
        static std::string const& ItemName_RPCAPIResultMessages(void)
        {
            static std::string str("RPCAPIResultMessages");
            return str;
        }
    public:
        static std::string const& ItemName_RPCAPIInfoMessages(void)
        {
            static std::string str("RPCAPIInfoMessages");
            return str;
        }
    public:
        static std::string const& ItemName_CommunicationMessages(void)
        {
            static std::string str("CommunicationMessages");
            return str;
        }
    public:
        static std::string const& ItemName_CommonMessages(void)
        {
            static std::string str("CommonMessages");
            return str;
        }
    public:
        static std::string const& ItemName_SpecialMessages(void)
        {
            static std::string str("SpecialMessages");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEdit(void)
        {
            static std::string str("EnableEdit");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Edit_TraceOutputTheme");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.224");
        return str;
    }
public:
    CType_Edit_TraceOutputTheme(void)
    {
        try
        {
            Construct_DRCBaseMessages();
            Construct_DRCInfoMessages();
            Construct_RPCAPICallMessages();
            Construct_RPCAPIResultMessages();
            Construct_RPCAPIInfoMessages();
            Construct_CommunicationMessages();
            Construct_CommonMessages();
            Construct_SpecialMessages();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Edit_TraceOutputTheme(const CType_Edit_TraceOutputTheme& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Edit_TraceOutputTheme(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DRCBaseMessages();
            Construct_DRCInfoMessages();
            Construct_RPCAPICallMessages();
            Construct_RPCAPIResultMessages();
            Construct_RPCAPIInfoMessages();
            Construct_CommunicationMessages();
            Construct_CommonMessages();
            Construct_SpecialMessages();
            Construct_EnableEdit();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Edit_TraceOutputTheme(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DRCBaseMessages();
            Initialize_DRCInfoMessages();
            Initialize_RPCAPICallMessages();
            Initialize_RPCAPIResultMessages();
            Initialize_RPCAPIInfoMessages();
            Initialize_CommunicationMessages();
            Initialize_CommonMessages();
            Initialize_SpecialMessages();
            Initialize_EnableEdit();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DRCBaseMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DRCBaseMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DRCBaseMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DRCBaseMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DRCBaseMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DRCBaseMessages()))
                {
                    Construct_DRCBaseMessages();
                }
                if ((*Value()).hasMember(ItemName_DRCBaseMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DRCBaseMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DRCBaseMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DRCBaseMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DRCBaseMessages(void) const
        {
            return (*Value())[ItemName_DRCBaseMessages()];
        }
        bool Get_DRCBaseMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DRCBaseMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_DRCBaseMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DRCInfoMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DRCInfoMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DRCInfoMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DRCInfoMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DRCInfoMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DRCInfoMessages()))
                {
                    Construct_DRCInfoMessages();
                }
                if ((*Value()).hasMember(ItemName_DRCInfoMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DRCInfoMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DRCInfoMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DRCInfoMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DRCInfoMessages(void) const
        {
            return (*Value())[ItemName_DRCInfoMessages()];
        }
        bool Get_DRCInfoMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DRCInfoMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_DRCInfoMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RPCAPICallMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_RPCAPICallMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPICallMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPICallMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RPCAPICallMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPICallMessages()))
                {
                    Construct_RPCAPICallMessages();
                }
                if ((*Value()).hasMember(ItemName_RPCAPICallMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPICallMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RPCAPICallMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_RPCAPICallMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_RPCAPICallMessages(void) const
        {
            return (*Value())[ItemName_RPCAPICallMessages()];
        }
        bool Get_RPCAPICallMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RPCAPICallMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_RPCAPICallMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RPCAPIResultMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_RPCAPIResultMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPIResultMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPIResultMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RPCAPIResultMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPIResultMessages()))
                {
                    Construct_RPCAPIResultMessages();
                }
                if ((*Value()).hasMember(ItemName_RPCAPIResultMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPIResultMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RPCAPIResultMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_RPCAPIResultMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_RPCAPIResultMessages(void) const
        {
            return (*Value())[ItemName_RPCAPIResultMessages()];
        }
        bool Get_RPCAPIResultMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RPCAPIResultMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_RPCAPIResultMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RPCAPIInfoMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_RPCAPIInfoMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPIInfoMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPIInfoMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RPCAPIInfoMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RPCAPIInfoMessages()))
                {
                    Construct_RPCAPIInfoMessages();
                }
                if ((*Value()).hasMember(ItemName_RPCAPIInfoMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_RPCAPIInfoMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RPCAPIInfoMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_RPCAPIInfoMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_RPCAPIInfoMessages(void) const
        {
            return (*Value())[ItemName_RPCAPIInfoMessages()];
        }
        bool Get_RPCAPIInfoMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RPCAPIInfoMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_RPCAPIInfoMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CommunicationMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_CommunicationMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommunicationMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_CommunicationMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CommunicationMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommunicationMessages()))
                {
                    Construct_CommunicationMessages();
                }
                if ((*Value()).hasMember(ItemName_CommunicationMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_CommunicationMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CommunicationMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_CommunicationMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_CommunicationMessages(void) const
        {
            return (*Value())[ItemName_CommunicationMessages()];
        }
        bool Get_CommunicationMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CommunicationMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_CommunicationMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CommonMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_CommonMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommonMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_CommonMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CommonMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommonMessages()))
                {
                    Construct_CommonMessages();
                }
                if ((*Value()).hasMember(ItemName_CommonMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_CommonMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CommonMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_CommonMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_CommonMessages(void) const
        {
            return (*Value())[ItemName_CommonMessages()];
        }
        bool Get_CommonMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CommonMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_CommonMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SpecialMessages (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_SpecialMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SpecialMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_SpecialMessages()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SpecialMessages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SpecialMessages()))
                {
                    Construct_SpecialMessages();
                }
                if ((*Value()).hasMember(ItemName_SpecialMessages()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_SpecialMessages()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SpecialMessages(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SpecialMessages()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_SpecialMessages(void) const
        {
            return (*Value())[ItemName_SpecialMessages()];
        }
        bool Get_SpecialMessages(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SpecialMessages()]).valid())
                {
                    GetValue = (*Value())[ItemName_SpecialMessages()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEdit (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEdit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEdit()))
                {
                    Construct_EnableEdit();
                }
                if ((*Value()).hasMember(ItemName_EnableEdit()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue = GInsXmlRpc::XmlRpcValue();
                    (*Value())[ItemName_EnableEdit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEdit(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEdit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_EnableEdit(void) const
        {
            return (*Value())[ItemName_EnableEdit()];
        }
        bool Get_EnableEdit(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEdit()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEdit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Edit_TraceOutputTheme


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Dataport
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Dataport : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Dataport");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10000");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Dataport(void)
    {
        try
        {
            Construct_Port();
            Construct_Protocol();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Dataport(const CType_Config_Universal_Adapter_Dataport& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Dataport(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Protocol();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Dataport(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Protocol();
            Initialize_WatchdogTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Dataport


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Network_Ethernet
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Network_Ethernet : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StaticDNSAddresses(void)
        {
            static std::string str("StaticDNSAddresses");
            return str;
        }
    public:
        static std::string const& ItemName_HostName(void)
        {
            static std::string str("HostName");
            return str;
        }
    public:
        static std::string const& ItemName_GatewayAddress(void)
        {
            static std::string str("GatewayAddress");
            return str;
        }
    public:
        static std::string const& ItemName_StaticIPAddress(void)
        {
            static std::string str("StaticIPAddress");
            return str;
        }
    public:
        static std::string const& ItemName_StaticSubnetMask(void)
        {
            static std::string str("StaticSubnetMask");
            return str;
        }
    public:
        static std::string const& ItemName_SocketRetransmissionTimeout(void)
        {
            static std::string str("SocketRetransmissionTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_EnableDHCPServer(void)
        {
            static std::string str("EnableDHCPServer");
            return str;
        }
    public:
        static std::string const& ItemName_EnableLocationAsHostName(void)
        {
            static std::string str("EnableLocationAsHostName");
            return str;
        }
    public:
        static std::string const& ItemName_EnableDefaultSocketRetransmissionTimeout(void)
        {
            static std::string str("EnableDefaultSocketRetransmissionTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Network_Ethernet");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10001");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Network_Ethernet(void)
    {
        try
        {
            Construct_StaticDNSAddresses();
            Construct_HostName();
            Construct_GatewayAddress();
            Construct_StaticIPAddress();
            Construct_StaticSubnetMask();
            Construct_SocketRetransmissionTimeout();
            Construct_EnableDHCPServer();
            Construct_EnableLocationAsHostName();
            Construct_EnableDefaultSocketRetransmissionTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Network_Ethernet(const CType_Config_Universal_Adapter_Network_Ethernet& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Network_Ethernet(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StaticDNSAddresses();
            Construct_HostName();
            Construct_GatewayAddress();
            Construct_StaticIPAddress();
            Construct_StaticSubnetMask();
            Construct_SocketRetransmissionTimeout();
            Construct_EnableDHCPServer();
            Construct_EnableLocationAsHostName();
            Construct_EnableDefaultSocketRetransmissionTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Network_Ethernet(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StaticDNSAddresses();
            Initialize_HostName();
            Initialize_GatewayAddress();
            Initialize_StaticIPAddress();
            Initialize_StaticSubnetMask();
            Initialize_SocketRetransmissionTimeout();
            Initialize_EnableDHCPServer();
            Initialize_EnableLocationAsHostName();
            Initialize_EnableDefaultSocketRetransmissionTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StaticDNSAddresses (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_StaticDNSAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_StaticDNSAddresses()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticDNSAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    Construct_StaticDNSAddresses();
                }
                if ((*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_StaticDNSAddresses()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticDNSAddresses(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticDNSAddresses()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_StaticDNSAddresses(void) const
        {
            return (*Value())[ItemName_StaticDNSAddresses()];
        }
        bool Get_StaticDNSAddresses(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticDNSAddresses()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticDNSAddresses()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HostName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_HostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HostName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostName()))
                {
                    Construct_HostName();
                }
                if ((*Value()).hasMember(ItemName_HostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HostName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HostName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_HostName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_HostName(void) const
        {
            return (*Value())[ItemName_HostName()];
        }
        bool Get_HostName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HostName()]).valid())
                {
                    GetValue = (*Value())[ItemName_HostName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item GatewayAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_GatewayAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    Construct_GatewayAddress();
                }
                if ((*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_GatewayAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_GatewayAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_GatewayAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_GatewayAddress(void) const
        {
            return (*Value())[ItemName_GatewayAddress()];
        }
        bool Get_GatewayAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_GatewayAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_GatewayAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StaticIPAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_StaticIPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticIPAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticIPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    Construct_StaticIPAddress();
                }
                if ((*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticIPAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticIPAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticIPAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_StaticIPAddress(void) const
        {
            return (*Value())[ItemName_StaticIPAddress()];
        }
        bool Get_StaticIPAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticIPAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticIPAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StaticSubnetMask (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_StaticSubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticSubnetMask()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticSubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    Construct_StaticSubnetMask();
                }
                if ((*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticSubnetMask()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticSubnetMask(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticSubnetMask()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_StaticSubnetMask(void) const
        {
            return (*Value())[ItemName_StaticSubnetMask()];
        }
        bool Get_StaticSubnetMask(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticSubnetMask()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticSubnetMask()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SocketRetransmissionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SocketRetransmissionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    Construct_SocketRetransmissionTimeout();
                }
                if ((*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SocketRetransmissionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SocketRetransmissionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SocketRetransmissionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SocketRetransmissionTimeout(void) const
        {
            return (*Value())[ItemName_SocketRetransmissionTimeout()];
        }
        bool Get_SocketRetransmissionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SocketRetransmissionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_SocketRetransmissionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableDHCPServer (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableDHCPServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDHCPServer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableDHCPServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    Construct_EnableDHCPServer();
                }
                if ((*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDHCPServer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableDHCPServer(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableDHCPServer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableDHCPServer(void) const
        {
            return (*Value())[ItemName_EnableDHCPServer()];
        }
        bool Get_EnableDHCPServer(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableDHCPServer()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableDHCPServer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableLocationAsHostName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableLocationAsHostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableLocationAsHostName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableLocationAsHostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    Construct_EnableLocationAsHostName();
                }
                if ((*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableLocationAsHostName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableLocationAsHostName(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableLocationAsHostName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableLocationAsHostName(void) const
        {
            return (*Value())[ItemName_EnableLocationAsHostName()];
        }
        bool Get_EnableLocationAsHostName(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableLocationAsHostName()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableLocationAsHostName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableDefaultSocketRetransmissionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableDefaultSocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableDefaultSocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    Construct_EnableDefaultSocketRetransmissionTimeout();
                }
                if ((*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableDefaultSocketRetransmissionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableDefaultSocketRetransmissionTimeout(void) const
        {
            return (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()];
        }
        bool Get_EnableDefaultSocketRetransmissionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Network_Ethernet


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Network_WLAN
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Network_WLAN : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StaticDNSAddresses(void)
        {
            static std::string str("StaticDNSAddresses");
            return str;
        }
    public:
        static std::string const& ItemName_HostName(void)
        {
            static std::string str("HostName");
            return str;
        }
    public:
        static std::string const& ItemName_GatewayAddress(void)
        {
            static std::string str("GatewayAddress");
            return str;
        }
    public:
        static std::string const& ItemName_StaticIPAddress(void)
        {
            static std::string str("StaticIPAddress");
            return str;
        }
    public:
        static std::string const& ItemName_StaticSubnetMask(void)
        {
            static std::string str("StaticSubnetMask");
            return str;
        }
    public:
        static std::string const& ItemName_SocketRetransmissionTimeout(void)
        {
            static std::string str("SocketRetransmissionTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_EnableDHCPServer(void)
        {
            static std::string str("EnableDHCPServer");
            return str;
        }
    public:
        static std::string const& ItemName_EnableLocationAsHostName(void)
        {
            static std::string str("EnableLocationAsHostName");
            return str;
        }
    public:
        static std::string const& ItemName_EnableDefaultSocketRetransmissionTimeout(void)
        {
            static std::string str("EnableDefaultSocketRetransmissionTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Network_WLAN");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10002");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Network_WLAN(void)
    {
        try
        {
            Construct_StaticDNSAddresses();
            Construct_HostName();
            Construct_GatewayAddress();
            Construct_StaticIPAddress();
            Construct_StaticSubnetMask();
            Construct_SocketRetransmissionTimeout();
            Construct_EnableDHCPServer();
            Construct_EnableLocationAsHostName();
            Construct_EnableDefaultSocketRetransmissionTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Network_WLAN(const CType_Config_Universal_Adapter_Network_WLAN& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Network_WLAN(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StaticDNSAddresses();
            Construct_HostName();
            Construct_GatewayAddress();
            Construct_StaticIPAddress();
            Construct_StaticSubnetMask();
            Construct_SocketRetransmissionTimeout();
            Construct_EnableDHCPServer();
            Construct_EnableLocationAsHostName();
            Construct_EnableDefaultSocketRetransmissionTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Network_WLAN(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StaticDNSAddresses();
            Initialize_HostName();
            Initialize_GatewayAddress();
            Initialize_StaticIPAddress();
            Initialize_StaticSubnetMask();
            Initialize_SocketRetransmissionTimeout();
            Initialize_EnableDHCPServer();
            Initialize_EnableLocationAsHostName();
            Initialize_EnableDefaultSocketRetransmissionTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StaticDNSAddresses (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_StaticDNSAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_StaticDNSAddresses()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticDNSAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    Construct_StaticDNSAddresses();
                }
                if ((*Value()).hasMember(ItemName_StaticDNSAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_StaticDNSAddresses()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticDNSAddresses(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticDNSAddresses()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_StaticDNSAddresses(void) const
        {
            return (*Value())[ItemName_StaticDNSAddresses()];
        }
        bool Get_StaticDNSAddresses(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticDNSAddresses()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticDNSAddresses()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HostName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_HostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HostName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostName()))
                {
                    Construct_HostName();
                }
                if ((*Value()).hasMember(ItemName_HostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HostName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HostName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_HostName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_HostName(void) const
        {
            return (*Value())[ItemName_HostName()];
        }
        bool Get_HostName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HostName()]).valid())
                {
                    GetValue = (*Value())[ItemName_HostName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item GatewayAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_GatewayAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_GatewayAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    Construct_GatewayAddress();
                }
                if ((*Value()).hasMember(ItemName_GatewayAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_GatewayAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_GatewayAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_GatewayAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_GatewayAddress(void) const
        {
            return (*Value())[ItemName_GatewayAddress()];
        }
        bool Get_GatewayAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_GatewayAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_GatewayAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StaticIPAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_StaticIPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticIPAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticIPAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    Construct_StaticIPAddress();
                }
                if ((*Value()).hasMember(ItemName_StaticIPAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticIPAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticIPAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticIPAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_StaticIPAddress(void) const
        {
            return (*Value())[ItemName_StaticIPAddress()];
        }
        bool Get_StaticIPAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticIPAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticIPAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StaticSubnetMask (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_StaticSubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticSubnetMask()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StaticSubnetMask(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    Construct_StaticSubnetMask();
                }
                if ((*Value()).hasMember(ItemName_StaticSubnetMask()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_StaticSubnetMask()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StaticSubnetMask(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_StaticSubnetMask()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_StaticSubnetMask(void) const
        {
            return (*Value())[ItemName_StaticSubnetMask()];
        }
        bool Get_StaticSubnetMask(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StaticSubnetMask()]).valid())
                {
                    GetValue = (*Value())[ItemName_StaticSubnetMask()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SocketRetransmissionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SocketRetransmissionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    Construct_SocketRetransmissionTimeout();
                }
                if ((*Value()).hasMember(ItemName_SocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SocketRetransmissionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SocketRetransmissionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SocketRetransmissionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SocketRetransmissionTimeout(void) const
        {
            return (*Value())[ItemName_SocketRetransmissionTimeout()];
        }
        bool Get_SocketRetransmissionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SocketRetransmissionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_SocketRetransmissionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableDHCPServer (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableDHCPServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDHCPServer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableDHCPServer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    Construct_EnableDHCPServer();
                }
                if ((*Value()).hasMember(ItemName_EnableDHCPServer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDHCPServer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableDHCPServer(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableDHCPServer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableDHCPServer(void) const
        {
            return (*Value())[ItemName_EnableDHCPServer()];
        }
        bool Get_EnableDHCPServer(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableDHCPServer()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableDHCPServer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableLocationAsHostName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableLocationAsHostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableLocationAsHostName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableLocationAsHostName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    Construct_EnableLocationAsHostName();
                }
                if ((*Value()).hasMember(ItemName_EnableLocationAsHostName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableLocationAsHostName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableLocationAsHostName(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableLocationAsHostName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableLocationAsHostName(void) const
        {
            return (*Value())[ItemName_EnableLocationAsHostName()];
        }
        bool Get_EnableLocationAsHostName(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableLocationAsHostName()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableLocationAsHostName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableDefaultSocketRetransmissionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableDefaultSocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableDefaultSocketRetransmissionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    Construct_EnableDefaultSocketRetransmissionTimeout();
                }
                if ((*Value()).hasMember(ItemName_EnableDefaultSocketRetransmissionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableDefaultSocketRetransmissionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableDefaultSocketRetransmissionTimeout(void) const
        {
            return (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()];
        }
        bool Get_EnableDefaultSocketRetransmissionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableDefaultSocketRetransmissionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Network_WLAN


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Network_Client_IoT
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Network_Client_IoT : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OrganisationID(void)
        {
            static std::string str("OrganisationID");
            return str;
        }
    public:
        static std::string const& ItemName_TypeID(void)
        {
            static std::string str("TypeID");
            return str;
        }
    public:
        static std::string const& ItemName_ClientID(void)
        {
            static std::string str("ClientID");
            return str;
        }
    public:
        static std::string const& ItemName_MaximumDataLength(void)
        {
            static std::string str("MaximumDataLength");
            return str;
        }
    public:
        static std::string const& ItemName_QualityOfService(void)
        {
            static std::string str("QualityOfService");
            return str;
        }
    public:
        static std::string const& ItemName_EnableRetain(void)
        {
            static std::string str("EnableRetain");
            return str;
        }
    public:
        static std::string const& ItemName_EnableVerbose(void)
        {
            static std::string str("EnableVerbose");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Network_Client_IoT");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10003");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Network_Client_IoT(void)
    {
        try
        {
            Construct_OrganisationID();
            Construct_TypeID();
            Construct_ClientID();
            Construct_MaximumDataLength();
            Construct_QualityOfService();
            Construct_EnableRetain();
            Construct_EnableVerbose();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Network_Client_IoT(const CType_Config_Universal_Adapter_Network_Client_IoT& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Network_Client_IoT(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OrganisationID();
            Construct_TypeID();
            Construct_ClientID();
            Construct_MaximumDataLength();
            Construct_QualityOfService();
            Construct_EnableRetain();
            Construct_EnableVerbose();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Network_Client_IoT(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OrganisationID();
            Initialize_TypeID();
            Initialize_ClientID();
            Initialize_MaximumDataLength();
            Initialize_QualityOfService();
            Initialize_EnableRetain();
            Initialize_EnableVerbose();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OrganisationID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_OrganisationID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OrganisationID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OrganisationID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OrganisationID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OrganisationID()))
                {
                    Construct_OrganisationID();
                }
                if ((*Value()).hasMember(ItemName_OrganisationID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OrganisationID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OrganisationID(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OrganisationID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_OrganisationID(void) const
        {
            return (*Value())[ItemName_OrganisationID()];
        }
        bool Get_OrganisationID(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OrganisationID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OrganisationID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_TypeID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_TypeID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeID()))
                {
                    Construct_TypeID();
                }
                if ((*Value()).hasMember(ItemName_TypeID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_TypeID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeID(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_TypeID(void) const
        {
            return (*Value())[ItemName_TypeID()];
        }
        bool Get_TypeID(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeID()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ClientID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ClientID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClientID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ClientID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClientID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClientID()))
                {
                    Construct_ClientID();
                }
                if ((*Value()).hasMember(ItemName_ClientID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ClientID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClientID(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClientID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ClientID(void) const
        {
            return (*Value())[ItemName_ClientID()];
        }
        bool Get_ClientID(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClientID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClientID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaximumDataLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaximumDataLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumDataLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumDataLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaximumDataLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumDataLength()))
                {
                    Construct_MaximumDataLength();
                }
                if ((*Value()).hasMember(ItemName_MaximumDataLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumDataLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaximumDataLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaximumDataLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MaximumDataLength(void) const
        {
            return (*Value())[ItemName_MaximumDataLength()];
        }
        bool Get_MaximumDataLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaximumDataLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaximumDataLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item QualityOfService (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_QualityOfService(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_QualityOfService()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_QualityOfService()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_QualityOfService(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_QualityOfService()))
                {
                    Construct_QualityOfService();
                }
                if ((*Value()).hasMember(ItemName_QualityOfService()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_QualityOfService()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_QualityOfService(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_QualityOfService()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_QualityOfService(void) const
        {
            return (*Value())[ItemName_QualityOfService()];
        }
        bool Get_QualityOfService(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_QualityOfService()]).valid())
                {
                    GetValue = (*Value())[ItemName_QualityOfService()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableRetain (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableRetain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRetain()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRetain()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableRetain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRetain()))
                {
                    Construct_EnableRetain();
                }
                if ((*Value()).hasMember(ItemName_EnableRetain()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRetain()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableRetain(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableRetain()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableRetain(void) const
        {
            return (*Value())[ItemName_EnableRetain()];
        }
        bool Get_EnableRetain(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableRetain()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableRetain()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableVerbose (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableVerbose(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableVerbose()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableVerbose()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableVerbose(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableVerbose()))
                {
                    Construct_EnableVerbose();
                }
                if ((*Value()).hasMember(ItemName_EnableVerbose()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableVerbose()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableVerbose(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableVerbose()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableVerbose(void) const
        {
            return (*Value())[ItemName_EnableVerbose()];
        }
        bool Get_EnableVerbose(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableVerbose()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableVerbose()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Network_Client_IoT


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Network_Client
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Network_Client : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ServerPort(void)
        {
            static std::string str("ServerPort");
            return str;
        }
    public:
        static std::string const& ItemName_AuthenticationMethod(void)
        {
            static std::string str("AuthenticationMethod");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_Password(void)
        {
            static std::string str("Password");
            return str;
        }
    public:
        static std::string const& ItemName_AccessToken(void)
        {
            static std::string str("AccessToken");
            return str;
        }
    public:
        static std::string const& ItemName_ConnectionTimeout(void)
        {
            static std::string str("ConnectionTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
    public:
        static std::string const& ItemName_KeepAliveInterval(void)
        {
            static std::string str("KeepAliveInterval");
            return str;
        }
    public:
        static std::string const& ItemName_HandleInterval(void)
        {
            static std::string str("HandleInterval");
            return str;
        }
    public:
        static std::string const& ItemName_IdleTime(void)
        {
            static std::string str("IdleTime");
            return str;
        }
    public:
        static std::string const& ItemName_IoT(void)
        {
            static std::string str("IoT");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Network_Client");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10004");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Network_Client(void)
    {
        try
        {
            Construct_Type();
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_AuthenticationMethod();
            Construct_UserName();
            Construct_Password();
            Construct_AccessToken();
            Construct_ConnectionTimeout();
            Construct_Timeout();
            Construct_KeepAliveInterval();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_IoT();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Network_Client(const CType_Config_Universal_Adapter_Network_Client& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Network_Client(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_AuthenticationMethod();
            Construct_UserName();
            Construct_Password();
            Construct_AccessToken();
            Construct_ConnectionTimeout();
            Construct_Timeout();
            Construct_KeepAliveInterval();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_IoT();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Network_Client(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_ServerAddress();
            Initialize_ServerPort();
            Initialize_AuthenticationMethod();
            Initialize_UserName();
            Initialize_Password();
            Initialize_AccessToken();
            Initialize_ConnectionTimeout();
            Initialize_Timeout();
            Initialize_KeepAliveInterval();
            Initialize_HandleInterval();
            Initialize_IdleTime();
            Initialize_IoT();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    Construct_ServerPort();
                }
                if ((*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerPort(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ServerPort(void) const
        {
            return (*Value())[ItemName_ServerPort()];
        }
        bool Get_ServerPort(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AuthenticationMethod (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AuthenticationMethod(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AuthenticationMethod()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AuthenticationMethod()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AuthenticationMethod(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AuthenticationMethod()))
                {
                    Construct_AuthenticationMethod();
                }
                if ((*Value()).hasMember(ItemName_AuthenticationMethod()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AuthenticationMethod()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AuthenticationMethod(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AuthenticationMethod()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AuthenticationMethod(void) const
        {
            return (*Value())[ItemName_AuthenticationMethod()];
        }
        bool Get_AuthenticationMethod(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AuthenticationMethod()]).valid())
                {
                    GetValue = (*Value())[ItemName_AuthenticationMethod()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Password (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    Construct_Password();
                }
                if ((*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Password(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Password()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Password(void) const
        {
            return (*Value())[ItemName_Password()];
        }
        bool Get_Password(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Password()]).valid())
                {
                    GetValue = (*Value())[ItemName_Password()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AccessToken (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_AccessToken(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessToken()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_AccessToken()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AccessToken(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessToken()))
                {
                    Construct_AccessToken();
                }
                if ((*Value()).hasMember(ItemName_AccessToken()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_AccessToken()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AccessToken(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AccessToken()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_AccessToken(void) const
        {
            return (*Value())[ItemName_AccessToken()];
        }
        bool Get_AccessToken(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AccessToken()]).valid())
                {
                    GetValue = (*Value())[ItemName_AccessToken()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConnectionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ConnectionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConnectionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    Construct_ConnectionTimeout();
                }
                if ((*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConnectionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ConnectionTimeout(void) const
        {
            return (*Value())[ItemName_ConnectionTimeout()];
        }
        bool Get_ConnectionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item KeepAliveInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_KeepAliveInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_KeepAliveInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_KeepAliveInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    Construct_KeepAliveInterval();
                }
                if ((*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_KeepAliveInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_KeepAliveInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_KeepAliveInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_KeepAliveInterval(void) const
        {
            return (*Value())[ItemName_KeepAliveInterval()];
        }
        bool Get_KeepAliveInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_KeepAliveInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_KeepAliveInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HandleInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    Construct_HandleInterval();
                }
                if ((*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandleInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandleInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandleInterval(void) const
        {
            return (*Value())[ItemName_HandleInterval()];
        }
        bool Get_HandleInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandleInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandleInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IdleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    Construct_IdleTime();
                }
                if ((*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IdleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_IdleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_IdleTime(void) const
        {
            return (*Value())[ItemName_IdleTime()];
        }
        bool Get_IdleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IdleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_IdleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IoT (Type: "CType_Config_Universal_Adapter_Network_Client_IoT")
    protected:
        void Construct_IoT(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IoT()))
                {
                    CType_Config_Universal_Adapter_Network_Client_IoT InitValue;
                    (*Value())[ItemName_IoT()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IoT(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IoT()))
                {
                    Construct_IoT();
                }
                if ((*Value()).hasMember(ItemName_IoT()))
                {
                    CType_Config_Universal_Adapter_Network_Client_IoT InitValue;
                    (*Value())[ItemName_IoT()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IoT(const CType_Config_Universal_Adapter_Network_Client_IoT& SetValue)
        {
            try
            {
                (*Value())[ItemName_IoT()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client_IoT Get_IoT(void) const
        {
            return (*Value())[ItemName_IoT()];
        }
        bool Get_IoT(CType_Config_Universal_Adapter_Network_Client_IoT& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IoT()]).valid())
                {
                    GetValue = (*Value())[ItemName_IoT()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Network_Client


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Network
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Network : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Ethernet0(void)
        {
            static std::string str("Ethernet0");
            return str;
        }
    public:
        static std::string const& ItemName_Ethernet1(void)
        {
            static std::string str("Ethernet1");
            return str;
        }
    public:
        static std::string const& ItemName_WLAN0(void)
        {
            static std::string str("WLAN0");
            return str;
        }
    public:
        static std::string const& ItemName_ClientCount(void)
        {
            static std::string str("ClientCount");
            return str;
        }
    public:
        static std::string const& ItemName_Client0(void)
        {
            static std::string str("Client0");
            return str;
        }
    public:
        static std::string const& ItemName_Client1(void)
        {
            static std::string str("Client1");
            return str;
        }
    public:
        static std::string const& ItemName_Client2(void)
        {
            static std::string str("Client2");
            return str;
        }
    public:
        static std::string const& ItemName_Client3(void)
        {
            static std::string str("Client3");
            return str;
        }
    public:
        static std::string const& ItemName_Client4(void)
        {
            static std::string str("Client4");
            return str;
        }
    public:
        static std::string const& ItemName_Client5(void)
        {
            static std::string str("Client5");
            return str;
        }
    public:
        static std::string const& ItemName_Client6(void)
        {
            static std::string str("Client6");
            return str;
        }
    public:
        static std::string const& ItemName_Client7(void)
        {
            static std::string str("Client7");
            return str;
        }
    public:
        static std::string const& ItemName_Client8(void)
        {
            static std::string str("Client8");
            return str;
        }
    public:
        static std::string const& ItemName_Client9(void)
        {
            static std::string str("Client9");
            return str;
        }
    public:
        static std::string const& ItemName_Client10(void)
        {
            static std::string str("Client10");
            return str;
        }
    public:
        static std::string const& ItemName_Client11(void)
        {
            static std::string str("Client11");
            return str;
        }
    public:
        static std::string const& ItemName_Client12(void)
        {
            static std::string str("Client12");
            return str;
        }
    public:
        static std::string const& ItemName_Client13(void)
        {
            static std::string str("Client13");
            return str;
        }
    public:
        static std::string const& ItemName_Client14(void)
        {
            static std::string str("Client14");
            return str;
        }
    public:
        static std::string const& ItemName_Client15(void)
        {
            static std::string str("Client15");
            return str;
        }
    public:
        static std::string const& ItemName_Client16(void)
        {
            static std::string str("Client16");
            return str;
        }
    public:
        static std::string const& ItemName_Client17(void)
        {
            static std::string str("Client17");
            return str;
        }
    public:
        static std::string const& ItemName_Client18(void)
        {
            static std::string str("Client18");
            return str;
        }
    public:
        static std::string const& ItemName_Client19(void)
        {
            static std::string str("Client19");
            return str;
        }
    public:
        static std::string const& ItemName_Client20(void)
        {
            static std::string str("Client20");
            return str;
        }
    public:
        static std::string const& ItemName_Client21(void)
        {
            static std::string str("Client21");
            return str;
        }
    public:
        static std::string const& ItemName_Client22(void)
        {
            static std::string str("Client22");
            return str;
        }
    public:
        static std::string const& ItemName_Client23(void)
        {
            static std::string str("Client23");
            return str;
        }
    public:
        static std::string const& ItemName_Client24(void)
        {
            static std::string str("Client24");
            return str;
        }
    public:
        static std::string const& ItemName_Client25(void)
        {
            static std::string str("Client25");
            return str;
        }
    public:
        static std::string const& ItemName_Client26(void)
        {
            static std::string str("Client26");
            return str;
        }
    public:
        static std::string const& ItemName_Client27(void)
        {
            static std::string str("Client27");
            return str;
        }
    public:
        static std::string const& ItemName_Client28(void)
        {
            static std::string str("Client28");
            return str;
        }
    public:
        static std::string const& ItemName_Client29(void)
        {
            static std::string str("Client29");
            return str;
        }
    public:
        static std::string const& ItemName_Client30(void)
        {
            static std::string str("Client30");
            return str;
        }
    public:
        static std::string const& ItemName_Client31(void)
        {
            static std::string str("Client31");
            return str;
        }
    public:
        static std::string const& ItemName_Client32(void)
        {
            static std::string str("Client32");
            return str;
        }
    public:
        static std::string const& ItemName_Client33(void)
        {
            static std::string str("Client33");
            return str;
        }
    public:
        static std::string const& ItemName_Client34(void)
        {
            static std::string str("Client34");
            return str;
        }
    public:
        static std::string const& ItemName_Client35(void)
        {
            static std::string str("Client35");
            return str;
        }
    public:
        static std::string const& ItemName_Client36(void)
        {
            static std::string str("Client36");
            return str;
        }
    public:
        static std::string const& ItemName_Client37(void)
        {
            static std::string str("Client37");
            return str;
        }
    public:
        static std::string const& ItemName_Client38(void)
        {
            static std::string str("Client38");
            return str;
        }
    public:
        static std::string const& ItemName_Client39(void)
        {
            static std::string str("Client39");
            return str;
        }
    public:
        static std::string const& ItemName_Client40(void)
        {
            static std::string str("Client40");
            return str;
        }
    public:
        static std::string const& ItemName_Client41(void)
        {
            static std::string str("Client41");
            return str;
        }
    public:
        static std::string const& ItemName_Client42(void)
        {
            static std::string str("Client42");
            return str;
        }
    public:
        static std::string const& ItemName_Client43(void)
        {
            static std::string str("Client43");
            return str;
        }
    public:
        static std::string const& ItemName_Client44(void)
        {
            static std::string str("Client44");
            return str;
        }
    public:
        static std::string const& ItemName_Client45(void)
        {
            static std::string str("Client45");
            return str;
        }
    public:
        static std::string const& ItemName_Client46(void)
        {
            static std::string str("Client46");
            return str;
        }
    public:
        static std::string const& ItemName_Client47(void)
        {
            static std::string str("Client47");
            return str;
        }
    public:
        static std::string const& ItemName_Client48(void)
        {
            static std::string str("Client48");
            return str;
        }
    public:
        static std::string const& ItemName_Client49(void)
        {
            static std::string str("Client49");
            return str;
        }
    public:
        static std::string const& ItemName_Client50(void)
        {
            static std::string str("Client50");
            return str;
        }
    public:
        static std::string const& ItemName_Client51(void)
        {
            static std::string str("Client51");
            return str;
        }
    public:
        static std::string const& ItemName_Client52(void)
        {
            static std::string str("Client52");
            return str;
        }
    public:
        static std::string const& ItemName_Client53(void)
        {
            static std::string str("Client53");
            return str;
        }
    public:
        static std::string const& ItemName_Client54(void)
        {
            static std::string str("Client54");
            return str;
        }
    public:
        static std::string const& ItemName_Client55(void)
        {
            static std::string str("Client55");
            return str;
        }
    public:
        static std::string const& ItemName_Client56(void)
        {
            static std::string str("Client56");
            return str;
        }
    public:
        static std::string const& ItemName_Client57(void)
        {
            static std::string str("Client57");
            return str;
        }
    public:
        static std::string const& ItemName_Client58(void)
        {
            static std::string str("Client58");
            return str;
        }
    public:
        static std::string const& ItemName_Client59(void)
        {
            static std::string str("Client59");
            return str;
        }
    public:
        static std::string const& ItemName_Client60(void)
        {
            static std::string str("Client60");
            return str;
        }
    public:
        static std::string const& ItemName_Client61(void)
        {
            static std::string str("Client61");
            return str;
        }
    public:
        static std::string const& ItemName_Client62(void)
        {
            static std::string str("Client62");
            return str;
        }
    public:
        static std::string const& ItemName_Client63(void)
        {
            static std::string str("Client63");
            return str;
        }
    public:
        static std::string const& ItemName_Client64(void)
        {
            static std::string str("Client64");
            return str;
        }
    public:
        static std::string const& ItemName_Client65(void)
        {
            static std::string str("Client65");
            return str;
        }
    public:
        static std::string const& ItemName_Client66(void)
        {
            static std::string str("Client66");
            return str;
        }
    public:
        static std::string const& ItemName_Client67(void)
        {
            static std::string str("Client67");
            return str;
        }
    public:
        static std::string const& ItemName_Client68(void)
        {
            static std::string str("Client68");
            return str;
        }
    public:
        static std::string const& ItemName_Client69(void)
        {
            static std::string str("Client69");
            return str;
        }
    public:
        static std::string const& ItemName_Client70(void)
        {
            static std::string str("Client70");
            return str;
        }
    public:
        static std::string const& ItemName_Client71(void)
        {
            static std::string str("Client71");
            return str;
        }
    public:
        static std::string const& ItemName_Client72(void)
        {
            static std::string str("Client72");
            return str;
        }
    public:
        static std::string const& ItemName_Client73(void)
        {
            static std::string str("Client73");
            return str;
        }
    public:
        static std::string const& ItemName_Client74(void)
        {
            static std::string str("Client74");
            return str;
        }
    public:
        static std::string const& ItemName_Client75(void)
        {
            static std::string str("Client75");
            return str;
        }
    public:
        static std::string const& ItemName_Client76(void)
        {
            static std::string str("Client76");
            return str;
        }
    public:
        static std::string const& ItemName_Client77(void)
        {
            static std::string str("Client77");
            return str;
        }
    public:
        static std::string const& ItemName_Client78(void)
        {
            static std::string str("Client78");
            return str;
        }
    public:
        static std::string const& ItemName_Client79(void)
        {
            static std::string str("Client79");
            return str;
        }
    public:
        static std::string const& ItemName_Client80(void)
        {
            static std::string str("Client80");
            return str;
        }
    public:
        static std::string const& ItemName_Client81(void)
        {
            static std::string str("Client81");
            return str;
        }
    public:
        static std::string const& ItemName_Client82(void)
        {
            static std::string str("Client82");
            return str;
        }
    public:
        static std::string const& ItemName_Client83(void)
        {
            static std::string str("Client83");
            return str;
        }
    public:
        static std::string const& ItemName_Client84(void)
        {
            static std::string str("Client84");
            return str;
        }
    public:
        static std::string const& ItemName_Client85(void)
        {
            static std::string str("Client85");
            return str;
        }
    public:
        static std::string const& ItemName_Client86(void)
        {
            static std::string str("Client86");
            return str;
        }
    public:
        static std::string const& ItemName_Client87(void)
        {
            static std::string str("Client87");
            return str;
        }
    public:
        static std::string const& ItemName_Client88(void)
        {
            static std::string str("Client88");
            return str;
        }
    public:
        static std::string const& ItemName_Client89(void)
        {
            static std::string str("Client89");
            return str;
        }
    public:
        static std::string const& ItemName_Client90(void)
        {
            static std::string str("Client90");
            return str;
        }
    public:
        static std::string const& ItemName_Client91(void)
        {
            static std::string str("Client91");
            return str;
        }
    public:
        static std::string const& ItemName_Client92(void)
        {
            static std::string str("Client92");
            return str;
        }
    public:
        static std::string const& ItemName_Client93(void)
        {
            static std::string str("Client93");
            return str;
        }
    public:
        static std::string const& ItemName_Client94(void)
        {
            static std::string str("Client94");
            return str;
        }
    public:
        static std::string const& ItemName_Client95(void)
        {
            static std::string str("Client95");
            return str;
        }
    public:
        static std::string const& ItemName_Client96(void)
        {
            static std::string str("Client96");
            return str;
        }
    public:
        static std::string const& ItemName_Client97(void)
        {
            static std::string str("Client97");
            return str;
        }
    public:
        static std::string const& ItemName_Client98(void)
        {
            static std::string str("Client98");
            return str;
        }
    public:
        static std::string const& ItemName_Client99(void)
        {
            static std::string str("Client99");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Network");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10005");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Network(void)
    {
        try
        {
            Construct_Ethernet0();
            Construct_Ethernet1();
            Construct_WLAN0();
            Construct_ClientCount();
            Construct_Client0();
            Construct_Client1();
            Construct_Client2();
            Construct_Client3();
            Construct_Client4();
            Construct_Client5();
            Construct_Client6();
            Construct_Client7();
            Construct_Client8();
            Construct_Client9();
            Construct_Client10();
            Construct_Client11();
            Construct_Client12();
            Construct_Client13();
            Construct_Client14();
            Construct_Client15();
            Construct_Client16();
            Construct_Client17();
            Construct_Client18();
            Construct_Client19();
            Construct_Client20();
            Construct_Client21();
            Construct_Client22();
            Construct_Client23();
            Construct_Client24();
            Construct_Client25();
            Construct_Client26();
            Construct_Client27();
            Construct_Client28();
            Construct_Client29();
            Construct_Client30();
            Construct_Client31();
            Construct_Client32();
            Construct_Client33();
            Construct_Client34();
            Construct_Client35();
            Construct_Client36();
            Construct_Client37();
            Construct_Client38();
            Construct_Client39();
            Construct_Client40();
            Construct_Client41();
            Construct_Client42();
            Construct_Client43();
            Construct_Client44();
            Construct_Client45();
            Construct_Client46();
            Construct_Client47();
            Construct_Client48();
            Construct_Client49();
            Construct_Client50();
            Construct_Client51();
            Construct_Client52();
            Construct_Client53();
            Construct_Client54();
            Construct_Client55();
            Construct_Client56();
            Construct_Client57();
            Construct_Client58();
            Construct_Client59();
            Construct_Client60();
            Construct_Client61();
            Construct_Client62();
            Construct_Client63();
            Construct_Client64();
            Construct_Client65();
            Construct_Client66();
            Construct_Client67();
            Construct_Client68();
            Construct_Client69();
            Construct_Client70();
            Construct_Client71();
            Construct_Client72();
            Construct_Client73();
            Construct_Client74();
            Construct_Client75();
            Construct_Client76();
            Construct_Client77();
            Construct_Client78();
            Construct_Client79();
            Construct_Client80();
            Construct_Client81();
            Construct_Client82();
            Construct_Client83();
            Construct_Client84();
            Construct_Client85();
            Construct_Client86();
            Construct_Client87();
            Construct_Client88();
            Construct_Client89();
            Construct_Client90();
            Construct_Client91();
            Construct_Client92();
            Construct_Client93();
            Construct_Client94();
            Construct_Client95();
            Construct_Client96();
            Construct_Client97();
            Construct_Client98();
            Construct_Client99();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Network(const CType_Config_Universal_Adapter_Network& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Network(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Ethernet0();
            Construct_Ethernet1();
            Construct_WLAN0();
            Construct_ClientCount();
            Construct_Client0();
            Construct_Client1();
            Construct_Client2();
            Construct_Client3();
            Construct_Client4();
            Construct_Client5();
            Construct_Client6();
            Construct_Client7();
            Construct_Client8();
            Construct_Client9();
            Construct_Client10();
            Construct_Client11();
            Construct_Client12();
            Construct_Client13();
            Construct_Client14();
            Construct_Client15();
            Construct_Client16();
            Construct_Client17();
            Construct_Client18();
            Construct_Client19();
            Construct_Client20();
            Construct_Client21();
            Construct_Client22();
            Construct_Client23();
            Construct_Client24();
            Construct_Client25();
            Construct_Client26();
            Construct_Client27();
            Construct_Client28();
            Construct_Client29();
            Construct_Client30();
            Construct_Client31();
            Construct_Client32();
            Construct_Client33();
            Construct_Client34();
            Construct_Client35();
            Construct_Client36();
            Construct_Client37();
            Construct_Client38();
            Construct_Client39();
            Construct_Client40();
            Construct_Client41();
            Construct_Client42();
            Construct_Client43();
            Construct_Client44();
            Construct_Client45();
            Construct_Client46();
            Construct_Client47();
            Construct_Client48();
            Construct_Client49();
            Construct_Client50();
            Construct_Client51();
            Construct_Client52();
            Construct_Client53();
            Construct_Client54();
            Construct_Client55();
            Construct_Client56();
            Construct_Client57();
            Construct_Client58();
            Construct_Client59();
            Construct_Client60();
            Construct_Client61();
            Construct_Client62();
            Construct_Client63();
            Construct_Client64();
            Construct_Client65();
            Construct_Client66();
            Construct_Client67();
            Construct_Client68();
            Construct_Client69();
            Construct_Client70();
            Construct_Client71();
            Construct_Client72();
            Construct_Client73();
            Construct_Client74();
            Construct_Client75();
            Construct_Client76();
            Construct_Client77();
            Construct_Client78();
            Construct_Client79();
            Construct_Client80();
            Construct_Client81();
            Construct_Client82();
            Construct_Client83();
            Construct_Client84();
            Construct_Client85();
            Construct_Client86();
            Construct_Client87();
            Construct_Client88();
            Construct_Client89();
            Construct_Client90();
            Construct_Client91();
            Construct_Client92();
            Construct_Client93();
            Construct_Client94();
            Construct_Client95();
            Construct_Client96();
            Construct_Client97();
            Construct_Client98();
            Construct_Client99();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Network(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Ethernet0();
            Initialize_Ethernet1();
            Initialize_WLAN0();
            Initialize_ClientCount();
            Initialize_Client0();
            Initialize_Client1();
            Initialize_Client2();
            Initialize_Client3();
            Initialize_Client4();
            Initialize_Client5();
            Initialize_Client6();
            Initialize_Client7();
            Initialize_Client8();
            Initialize_Client9();
            Initialize_Client10();
            Initialize_Client11();
            Initialize_Client12();
            Initialize_Client13();
            Initialize_Client14();
            Initialize_Client15();
            Initialize_Client16();
            Initialize_Client17();
            Initialize_Client18();
            Initialize_Client19();
            Initialize_Client20();
            Initialize_Client21();
            Initialize_Client22();
            Initialize_Client23();
            Initialize_Client24();
            Initialize_Client25();
            Initialize_Client26();
            Initialize_Client27();
            Initialize_Client28();
            Initialize_Client29();
            Initialize_Client30();
            Initialize_Client31();
            Initialize_Client32();
            Initialize_Client33();
            Initialize_Client34();
            Initialize_Client35();
            Initialize_Client36();
            Initialize_Client37();
            Initialize_Client38();
            Initialize_Client39();
            Initialize_Client40();
            Initialize_Client41();
            Initialize_Client42();
            Initialize_Client43();
            Initialize_Client44();
            Initialize_Client45();
            Initialize_Client46();
            Initialize_Client47();
            Initialize_Client48();
            Initialize_Client49();
            Initialize_Client50();
            Initialize_Client51();
            Initialize_Client52();
            Initialize_Client53();
            Initialize_Client54();
            Initialize_Client55();
            Initialize_Client56();
            Initialize_Client57();
            Initialize_Client58();
            Initialize_Client59();
            Initialize_Client60();
            Initialize_Client61();
            Initialize_Client62();
            Initialize_Client63();
            Initialize_Client64();
            Initialize_Client65();
            Initialize_Client66();
            Initialize_Client67();
            Initialize_Client68();
            Initialize_Client69();
            Initialize_Client70();
            Initialize_Client71();
            Initialize_Client72();
            Initialize_Client73();
            Initialize_Client74();
            Initialize_Client75();
            Initialize_Client76();
            Initialize_Client77();
            Initialize_Client78();
            Initialize_Client79();
            Initialize_Client80();
            Initialize_Client81();
            Initialize_Client82();
            Initialize_Client83();
            Initialize_Client84();
            Initialize_Client85();
            Initialize_Client86();
            Initialize_Client87();
            Initialize_Client88();
            Initialize_Client89();
            Initialize_Client90();
            Initialize_Client91();
            Initialize_Client92();
            Initialize_Client93();
            Initialize_Client94();
            Initialize_Client95();
            Initialize_Client96();
            Initialize_Client97();
            Initialize_Client98();
            Initialize_Client99();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Ethernet0 (Type: "CType_Config_Universal_Adapter_Network_Ethernet")
    protected:
        void Construct_Ethernet0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet0()))
                {
                    CType_Config_Universal_Adapter_Network_Ethernet InitValue;
                    (*Value())[ItemName_Ethernet0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Ethernet0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet0()))
                {
                    Construct_Ethernet0();
                }
                if ((*Value()).hasMember(ItemName_Ethernet0()))
                {
                    CType_Config_Universal_Adapter_Network_Ethernet InitValue;
                    (*Value())[ItemName_Ethernet0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Ethernet0(const CType_Config_Universal_Adapter_Network_Ethernet& SetValue)
        {
            try
            {
                (*Value())[ItemName_Ethernet0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Ethernet Get_Ethernet0(void) const
        {
            return (*Value())[ItemName_Ethernet0()];
        }
        bool Get_Ethernet0(CType_Config_Universal_Adapter_Network_Ethernet& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Ethernet0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Ethernet0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Ethernet1 (Type: "CType_Config_Universal_Adapter_Network_Ethernet")
    protected:
        void Construct_Ethernet1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet1()))
                {
                    CType_Config_Universal_Adapter_Network_Ethernet InitValue;
                    (*Value())[ItemName_Ethernet1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Ethernet1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Ethernet1()))
                {
                    Construct_Ethernet1();
                }
                if ((*Value()).hasMember(ItemName_Ethernet1()))
                {
                    CType_Config_Universal_Adapter_Network_Ethernet InitValue;
                    (*Value())[ItemName_Ethernet1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Ethernet1(const CType_Config_Universal_Adapter_Network_Ethernet& SetValue)
        {
            try
            {
                (*Value())[ItemName_Ethernet1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Ethernet Get_Ethernet1(void) const
        {
            return (*Value())[ItemName_Ethernet1()];
        }
        bool Get_Ethernet1(CType_Config_Universal_Adapter_Network_Ethernet& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Ethernet1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Ethernet1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WLAN0 (Type: "CType_Config_Universal_Adapter_Network_WLAN")
    protected:
        void Construct_WLAN0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WLAN0()))
                {
                    CType_Config_Universal_Adapter_Network_WLAN InitValue;
                    (*Value())[ItemName_WLAN0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WLAN0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WLAN0()))
                {
                    Construct_WLAN0();
                }
                if ((*Value()).hasMember(ItemName_WLAN0()))
                {
                    CType_Config_Universal_Adapter_Network_WLAN InitValue;
                    (*Value())[ItemName_WLAN0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WLAN0(const CType_Config_Universal_Adapter_Network_WLAN& SetValue)
        {
            try
            {
                (*Value())[ItemName_WLAN0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_WLAN Get_WLAN0(void) const
        {
            return (*Value())[ItemName_WLAN0()];
        }
        bool Get_WLAN0(CType_Config_Universal_Adapter_Network_WLAN& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WLAN0()]).valid())
                {
                    GetValue = (*Value())[ItemName_WLAN0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ClientCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ClientCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClientCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClientCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClientCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClientCount()))
                {
                    Construct_ClientCount();
                }
                if ((*Value()).hasMember(ItemName_ClientCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClientCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClientCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClientCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ClientCount(void) const
        {
            return (*Value())[ItemName_ClientCount()];
        }
        bool Get_ClientCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClientCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClientCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client0 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client0()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client0()))
                {
                    Construct_Client0();
                }
                if ((*Value()).hasMember(ItemName_Client0()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client0(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client0(void) const
        {
            return (*Value())[ItemName_Client0()];
        }
        bool Get_Client0(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client1 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client1()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client1()))
                {
                    Construct_Client1();
                }
                if ((*Value()).hasMember(ItemName_Client1()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client1(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client1(void) const
        {
            return (*Value())[ItemName_Client1()];
        }
        bool Get_Client1(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client2 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client2()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client2()))
                {
                    Construct_Client2();
                }
                if ((*Value()).hasMember(ItemName_Client2()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client2(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client2(void) const
        {
            return (*Value())[ItemName_Client2()];
        }
        bool Get_Client2(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client3 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client3()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client3()))
                {
                    Construct_Client3();
                }
                if ((*Value()).hasMember(ItemName_Client3()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client3(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client3(void) const
        {
            return (*Value())[ItemName_Client3()];
        }
        bool Get_Client3(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client4 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client4()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client4()))
                {
                    Construct_Client4();
                }
                if ((*Value()).hasMember(ItemName_Client4()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client4(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client4(void) const
        {
            return (*Value())[ItemName_Client4()];
        }
        bool Get_Client4(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client5 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client5()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client5()))
                {
                    Construct_Client5();
                }
                if ((*Value()).hasMember(ItemName_Client5()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client5(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client5(void) const
        {
            return (*Value())[ItemName_Client5()];
        }
        bool Get_Client5(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client5()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client6 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client6()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client6()))
                {
                    Construct_Client6();
                }
                if ((*Value()).hasMember(ItemName_Client6()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client6(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client6(void) const
        {
            return (*Value())[ItemName_Client6()];
        }
        bool Get_Client6(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client6()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client7 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client7()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client7()))
                {
                    Construct_Client7();
                }
                if ((*Value()).hasMember(ItemName_Client7()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client7(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client7(void) const
        {
            return (*Value())[ItemName_Client7()];
        }
        bool Get_Client7(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client7()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client8 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client8()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client8()))
                {
                    Construct_Client8();
                }
                if ((*Value()).hasMember(ItemName_Client8()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client8(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client8(void) const
        {
            return (*Value())[ItemName_Client8()];
        }
        bool Get_Client8(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client8()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client9 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client9()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client9()))
                {
                    Construct_Client9();
                }
                if ((*Value()).hasMember(ItemName_Client9()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client9(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client9(void) const
        {
            return (*Value())[ItemName_Client9()];
        }
        bool Get_Client9(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client9()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client10 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client10()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client10()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client10()))
                {
                    Construct_Client10();
                }
                if ((*Value()).hasMember(ItemName_Client10()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client10()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client10(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client10()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client10(void) const
        {
            return (*Value())[ItemName_Client10()];
        }
        bool Get_Client10(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client10()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client10()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client11 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client11()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client11()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client11()))
                {
                    Construct_Client11();
                }
                if ((*Value()).hasMember(ItemName_Client11()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client11()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client11(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client11()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client11(void) const
        {
            return (*Value())[ItemName_Client11()];
        }
        bool Get_Client11(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client11()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client11()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client12 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client12()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client12()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client12()))
                {
                    Construct_Client12();
                }
                if ((*Value()).hasMember(ItemName_Client12()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client12()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client12(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client12()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client12(void) const
        {
            return (*Value())[ItemName_Client12()];
        }
        bool Get_Client12(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client12()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client12()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client13 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client13()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client13()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client13()))
                {
                    Construct_Client13();
                }
                if ((*Value()).hasMember(ItemName_Client13()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client13()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client13(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client13()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client13(void) const
        {
            return (*Value())[ItemName_Client13()];
        }
        bool Get_Client13(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client13()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client13()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client14 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client14()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client14()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client14()))
                {
                    Construct_Client14();
                }
                if ((*Value()).hasMember(ItemName_Client14()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client14()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client14(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client14()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client14(void) const
        {
            return (*Value())[ItemName_Client14()];
        }
        bool Get_Client14(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client14()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client14()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client15 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client15()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client15()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client15()))
                {
                    Construct_Client15();
                }
                if ((*Value()).hasMember(ItemName_Client15()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client15()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client15(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client15()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client15(void) const
        {
            return (*Value())[ItemName_Client15()];
        }
        bool Get_Client15(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client15()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client15()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client16 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client16()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client16()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client16()))
                {
                    Construct_Client16();
                }
                if ((*Value()).hasMember(ItemName_Client16()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client16()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client16(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client16()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client16(void) const
        {
            return (*Value())[ItemName_Client16()];
        }
        bool Get_Client16(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client16()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client16()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client17 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client17()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client17()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client17()))
                {
                    Construct_Client17();
                }
                if ((*Value()).hasMember(ItemName_Client17()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client17()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client17(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client17()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client17(void) const
        {
            return (*Value())[ItemName_Client17()];
        }
        bool Get_Client17(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client17()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client17()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client18 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client18()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client18()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client18()))
                {
                    Construct_Client18();
                }
                if ((*Value()).hasMember(ItemName_Client18()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client18()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client18(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client18()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client18(void) const
        {
            return (*Value())[ItemName_Client18()];
        }
        bool Get_Client18(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client18()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client18()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client19 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client19()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client19()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client19()))
                {
                    Construct_Client19();
                }
                if ((*Value()).hasMember(ItemName_Client19()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client19()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client19(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client19()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client19(void) const
        {
            return (*Value())[ItemName_Client19()];
        }
        bool Get_Client19(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client19()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client19()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client20 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client20(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client20()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client20()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client20(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client20()))
                {
                    Construct_Client20();
                }
                if ((*Value()).hasMember(ItemName_Client20()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client20()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client20(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client20()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client20(void) const
        {
            return (*Value())[ItemName_Client20()];
        }
        bool Get_Client20(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client20()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client20()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client21 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client21(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client21()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client21()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client21(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client21()))
                {
                    Construct_Client21();
                }
                if ((*Value()).hasMember(ItemName_Client21()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client21()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client21(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client21()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client21(void) const
        {
            return (*Value())[ItemName_Client21()];
        }
        bool Get_Client21(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client21()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client21()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client22 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client22(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client22()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client22()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client22(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client22()))
                {
                    Construct_Client22();
                }
                if ((*Value()).hasMember(ItemName_Client22()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client22()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client22(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client22()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client22(void) const
        {
            return (*Value())[ItemName_Client22()];
        }
        bool Get_Client22(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client22()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client22()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client23 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client23(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client23()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client23()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client23(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client23()))
                {
                    Construct_Client23();
                }
                if ((*Value()).hasMember(ItemName_Client23()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client23()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client23(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client23()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client23(void) const
        {
            return (*Value())[ItemName_Client23()];
        }
        bool Get_Client23(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client23()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client23()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client24 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client24(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client24()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client24()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client24(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client24()))
                {
                    Construct_Client24();
                }
                if ((*Value()).hasMember(ItemName_Client24()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client24()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client24(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client24()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client24(void) const
        {
            return (*Value())[ItemName_Client24()];
        }
        bool Get_Client24(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client24()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client24()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client25 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client25(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client25()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client25()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client25(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client25()))
                {
                    Construct_Client25();
                }
                if ((*Value()).hasMember(ItemName_Client25()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client25()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client25(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client25()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client25(void) const
        {
            return (*Value())[ItemName_Client25()];
        }
        bool Get_Client25(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client25()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client25()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client26 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client26(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client26()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client26()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client26(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client26()))
                {
                    Construct_Client26();
                }
                if ((*Value()).hasMember(ItemName_Client26()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client26()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client26(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client26()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client26(void) const
        {
            return (*Value())[ItemName_Client26()];
        }
        bool Get_Client26(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client26()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client26()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client27 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client27(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client27()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client27()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client27(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client27()))
                {
                    Construct_Client27();
                }
                if ((*Value()).hasMember(ItemName_Client27()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client27()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client27(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client27()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client27(void) const
        {
            return (*Value())[ItemName_Client27()];
        }
        bool Get_Client27(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client27()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client27()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client28 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client28(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client28()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client28()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client28(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client28()))
                {
                    Construct_Client28();
                }
                if ((*Value()).hasMember(ItemName_Client28()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client28()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client28(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client28()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client28(void) const
        {
            return (*Value())[ItemName_Client28()];
        }
        bool Get_Client28(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client28()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client28()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client29 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client29(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client29()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client29()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client29(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client29()))
                {
                    Construct_Client29();
                }
                if ((*Value()).hasMember(ItemName_Client29()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client29()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client29(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client29()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client29(void) const
        {
            return (*Value())[ItemName_Client29()];
        }
        bool Get_Client29(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client29()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client29()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client30 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client30(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client30()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client30()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client30(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client30()))
                {
                    Construct_Client30();
                }
                if ((*Value()).hasMember(ItemName_Client30()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client30()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client30(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client30()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client30(void) const
        {
            return (*Value())[ItemName_Client30()];
        }
        bool Get_Client30(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client30()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client30()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client31 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client31(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client31()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client31()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client31(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client31()))
                {
                    Construct_Client31();
                }
                if ((*Value()).hasMember(ItemName_Client31()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client31()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client31(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client31()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client31(void) const
        {
            return (*Value())[ItemName_Client31()];
        }
        bool Get_Client31(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client31()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client31()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client32 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client32(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client32()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client32()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client32(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client32()))
                {
                    Construct_Client32();
                }
                if ((*Value()).hasMember(ItemName_Client32()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client32()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client32(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client32()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client32(void) const
        {
            return (*Value())[ItemName_Client32()];
        }
        bool Get_Client32(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client32()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client32()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client33 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client33(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client33()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client33()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client33(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client33()))
                {
                    Construct_Client33();
                }
                if ((*Value()).hasMember(ItemName_Client33()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client33()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client33(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client33()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client33(void) const
        {
            return (*Value())[ItemName_Client33()];
        }
        bool Get_Client33(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client33()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client33()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client34 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client34(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client34()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client34()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client34(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client34()))
                {
                    Construct_Client34();
                }
                if ((*Value()).hasMember(ItemName_Client34()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client34()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client34(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client34()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client34(void) const
        {
            return (*Value())[ItemName_Client34()];
        }
        bool Get_Client34(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client34()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client34()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client35 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client35(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client35()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client35()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client35(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client35()))
                {
                    Construct_Client35();
                }
                if ((*Value()).hasMember(ItemName_Client35()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client35()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client35(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client35()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client35(void) const
        {
            return (*Value())[ItemName_Client35()];
        }
        bool Get_Client35(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client35()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client35()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client36 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client36(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client36()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client36()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client36(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client36()))
                {
                    Construct_Client36();
                }
                if ((*Value()).hasMember(ItemName_Client36()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client36()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client36(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client36()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client36(void) const
        {
            return (*Value())[ItemName_Client36()];
        }
        bool Get_Client36(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client36()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client36()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client37 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client37(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client37()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client37()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client37(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client37()))
                {
                    Construct_Client37();
                }
                if ((*Value()).hasMember(ItemName_Client37()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client37()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client37(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client37()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client37(void) const
        {
            return (*Value())[ItemName_Client37()];
        }
        bool Get_Client37(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client37()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client37()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client38 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client38(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client38()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client38()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client38(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client38()))
                {
                    Construct_Client38();
                }
                if ((*Value()).hasMember(ItemName_Client38()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client38()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client38(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client38()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client38(void) const
        {
            return (*Value())[ItemName_Client38()];
        }
        bool Get_Client38(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client38()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client38()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client39 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client39(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client39()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client39()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client39(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client39()))
                {
                    Construct_Client39();
                }
                if ((*Value()).hasMember(ItemName_Client39()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client39()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client39(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client39()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client39(void) const
        {
            return (*Value())[ItemName_Client39()];
        }
        bool Get_Client39(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client39()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client39()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client40 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client40(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client40()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client40()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client40(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client40()))
                {
                    Construct_Client40();
                }
                if ((*Value()).hasMember(ItemName_Client40()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client40()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client40(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client40()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client40(void) const
        {
            return (*Value())[ItemName_Client40()];
        }
        bool Get_Client40(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client40()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client40()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client41 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client41(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client41()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client41()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client41(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client41()))
                {
                    Construct_Client41();
                }
                if ((*Value()).hasMember(ItemName_Client41()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client41()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client41(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client41()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client41(void) const
        {
            return (*Value())[ItemName_Client41()];
        }
        bool Get_Client41(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client41()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client41()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client42 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client42(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client42()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client42()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client42(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client42()))
                {
                    Construct_Client42();
                }
                if ((*Value()).hasMember(ItemName_Client42()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client42()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client42(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client42()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client42(void) const
        {
            return (*Value())[ItemName_Client42()];
        }
        bool Get_Client42(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client42()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client42()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client43 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client43(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client43()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client43()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client43(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client43()))
                {
                    Construct_Client43();
                }
                if ((*Value()).hasMember(ItemName_Client43()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client43()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client43(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client43()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client43(void) const
        {
            return (*Value())[ItemName_Client43()];
        }
        bool Get_Client43(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client43()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client43()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client44 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client44(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client44()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client44()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client44(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client44()))
                {
                    Construct_Client44();
                }
                if ((*Value()).hasMember(ItemName_Client44()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client44()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client44(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client44()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client44(void) const
        {
            return (*Value())[ItemName_Client44()];
        }
        bool Get_Client44(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client44()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client44()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client45 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client45(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client45()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client45()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client45(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client45()))
                {
                    Construct_Client45();
                }
                if ((*Value()).hasMember(ItemName_Client45()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client45()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client45(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client45()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client45(void) const
        {
            return (*Value())[ItemName_Client45()];
        }
        bool Get_Client45(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client45()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client45()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client46 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client46(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client46()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client46()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client46(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client46()))
                {
                    Construct_Client46();
                }
                if ((*Value()).hasMember(ItemName_Client46()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client46()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client46(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client46()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client46(void) const
        {
            return (*Value())[ItemName_Client46()];
        }
        bool Get_Client46(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client46()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client46()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client47 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client47(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client47()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client47()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client47(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client47()))
                {
                    Construct_Client47();
                }
                if ((*Value()).hasMember(ItemName_Client47()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client47()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client47(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client47()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client47(void) const
        {
            return (*Value())[ItemName_Client47()];
        }
        bool Get_Client47(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client47()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client47()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client48 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client48(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client48()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client48()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client48(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client48()))
                {
                    Construct_Client48();
                }
                if ((*Value()).hasMember(ItemName_Client48()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client48()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client48(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client48()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client48(void) const
        {
            return (*Value())[ItemName_Client48()];
        }
        bool Get_Client48(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client48()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client48()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client49 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client49(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client49()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client49()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client49(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client49()))
                {
                    Construct_Client49();
                }
                if ((*Value()).hasMember(ItemName_Client49()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client49()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client49(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client49()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client49(void) const
        {
            return (*Value())[ItemName_Client49()];
        }
        bool Get_Client49(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client49()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client49()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client50 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client50(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client50()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client50()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client50(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client50()))
                {
                    Construct_Client50();
                }
                if ((*Value()).hasMember(ItemName_Client50()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client50()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client50(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client50()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client50(void) const
        {
            return (*Value())[ItemName_Client50()];
        }
        bool Get_Client50(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client50()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client50()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client51 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client51(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client51()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client51()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client51(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client51()))
                {
                    Construct_Client51();
                }
                if ((*Value()).hasMember(ItemName_Client51()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client51()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client51(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client51()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client51(void) const
        {
            return (*Value())[ItemName_Client51()];
        }
        bool Get_Client51(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client51()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client51()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client52 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client52(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client52()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client52()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client52(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client52()))
                {
                    Construct_Client52();
                }
                if ((*Value()).hasMember(ItemName_Client52()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client52()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client52(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client52()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client52(void) const
        {
            return (*Value())[ItemName_Client52()];
        }
        bool Get_Client52(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client52()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client52()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client53 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client53(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client53()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client53()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client53(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client53()))
                {
                    Construct_Client53();
                }
                if ((*Value()).hasMember(ItemName_Client53()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client53()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client53(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client53()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client53(void) const
        {
            return (*Value())[ItemName_Client53()];
        }
        bool Get_Client53(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client53()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client53()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client54 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client54(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client54()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client54()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client54(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client54()))
                {
                    Construct_Client54();
                }
                if ((*Value()).hasMember(ItemName_Client54()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client54()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client54(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client54()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client54(void) const
        {
            return (*Value())[ItemName_Client54()];
        }
        bool Get_Client54(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client54()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client54()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client55 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client55(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client55()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client55()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client55(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client55()))
                {
                    Construct_Client55();
                }
                if ((*Value()).hasMember(ItemName_Client55()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client55()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client55(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client55()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client55(void) const
        {
            return (*Value())[ItemName_Client55()];
        }
        bool Get_Client55(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client55()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client55()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client56 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client56(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client56()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client56()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client56(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client56()))
                {
                    Construct_Client56();
                }
                if ((*Value()).hasMember(ItemName_Client56()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client56()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client56(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client56()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client56(void) const
        {
            return (*Value())[ItemName_Client56()];
        }
        bool Get_Client56(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client56()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client56()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client57 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client57(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client57()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client57()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client57(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client57()))
                {
                    Construct_Client57();
                }
                if ((*Value()).hasMember(ItemName_Client57()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client57()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client57(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client57()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client57(void) const
        {
            return (*Value())[ItemName_Client57()];
        }
        bool Get_Client57(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client57()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client57()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client58 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client58(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client58()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client58()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client58(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client58()))
                {
                    Construct_Client58();
                }
                if ((*Value()).hasMember(ItemName_Client58()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client58()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client58(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client58()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client58(void) const
        {
            return (*Value())[ItemName_Client58()];
        }
        bool Get_Client58(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client58()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client58()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client59 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client59(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client59()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client59()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client59(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client59()))
                {
                    Construct_Client59();
                }
                if ((*Value()).hasMember(ItemName_Client59()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client59()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client59(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client59()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client59(void) const
        {
            return (*Value())[ItemName_Client59()];
        }
        bool Get_Client59(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client59()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client59()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client60 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client60(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client60()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client60()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client60(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client60()))
                {
                    Construct_Client60();
                }
                if ((*Value()).hasMember(ItemName_Client60()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client60()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client60(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client60()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client60(void) const
        {
            return (*Value())[ItemName_Client60()];
        }
        bool Get_Client60(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client60()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client60()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client61 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client61(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client61()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client61()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client61(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client61()))
                {
                    Construct_Client61();
                }
                if ((*Value()).hasMember(ItemName_Client61()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client61()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client61(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client61()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client61(void) const
        {
            return (*Value())[ItemName_Client61()];
        }
        bool Get_Client61(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client61()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client61()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client62 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client62(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client62()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client62()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client62(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client62()))
                {
                    Construct_Client62();
                }
                if ((*Value()).hasMember(ItemName_Client62()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client62()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client62(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client62()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client62(void) const
        {
            return (*Value())[ItemName_Client62()];
        }
        bool Get_Client62(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client62()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client62()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client63 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client63(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client63()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client63()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client63(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client63()))
                {
                    Construct_Client63();
                }
                if ((*Value()).hasMember(ItemName_Client63()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client63()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client63(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client63()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client63(void) const
        {
            return (*Value())[ItemName_Client63()];
        }
        bool Get_Client63(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client63()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client63()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client64 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client64(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client64()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client64()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client64(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client64()))
                {
                    Construct_Client64();
                }
                if ((*Value()).hasMember(ItemName_Client64()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client64()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client64(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client64()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client64(void) const
        {
            return (*Value())[ItemName_Client64()];
        }
        bool Get_Client64(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client64()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client64()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client65 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client65(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client65()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client65()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client65(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client65()))
                {
                    Construct_Client65();
                }
                if ((*Value()).hasMember(ItemName_Client65()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client65()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client65(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client65()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client65(void) const
        {
            return (*Value())[ItemName_Client65()];
        }
        bool Get_Client65(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client65()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client65()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client66 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client66(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client66()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client66()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client66(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client66()))
                {
                    Construct_Client66();
                }
                if ((*Value()).hasMember(ItemName_Client66()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client66()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client66(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client66()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client66(void) const
        {
            return (*Value())[ItemName_Client66()];
        }
        bool Get_Client66(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client66()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client66()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client67 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client67(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client67()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client67()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client67(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client67()))
                {
                    Construct_Client67();
                }
                if ((*Value()).hasMember(ItemName_Client67()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client67()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client67(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client67()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client67(void) const
        {
            return (*Value())[ItemName_Client67()];
        }
        bool Get_Client67(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client67()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client67()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client68 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client68(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client68()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client68()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client68(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client68()))
                {
                    Construct_Client68();
                }
                if ((*Value()).hasMember(ItemName_Client68()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client68()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client68(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client68()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client68(void) const
        {
            return (*Value())[ItemName_Client68()];
        }
        bool Get_Client68(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client68()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client68()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client69 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client69(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client69()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client69()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client69(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client69()))
                {
                    Construct_Client69();
                }
                if ((*Value()).hasMember(ItemName_Client69()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client69()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client69(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client69()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client69(void) const
        {
            return (*Value())[ItemName_Client69()];
        }
        bool Get_Client69(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client69()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client69()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client70 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client70(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client70()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client70()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client70(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client70()))
                {
                    Construct_Client70();
                }
                if ((*Value()).hasMember(ItemName_Client70()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client70()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client70(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client70()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client70(void) const
        {
            return (*Value())[ItemName_Client70()];
        }
        bool Get_Client70(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client70()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client70()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client71 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client71(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client71()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client71()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client71(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client71()))
                {
                    Construct_Client71();
                }
                if ((*Value()).hasMember(ItemName_Client71()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client71()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client71(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client71()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client71(void) const
        {
            return (*Value())[ItemName_Client71()];
        }
        bool Get_Client71(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client71()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client71()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client72 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client72(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client72()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client72()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client72(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client72()))
                {
                    Construct_Client72();
                }
                if ((*Value()).hasMember(ItemName_Client72()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client72()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client72(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client72()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client72(void) const
        {
            return (*Value())[ItemName_Client72()];
        }
        bool Get_Client72(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client72()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client72()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client73 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client73(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client73()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client73()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client73(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client73()))
                {
                    Construct_Client73();
                }
                if ((*Value()).hasMember(ItemName_Client73()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client73()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client73(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client73()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client73(void) const
        {
            return (*Value())[ItemName_Client73()];
        }
        bool Get_Client73(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client73()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client73()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client74 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client74(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client74()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client74()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client74(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client74()))
                {
                    Construct_Client74();
                }
                if ((*Value()).hasMember(ItemName_Client74()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client74()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client74(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client74()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client74(void) const
        {
            return (*Value())[ItemName_Client74()];
        }
        bool Get_Client74(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client74()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client74()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client75 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client75(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client75()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client75()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client75(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client75()))
                {
                    Construct_Client75();
                }
                if ((*Value()).hasMember(ItemName_Client75()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client75()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client75(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client75()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client75(void) const
        {
            return (*Value())[ItemName_Client75()];
        }
        bool Get_Client75(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client75()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client75()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client76 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client76(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client76()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client76()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client76(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client76()))
                {
                    Construct_Client76();
                }
                if ((*Value()).hasMember(ItemName_Client76()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client76()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client76(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client76()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client76(void) const
        {
            return (*Value())[ItemName_Client76()];
        }
        bool Get_Client76(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client76()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client76()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client77 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client77(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client77()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client77()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client77(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client77()))
                {
                    Construct_Client77();
                }
                if ((*Value()).hasMember(ItemName_Client77()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client77()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client77(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client77()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client77(void) const
        {
            return (*Value())[ItemName_Client77()];
        }
        bool Get_Client77(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client77()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client77()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client78 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client78(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client78()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client78()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client78(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client78()))
                {
                    Construct_Client78();
                }
                if ((*Value()).hasMember(ItemName_Client78()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client78()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client78(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client78()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client78(void) const
        {
            return (*Value())[ItemName_Client78()];
        }
        bool Get_Client78(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client78()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client78()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client79 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client79(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client79()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client79()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client79(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client79()))
                {
                    Construct_Client79();
                }
                if ((*Value()).hasMember(ItemName_Client79()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client79()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client79(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client79()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client79(void) const
        {
            return (*Value())[ItemName_Client79()];
        }
        bool Get_Client79(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client79()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client79()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client80 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client80(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client80()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client80()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client80(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client80()))
                {
                    Construct_Client80();
                }
                if ((*Value()).hasMember(ItemName_Client80()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client80()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client80(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client80()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client80(void) const
        {
            return (*Value())[ItemName_Client80()];
        }
        bool Get_Client80(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client80()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client80()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client81 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client81(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client81()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client81()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client81(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client81()))
                {
                    Construct_Client81();
                }
                if ((*Value()).hasMember(ItemName_Client81()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client81()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client81(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client81()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client81(void) const
        {
            return (*Value())[ItemName_Client81()];
        }
        bool Get_Client81(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client81()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client81()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client82 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client82(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client82()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client82()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client82(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client82()))
                {
                    Construct_Client82();
                }
                if ((*Value()).hasMember(ItemName_Client82()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client82()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client82(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client82()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client82(void) const
        {
            return (*Value())[ItemName_Client82()];
        }
        bool Get_Client82(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client82()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client82()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client83 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client83(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client83()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client83()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client83(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client83()))
                {
                    Construct_Client83();
                }
                if ((*Value()).hasMember(ItemName_Client83()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client83()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client83(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client83()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client83(void) const
        {
            return (*Value())[ItemName_Client83()];
        }
        bool Get_Client83(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client83()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client83()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client84 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client84(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client84()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client84()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client84(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client84()))
                {
                    Construct_Client84();
                }
                if ((*Value()).hasMember(ItemName_Client84()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client84()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client84(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client84()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client84(void) const
        {
            return (*Value())[ItemName_Client84()];
        }
        bool Get_Client84(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client84()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client84()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client85 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client85(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client85()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client85()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client85(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client85()))
                {
                    Construct_Client85();
                }
                if ((*Value()).hasMember(ItemName_Client85()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client85()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client85(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client85()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client85(void) const
        {
            return (*Value())[ItemName_Client85()];
        }
        bool Get_Client85(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client85()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client85()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client86 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client86(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client86()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client86()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client86(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client86()))
                {
                    Construct_Client86();
                }
                if ((*Value()).hasMember(ItemName_Client86()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client86()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client86(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client86()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client86(void) const
        {
            return (*Value())[ItemName_Client86()];
        }
        bool Get_Client86(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client86()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client86()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client87 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client87(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client87()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client87()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client87(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client87()))
                {
                    Construct_Client87();
                }
                if ((*Value()).hasMember(ItemName_Client87()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client87()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client87(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client87()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client87(void) const
        {
            return (*Value())[ItemName_Client87()];
        }
        bool Get_Client87(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client87()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client87()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client88 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client88(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client88()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client88()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client88(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client88()))
                {
                    Construct_Client88();
                }
                if ((*Value()).hasMember(ItemName_Client88()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client88()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client88(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client88()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client88(void) const
        {
            return (*Value())[ItemName_Client88()];
        }
        bool Get_Client88(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client88()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client88()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client89 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client89(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client89()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client89()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client89(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client89()))
                {
                    Construct_Client89();
                }
                if ((*Value()).hasMember(ItemName_Client89()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client89()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client89(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client89()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client89(void) const
        {
            return (*Value())[ItemName_Client89()];
        }
        bool Get_Client89(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client89()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client89()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client90 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client90(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client90()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client90()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client90(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client90()))
                {
                    Construct_Client90();
                }
                if ((*Value()).hasMember(ItemName_Client90()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client90()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client90(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client90()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client90(void) const
        {
            return (*Value())[ItemName_Client90()];
        }
        bool Get_Client90(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client90()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client90()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client91 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client91(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client91()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client91()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client91(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client91()))
                {
                    Construct_Client91();
                }
                if ((*Value()).hasMember(ItemName_Client91()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client91()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client91(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client91()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client91(void) const
        {
            return (*Value())[ItemName_Client91()];
        }
        bool Get_Client91(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client91()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client91()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client92 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client92(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client92()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client92()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client92(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client92()))
                {
                    Construct_Client92();
                }
                if ((*Value()).hasMember(ItemName_Client92()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client92()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client92(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client92()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client92(void) const
        {
            return (*Value())[ItemName_Client92()];
        }
        bool Get_Client92(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client92()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client92()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client93 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client93(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client93()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client93()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client93(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client93()))
                {
                    Construct_Client93();
                }
                if ((*Value()).hasMember(ItemName_Client93()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client93()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client93(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client93()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client93(void) const
        {
            return (*Value())[ItemName_Client93()];
        }
        bool Get_Client93(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client93()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client93()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client94 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client94(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client94()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client94()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client94(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client94()))
                {
                    Construct_Client94();
                }
                if ((*Value()).hasMember(ItemName_Client94()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client94()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client94(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client94()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client94(void) const
        {
            return (*Value())[ItemName_Client94()];
        }
        bool Get_Client94(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client94()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client94()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client95 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client95(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client95()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client95()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client95(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client95()))
                {
                    Construct_Client95();
                }
                if ((*Value()).hasMember(ItemName_Client95()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client95()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client95(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client95()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client95(void) const
        {
            return (*Value())[ItemName_Client95()];
        }
        bool Get_Client95(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client95()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client95()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client96 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client96(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client96()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client96()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client96(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client96()))
                {
                    Construct_Client96();
                }
                if ((*Value()).hasMember(ItemName_Client96()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client96()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client96(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client96()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client96(void) const
        {
            return (*Value())[ItemName_Client96()];
        }
        bool Get_Client96(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client96()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client96()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client97 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client97(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client97()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client97()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client97(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client97()))
                {
                    Construct_Client97();
                }
                if ((*Value()).hasMember(ItemName_Client97()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client97()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client97(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client97()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client97(void) const
        {
            return (*Value())[ItemName_Client97()];
        }
        bool Get_Client97(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client97()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client97()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client98 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client98(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client98()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client98()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client98(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client98()))
                {
                    Construct_Client98();
                }
                if ((*Value()).hasMember(ItemName_Client98()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client98()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client98(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client98()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client98(void) const
        {
            return (*Value())[ItemName_Client98()];
        }
        bool Get_Client98(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client98()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client98()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client99 (Type: "CType_Config_Universal_Adapter_Network_Client")
    protected:
        void Construct_Client99(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client99()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client99()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client99(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client99()))
                {
                    Construct_Client99();
                }
                if ((*Value()).hasMember(ItemName_Client99()))
                {
                    CType_Config_Universal_Adapter_Network_Client InitValue;
                    (*Value())[ItemName_Client99()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client99(const CType_Config_Universal_Adapter_Network_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client99()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network_Client Get_Client99(void) const
        {
            return (*Value())[ItemName_Client99()];
        }
        bool Get_Client99(CType_Config_Universal_Adapter_Network_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client99()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client99()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Network


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Fieldbus
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Fieldbus : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_CycleFrequencyDivider(void)
        {
            static std::string str("CycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Fieldbus");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10006");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Fieldbus(void)
    {
        try
        {
            Construct_Protocol();
            Construct_CycleFrequencyDivider();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Fieldbus(const CType_Config_Universal_Adapter_Fieldbus& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Fieldbus(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Protocol();
            Construct_CycleFrequencyDivider();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Fieldbus(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Protocol();
            Initialize_CycleFrequencyDivider();
            Initialize_WatchdogTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    Construct_CycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_CycleFrequencyDivider()];
        }
        bool Get_CycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Fieldbus


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_FTP_Client_Connection
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_FTP_Client_Connection : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ServerPort(void)
        {
            static std::string str("ServerPort");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_Password(void)
        {
            static std::string str("Password");
            return str;
        }
    public:
        static std::string const& ItemName_EnablePassiveMode(void)
        {
            static std::string str("EnablePassiveMode");
            return str;
        }
    public:
        static std::string const& ItemName_Directory(void)
        {
            static std::string str("Directory");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_FTP_Client_Connection");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10007");
        return str;
    }
public:
    CType_Config_Universal_Adapter_FTP_Client_Connection(void)
    {
        try
        {
            Construct_Type();
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_UserName();
            Construct_Password();
            Construct_EnablePassiveMode();
            Construct_Directory();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_FTP_Client_Connection(const CType_Config_Universal_Adapter_FTP_Client_Connection& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_FTP_Client_Connection(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_UserName();
            Construct_Password();
            Construct_EnablePassiveMode();
            Construct_Directory();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_FTP_Client_Connection(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_ServerAddress();
            Initialize_ServerPort();
            Initialize_UserName();
            Initialize_Password();
            Initialize_EnablePassiveMode();
            Initialize_Directory();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    Construct_ServerPort();
                }
                if ((*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerPort(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ServerPort(void) const
        {
            return (*Value())[ItemName_ServerPort()];
        }
        bool Get_ServerPort(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Password (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    Construct_Password();
                }
                if ((*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Password(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Password()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Password(void) const
        {
            return (*Value())[ItemName_Password()];
        }
        bool Get_Password(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Password()]).valid())
                {
                    GetValue = (*Value())[ItemName_Password()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnablePassiveMode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnablePassiveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnablePassiveMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnablePassiveMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnablePassiveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnablePassiveMode()))
                {
                    Construct_EnablePassiveMode();
                }
                if ((*Value()).hasMember(ItemName_EnablePassiveMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnablePassiveMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnablePassiveMode(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnablePassiveMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnablePassiveMode(void) const
        {
            return (*Value())[ItemName_EnablePassiveMode()];
        }
        bool Get_EnablePassiveMode(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnablePassiveMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnablePassiveMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Directory (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Directory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Directory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Directory()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Directory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Directory()))
                {
                    Construct_Directory();
                }
                if ((*Value()).hasMember(ItemName_Directory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Directory()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Directory(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Directory()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Directory(void) const
        {
            return (*Value())[ItemName_Directory()];
        }
        bool Get_Directory(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Directory()]).valid())
                {
                    GetValue = (*Value())[ItemName_Directory()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_FTP_Client_Connection


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_FTP_Server
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_FTP_Server : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Dummy(void)
        {
            static std::string str("Dummy");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_FTP_Server");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10008");
        return str;
    }
public:
    CType_Config_Universal_Adapter_FTP_Server(void)
    {
        try
        {
            Construct_Dummy();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_FTP_Server(const CType_Config_Universal_Adapter_FTP_Server& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_FTP_Server(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Dummy();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_FTP_Server(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Dummy();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Dummy (Type: "bool")
protected:
    void Construct_Dummy(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Dummy()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_Dummy()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Dummy(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Dummy()))
                {
                    Construct_Dummy();
                }
                if ((*Value()).hasMember(ItemName_Dummy()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_Dummy()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Dummy(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_Dummy()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_Dummy(void) const
        {
            bool GetValue = (*Value())[ItemName_Dummy()];
            return (bool)GetValue;
        }
        bool Get_Dummy(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Dummy()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_Dummy()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_FTP_Server


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_FTP_Client
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_FTP_Client : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Mode(void)
        {
            static std::string str("Mode");
            return str;
        }
    public:
        static std::string const& ItemName_ConnectionTimeout(void)
        {
            static std::string str("ConnectionTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
    public:
        static std::string const& ItemName_KeepAliveInterval(void)
        {
            static std::string str("KeepAliveInterval");
            return str;
        }
    public:
        static std::string const& ItemName_ConnectionRetries(void)
        {
            static std::string str("ConnectionRetries");
            return str;
        }
    public:
        static std::string const& ItemName_HandleInterval(void)
        {
            static std::string str("HandleInterval");
            return str;
        }
    public:
        static std::string const& ItemName_ConnectionCount(void)
        {
            static std::string str("ConnectionCount");
            return str;
        }
    public:
        static std::string const& ItemName_Connection0(void)
        {
            static std::string str("Connection0");
            return str;
        }
    public:
        static std::string const& ItemName_Connection1(void)
        {
            static std::string str("Connection1");
            return str;
        }
    public:
        static std::string const& ItemName_Connection2(void)
        {
            static std::string str("Connection2");
            return str;
        }
    public:
        static std::string const& ItemName_Connection3(void)
        {
            static std::string str("Connection3");
            return str;
        }
    public:
        static std::string const& ItemName_Connection4(void)
        {
            static std::string str("Connection4");
            return str;
        }
    public:
        static std::string const& ItemName_Connection5(void)
        {
            static std::string str("Connection5");
            return str;
        }
    public:
        static std::string const& ItemName_Connection6(void)
        {
            static std::string str("Connection6");
            return str;
        }
    public:
        static std::string const& ItemName_Connection7(void)
        {
            static std::string str("Connection7");
            return str;
        }
    public:
        static std::string const& ItemName_Connection8(void)
        {
            static std::string str("Connection8");
            return str;
        }
    public:
        static std::string const& ItemName_Connection9(void)
        {
            static std::string str("Connection9");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_FTP_Client");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10009");
        return str;
    }
public:
    CType_Config_Universal_Adapter_FTP_Client(void)
    {
        try
        {
            Construct_Mode();
            Construct_ConnectionTimeout();
            Construct_Timeout();
            Construct_KeepAliveInterval();
            Construct_ConnectionRetries();
            Construct_HandleInterval();
            Construct_ConnectionCount();
            Construct_Connection0();
            Construct_Connection1();
            Construct_Connection2();
            Construct_Connection3();
            Construct_Connection4();
            Construct_Connection5();
            Construct_Connection6();
            Construct_Connection7();
            Construct_Connection8();
            Construct_Connection9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_FTP_Client(const CType_Config_Universal_Adapter_FTP_Client& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_FTP_Client(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Mode();
            Construct_ConnectionTimeout();
            Construct_Timeout();
            Construct_KeepAliveInterval();
            Construct_ConnectionRetries();
            Construct_HandleInterval();
            Construct_ConnectionCount();
            Construct_Connection0();
            Construct_Connection1();
            Construct_Connection2();
            Construct_Connection3();
            Construct_Connection4();
            Construct_Connection5();
            Construct_Connection6();
            Construct_Connection7();
            Construct_Connection8();
            Construct_Connection9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_FTP_Client(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Mode();
            Initialize_ConnectionTimeout();
            Initialize_Timeout();
            Initialize_KeepAliveInterval();
            Initialize_ConnectionRetries();
            Initialize_HandleInterval();
            Initialize_ConnectionCount();
            Initialize_Connection0();
            Initialize_Connection1();
            Initialize_Connection2();
            Initialize_Connection3();
            Initialize_Connection4();
            Initialize_Connection5();
            Initialize_Connection6();
            Initialize_Connection7();
            Initialize_Connection8();
            Initialize_Connection9();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Mode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    Construct_Mode();
                }
                if ((*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Mode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Mode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Mode(void) const
        {
            return (*Value())[ItemName_Mode()];
        }
        bool Get_Mode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Mode()]).valid())
                {
                    GetValue = (*Value())[ItemName_Mode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConnectionTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ConnectionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConnectionTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    Construct_ConnectionTimeout();
                }
                if ((*Value()).hasMember(ItemName_ConnectionTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConnectionTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ConnectionTimeout(void) const
        {
            return (*Value())[ItemName_ConnectionTimeout()];
        }
        bool Get_ConnectionTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item KeepAliveInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_KeepAliveInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_KeepAliveInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_KeepAliveInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    Construct_KeepAliveInterval();
                }
                if ((*Value()).hasMember(ItemName_KeepAliveInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_KeepAliveInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_KeepAliveInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_KeepAliveInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_KeepAliveInterval(void) const
        {
            return (*Value())[ItemName_KeepAliveInterval()];
        }
        bool Get_KeepAliveInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_KeepAliveInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_KeepAliveInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConnectionRetries (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ConnectionRetries(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionRetries()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ConnectionRetries()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionRetries(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionRetries()))
                {
                    Construct_ConnectionRetries();
                }
                if ((*Value()).hasMember(ItemName_ConnectionRetries()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ConnectionRetries()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionRetries(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionRetries()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ConnectionRetries(void) const
        {
            return (*Value())[ItemName_ConnectionRetries()];
        }
        bool Get_ConnectionRetries(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionRetries()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionRetries()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HandleInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    Construct_HandleInterval();
                }
                if ((*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandleInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandleInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandleInterval(void) const
        {
            return (*Value())[ItemName_HandleInterval()];
        }
        bool Get_HandleInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandleInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandleInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConnectionCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ConnectionCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ConnectionCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionCount()))
                {
                    Construct_ConnectionCount();
                }
                if ((*Value()).hasMember(ItemName_ConnectionCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ConnectionCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ConnectionCount(void) const
        {
            return (*Value())[ItemName_ConnectionCount()];
        }
        bool Get_ConnectionCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection0 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection0()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection0()))
                {
                    Construct_Connection0();
                }
                if ((*Value()).hasMember(ItemName_Connection0()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection0(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection0(void) const
        {
            return (*Value())[ItemName_Connection0()];
        }
        bool Get_Connection0(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection1 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection1()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection1()))
                {
                    Construct_Connection1();
                }
                if ((*Value()).hasMember(ItemName_Connection1()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection1(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection1(void) const
        {
            return (*Value())[ItemName_Connection1()];
        }
        bool Get_Connection1(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection2 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection2()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection2()))
                {
                    Construct_Connection2();
                }
                if ((*Value()).hasMember(ItemName_Connection2()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection2(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection2(void) const
        {
            return (*Value())[ItemName_Connection2()];
        }
        bool Get_Connection2(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection3 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection3()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection3()))
                {
                    Construct_Connection3();
                }
                if ((*Value()).hasMember(ItemName_Connection3()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection3(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection3(void) const
        {
            return (*Value())[ItemName_Connection3()];
        }
        bool Get_Connection3(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection4 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection4()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection4()))
                {
                    Construct_Connection4();
                }
                if ((*Value()).hasMember(ItemName_Connection4()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection4(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection4(void) const
        {
            return (*Value())[ItemName_Connection4()];
        }
        bool Get_Connection4(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection5 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection5()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection5()))
                {
                    Construct_Connection5();
                }
                if ((*Value()).hasMember(ItemName_Connection5()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection5(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection5(void) const
        {
            return (*Value())[ItemName_Connection5()];
        }
        bool Get_Connection5(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection5()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection6 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection6()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection6()))
                {
                    Construct_Connection6();
                }
                if ((*Value()).hasMember(ItemName_Connection6()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection6(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection6(void) const
        {
            return (*Value())[ItemName_Connection6()];
        }
        bool Get_Connection6(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection6()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection7 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection7()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection7()))
                {
                    Construct_Connection7();
                }
                if ((*Value()).hasMember(ItemName_Connection7()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection7(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection7(void) const
        {
            return (*Value())[ItemName_Connection7()];
        }
        bool Get_Connection7(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection7()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection8 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection8()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection8()))
                {
                    Construct_Connection8();
                }
                if ((*Value()).hasMember(ItemName_Connection8()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection8(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection8(void) const
        {
            return (*Value())[ItemName_Connection8()];
        }
        bool Get_Connection8(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection8()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection9 (Type: "CType_Config_Universal_Adapter_FTP_Client_Connection")
    protected:
        void Construct_Connection9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection9()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection9()))
                {
                    Construct_Connection9();
                }
                if ((*Value()).hasMember(ItemName_Connection9()))
                {
                    CType_Config_Universal_Adapter_FTP_Client_Connection InitValue;
                    (*Value())[ItemName_Connection9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection9(const CType_Config_Universal_Adapter_FTP_Client_Connection& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client_Connection Get_Connection9(void) const
        {
            return (*Value())[ItemName_Connection9()];
        }
        bool Get_Connection9(CType_Config_Universal_Adapter_FTP_Client_Connection& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection9()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_FTP_Client


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_FTP
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_FTP : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Server(void)
        {
            static std::string str("Server");
            return str;
        }
    public:
        static std::string const& ItemName_Client(void)
        {
            static std::string str("Client");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_FTP");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10010");
        return str;
    }
public:
    CType_Config_Universal_Adapter_FTP(void)
    {
        try
        {
            Construct_Server();
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_FTP(const CType_Config_Universal_Adapter_FTP& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_FTP(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Server();
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_FTP(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Server();
            Initialize_Client();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Server (Type: "CType_Config_Universal_Adapter_FTP_Server")
    protected:
        void Construct_Server(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Server()))
                {
                    CType_Config_Universal_Adapter_FTP_Server InitValue;
                    (*Value())[ItemName_Server()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Server(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Server()))
                {
                    Construct_Server();
                }
                if ((*Value()).hasMember(ItemName_Server()))
                {
                    CType_Config_Universal_Adapter_FTP_Server InitValue;
                    (*Value())[ItemName_Server()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Server(const CType_Config_Universal_Adapter_FTP_Server& SetValue)
        {
            try
            {
                (*Value())[ItemName_Server()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Server Get_Server(void) const
        {
            return (*Value())[ItemName_Server()];
        }
        bool Get_Server(CType_Config_Universal_Adapter_FTP_Server& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Server()]).valid())
                {
                    GetValue = (*Value())[ItemName_Server()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Client (Type: "CType_Config_Universal_Adapter_FTP_Client")
    protected:
        void Construct_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_FTP_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    Construct_Client();
                }
                if ((*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_FTP_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client(const CType_Config_Universal_Adapter_FTP_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP_Client Get_Client(void) const
        {
            return (*Value())[ItemName_Client()];
        }
        bool Get_Client(CType_Config_Universal_Adapter_FTP_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_FTP


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Mail_Client
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Mail_Client : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ServerPort(void)
        {
            static std::string str("ServerPort");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_Password(void)
        {
            static std::string str("Password");
            return str;
        }
    public:
        static std::string const& ItemName_OwnEmailAddress(void)
        {
            static std::string str("OwnEmailAddress");
            return str;
        }
    public:
        static std::string const& ItemName_OwnDomainName(void)
        {
            static std::string str("OwnDomainName");
            return str;
        }
    public:
        static std::string const& ItemName_EmailSignature(void)
        {
            static std::string str("EmailSignature");
            return str;
        }
    public:
        static std::string const& ItemName_EmailAddresses(void)
        {
            static std::string str("EmailAddresses");
            return str;
        }
    public:
        static std::string const& ItemName_EmailSubjects(void)
        {
            static std::string str("EmailSubjects");
            return str;
        }
    public:
        static std::string const& ItemName_EmailBodies(void)
        {
            static std::string str("EmailBodies");
            return str;
        }
    public:
        static std::string const& ItemName_EmailBodiesIndexed(void)
        {
            static std::string str("EmailBodiesIndexed");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Mail_Client");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10011");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Mail_Client(void)
    {
        try
        {
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_UserName();
            Construct_Password();
            Construct_OwnEmailAddress();
            Construct_OwnDomainName();
            Construct_EmailSignature();
            Construct_EmailAddresses();
            Construct_EmailSubjects();
            Construct_EmailBodies();
            Construct_EmailBodiesIndexed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Mail_Client(const CType_Config_Universal_Adapter_Mail_Client& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Mail_Client(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_UserName();
            Construct_Password();
            Construct_OwnEmailAddress();
            Construct_OwnDomainName();
            Construct_EmailSignature();
            Construct_EmailAddresses();
            Construct_EmailSubjects();
            Construct_EmailBodies();
            Construct_EmailBodiesIndexed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Mail_Client(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ServerAddress();
            Initialize_ServerPort();
            Initialize_UserName();
            Initialize_Password();
            Initialize_OwnEmailAddress();
            Initialize_OwnDomainName();
            Initialize_EmailSignature();
            Initialize_EmailAddresses();
            Initialize_EmailSubjects();
            Initialize_EmailBodies();
            Initialize_EmailBodiesIndexed();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    Construct_ServerPort();
                }
                if ((*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerPort(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ServerPort(void) const
        {
            return (*Value())[ItemName_ServerPort()];
        }
        bool Get_ServerPort(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Password (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    Construct_Password();
                }
                if ((*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Password(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Password()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Password(void) const
        {
            return (*Value())[ItemName_Password()];
        }
        bool Get_Password(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Password()]).valid())
                {
                    GetValue = (*Value())[ItemName_Password()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnEmailAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_OwnEmailAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnEmailAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OwnEmailAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnEmailAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnEmailAddress()))
                {
                    Construct_OwnEmailAddress();
                }
                if ((*Value()).hasMember(ItemName_OwnEmailAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OwnEmailAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnEmailAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnEmailAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_OwnEmailAddress(void) const
        {
            return (*Value())[ItemName_OwnEmailAddress()];
        }
        bool Get_OwnEmailAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnEmailAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnEmailAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnDomainName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_OwnDomainName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnDomainName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OwnDomainName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnDomainName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnDomainName()))
                {
                    Construct_OwnDomainName();
                }
                if ((*Value()).hasMember(ItemName_OwnDomainName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_OwnDomainName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnDomainName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnDomainName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_OwnDomainName(void) const
        {
            return (*Value())[ItemName_OwnDomainName()];
        }
        bool Get_OwnDomainName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnDomainName()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnDomainName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EmailSignature (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_EmailSignature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailSignature()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_EmailSignature()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EmailSignature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailSignature()))
                {
                    Construct_EmailSignature();
                }
                if ((*Value()).hasMember(ItemName_EmailSignature()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_EmailSignature()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EmailSignature(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EmailSignature()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_EmailSignature(void) const
        {
            return (*Value())[ItemName_EmailSignature()];
        }
        bool Get_EmailSignature(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EmailSignature()]).valid())
                {
                    GetValue = (*Value())[ItemName_EmailSignature()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EmailAddresses (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_EmailAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailAddresses()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EmailAddresses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailAddresses()))
                {
                    Construct_EmailAddresses();
                }
                if ((*Value()).hasMember(ItemName_EmailAddresses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailAddresses()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EmailAddresses(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EmailAddresses()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_EmailAddresses(void) const
        {
            return (*Value())[ItemName_EmailAddresses()];
        }
        bool Get_EmailAddresses(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EmailAddresses()]).valid())
                {
                    GetValue = (*Value())[ItemName_EmailAddresses()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EmailSubjects (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_EmailSubjects(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailSubjects()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailSubjects()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EmailSubjects(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailSubjects()))
                {
                    Construct_EmailSubjects();
                }
                if ((*Value()).hasMember(ItemName_EmailSubjects()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailSubjects()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EmailSubjects(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EmailSubjects()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_EmailSubjects(void) const
        {
            return (*Value())[ItemName_EmailSubjects()];
        }
        bool Get_EmailSubjects(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EmailSubjects()]).valid())
                {
                    GetValue = (*Value())[ItemName_EmailSubjects()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EmailBodies (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_EmailBodies(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailBodies()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailBodies()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EmailBodies(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailBodies()))
                {
                    Construct_EmailBodies();
                }
                if ((*Value()).hasMember(ItemName_EmailBodies()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailBodies()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EmailBodies(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EmailBodies()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_EmailBodies(void) const
        {
            return (*Value())[ItemName_EmailBodies()];
        }
        bool Get_EmailBodies(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EmailBodies()]).valid())
                {
                    GetValue = (*Value())[ItemName_EmailBodies()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EmailBodiesIndexed (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_EmailBodiesIndexed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailBodiesIndexed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailBodiesIndexed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EmailBodiesIndexed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EmailBodiesIndexed()))
                {
                    Construct_EmailBodiesIndexed();
                }
                if ((*Value()).hasMember(ItemName_EmailBodiesIndexed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_EmailBodiesIndexed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EmailBodiesIndexed(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EmailBodiesIndexed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_EmailBodiesIndexed(void) const
        {
            return (*Value())[ItemName_EmailBodiesIndexed()];
        }
        bool Get_EmailBodiesIndexed(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EmailBodiesIndexed()]).valid())
                {
                    GetValue = (*Value())[ItemName_EmailBodiesIndexed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Mail_Client


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_Mail
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_Mail : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Client(void)
        {
            static std::string str("Client");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_Mail");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10012");
        return str;
    }
public:
    CType_Config_Universal_Adapter_Mail(void)
    {
        try
        {
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_Mail(const CType_Config_Universal_Adapter_Mail& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_Mail(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_Mail(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Client();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Client (Type: "CType_Config_Universal_Adapter_Mail_Client")
    protected:
        void Construct_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_Mail_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    Construct_Client();
                }
                if ((*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_Mail_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client(const CType_Config_Universal_Adapter_Mail_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Mail_Client Get_Client(void) const
        {
            return (*Value())[ItemName_Client()];
        }
        bool Get_Client(CType_Config_Universal_Adapter_Mail_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_Mail


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_NTP_Client
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_NTP_Client : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Mode(void)
        {
            static std::string str("Mode");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_TimezoneOffset(void)
        {
            static std::string str("TimezoneOffset");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_NTP_Client");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10013");
        return str;
    }
public:
    CType_Config_Universal_Adapter_NTP_Client(void)
    {
        try
        {
            Construct_Mode();
            Construct_ServerAddress();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_NTP_Client(const CType_Config_Universal_Adapter_NTP_Client& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_NTP_Client(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Mode();
            Construct_ServerAddress();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_NTP_Client(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Mode();
            Initialize_ServerAddress();
            Initialize_TimezoneOffset();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Mode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    Construct_Mode();
                }
                if ((*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Mode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Mode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Mode(void) const
        {
            return (*Value())[ItemName_Mode()];
        }
        bool Get_Mode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Mode()]).valid())
                {
                    GetValue = (*Value())[ItemName_Mode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimezoneOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    Construct_TimezoneOffset();
                }
                if ((*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimezoneOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimezoneOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimezoneOffset(void) const
        {
            return (*Value())[ItemName_TimezoneOffset()];
        }
        bool Get_TimezoneOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimezoneOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimezoneOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_NTP_Client


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_NTP
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_NTP : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Client(void)
        {
            static std::string str("Client");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_NTP");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10014");
        return str;
    }
public:
    CType_Config_Universal_Adapter_NTP(void)
    {
        try
        {
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_NTP(const CType_Config_Universal_Adapter_NTP& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_NTP(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Client();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_NTP(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Client();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Client (Type: "CType_Config_Universal_Adapter_NTP_Client")
    protected:
        void Construct_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_NTP_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Client(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Client()))
                {
                    Construct_Client();
                }
                if ((*Value()).hasMember(ItemName_Client()))
                {
                    CType_Config_Universal_Adapter_NTP_Client InitValue;
                    (*Value())[ItemName_Client()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Client(const CType_Config_Universal_Adapter_NTP_Client& SetValue)
        {
            try
            {
                (*Value())[ItemName_Client()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NTP_Client Get_Client(void) const
        {
            return (*Value())[ItemName_Client()];
        }
        bool Get_Client(CType_Config_Universal_Adapter_NTP_Client& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Client()]).valid())
                {
                    GetValue = (*Value())[ItemName_Client()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_NTP


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_NetDrive_Drive
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_NetDrive_Drive : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_Password(void)
        {
            static std::string str("Password");
            return str;
        }
    public:
        static std::string const& ItemName_Directory(void)
        {
            static std::string str("Directory");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_NetDrive_Drive");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10015");
        return str;
    }
public:
    CType_Config_Universal_Adapter_NetDrive_Drive(void)
    {
        try
        {
            Construct_Description();
            Construct_ServerAddress();
            Construct_UserName();
            Construct_Password();
            Construct_Directory();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_NetDrive_Drive(const CType_Config_Universal_Adapter_NetDrive_Drive& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_NetDrive_Drive(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Description();
            Construct_ServerAddress();
            Construct_UserName();
            Construct_Password();
            Construct_Directory();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_NetDrive_Drive(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Description();
            Initialize_ServerAddress();
            Initialize_UserName();
            Initialize_Password();
            Initialize_Directory();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Password (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Password(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Password()))
                {
                    Construct_Password();
                }
                if ((*Value()).hasMember(ItemName_Password()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Password()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Password(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Password()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Password(void) const
        {
            return (*Value())[ItemName_Password()];
        }
        bool Get_Password(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Password()]).valid())
                {
                    GetValue = (*Value())[ItemName_Password()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Directory (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Directory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Directory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Directory()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Directory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Directory()))
                {
                    Construct_Directory();
                }
                if ((*Value()).hasMember(ItemName_Directory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Directory()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Directory(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Directory()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Directory(void) const
        {
            return (*Value())[ItemName_Directory()];
        }
        bool Get_Directory(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Directory()]).valid())
                {
                    GetValue = (*Value())[ItemName_Directory()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_NetDrive_Drive


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_NetDrive
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_NetDrive : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DriveCount(void)
        {
            static std::string str("DriveCount");
            return str;
        }
    public:
        static std::string const& ItemName_Drive0(void)
        {
            static std::string str("Drive0");
            return str;
        }
    public:
        static std::string const& ItemName_Drive1(void)
        {
            static std::string str("Drive1");
            return str;
        }
    public:
        static std::string const& ItemName_Drive2(void)
        {
            static std::string str("Drive2");
            return str;
        }
    public:
        static std::string const& ItemName_Drive3(void)
        {
            static std::string str("Drive3");
            return str;
        }
    public:
        static std::string const& ItemName_Drive4(void)
        {
            static std::string str("Drive4");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_NetDrive");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10016");
        return str;
    }
public:
    CType_Config_Universal_Adapter_NetDrive(void)
    {
        try
        {
            Construct_DriveCount();
            Construct_Drive0();
            Construct_Drive1();
            Construct_Drive2();
            Construct_Drive3();
            Construct_Drive4();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_NetDrive(const CType_Config_Universal_Adapter_NetDrive& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_NetDrive(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DriveCount();
            Construct_Drive0();
            Construct_Drive1();
            Construct_Drive2();
            Construct_Drive3();
            Construct_Drive4();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_NetDrive(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DriveCount();
            Initialize_Drive0();
            Initialize_Drive1();
            Initialize_Drive2();
            Initialize_Drive3();
            Initialize_Drive4();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DriveCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_DriveCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DriveCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DriveCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DriveCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DriveCount()))
                {
                    Construct_DriveCount();
                }
                if ((*Value()).hasMember(ItemName_DriveCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DriveCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DriveCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DriveCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_DriveCount(void) const
        {
            return (*Value())[ItemName_DriveCount()];
        }
        bool Get_DriveCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DriveCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_DriveCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Drive0 (Type: "CType_Config_Universal_Adapter_NetDrive_Drive")
    protected:
        void Construct_Drive0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive0()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Drive0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive0()))
                {
                    Construct_Drive0();
                }
                if ((*Value()).hasMember(ItemName_Drive0()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Drive0(const CType_Config_Universal_Adapter_NetDrive_Drive& SetValue)
        {
            try
            {
                (*Value())[ItemName_Drive0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive_Drive Get_Drive0(void) const
        {
            return (*Value())[ItemName_Drive0()];
        }
        bool Get_Drive0(CType_Config_Universal_Adapter_NetDrive_Drive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Drive0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Drive0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Drive1 (Type: "CType_Config_Universal_Adapter_NetDrive_Drive")
    protected:
        void Construct_Drive1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive1()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Drive1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive1()))
                {
                    Construct_Drive1();
                }
                if ((*Value()).hasMember(ItemName_Drive1()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Drive1(const CType_Config_Universal_Adapter_NetDrive_Drive& SetValue)
        {
            try
            {
                (*Value())[ItemName_Drive1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive_Drive Get_Drive1(void) const
        {
            return (*Value())[ItemName_Drive1()];
        }
        bool Get_Drive1(CType_Config_Universal_Adapter_NetDrive_Drive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Drive1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Drive1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Drive2 (Type: "CType_Config_Universal_Adapter_NetDrive_Drive")
    protected:
        void Construct_Drive2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive2()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Drive2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive2()))
                {
                    Construct_Drive2();
                }
                if ((*Value()).hasMember(ItemName_Drive2()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Drive2(const CType_Config_Universal_Adapter_NetDrive_Drive& SetValue)
        {
            try
            {
                (*Value())[ItemName_Drive2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive_Drive Get_Drive2(void) const
        {
            return (*Value())[ItemName_Drive2()];
        }
        bool Get_Drive2(CType_Config_Universal_Adapter_NetDrive_Drive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Drive2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Drive2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Drive3 (Type: "CType_Config_Universal_Adapter_NetDrive_Drive")
    protected:
        void Construct_Drive3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive3()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Drive3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive3()))
                {
                    Construct_Drive3();
                }
                if ((*Value()).hasMember(ItemName_Drive3()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Drive3(const CType_Config_Universal_Adapter_NetDrive_Drive& SetValue)
        {
            try
            {
                (*Value())[ItemName_Drive3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive_Drive Get_Drive3(void) const
        {
            return (*Value())[ItemName_Drive3()];
        }
        bool Get_Drive3(CType_Config_Universal_Adapter_NetDrive_Drive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Drive3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Drive3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Drive4 (Type: "CType_Config_Universal_Adapter_NetDrive_Drive")
    protected:
        void Construct_Drive4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive4()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Drive4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Drive4()))
                {
                    Construct_Drive4();
                }
                if ((*Value()).hasMember(ItemName_Drive4()))
                {
                    CType_Config_Universal_Adapter_NetDrive_Drive InitValue;
                    (*Value())[ItemName_Drive4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Drive4(const CType_Config_Universal_Adapter_NetDrive_Drive& SetValue)
        {
            try
            {
                (*Value())[ItemName_Drive4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive_Drive Get_Drive4(void) const
        {
            return (*Value())[ItemName_Drive4()];
        }
        bool Get_Drive4(CType_Config_Universal_Adapter_NetDrive_Drive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Drive4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Drive4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_NetDrive


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_USBDevice_Device
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_USBDevice_Device : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
    public:
        static std::string const& ItemName_AnswerDelay(void)
        {
            static std::string str("AnswerDelay");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_HandleInterval(void)
        {
            static std::string str("HandleInterval");
            return str;
        }
    public:
        static std::string const& ItemName_IdleTime(void)
        {
            static std::string str("IdleTime");
            return str;
        }
    public:
        static std::string const& ItemName_TimezoneOffset(void)
        {
            static std::string str("TimezoneOffset");
            return str;
        }
    public:
        static std::string const& ItemName_EnableTimeSynchronization(void)
        {
            static std::string str("EnableTimeSynchronization");
            return str;
        }
    public:
        static std::string const& ItemName_DataBaudrate(void)
        {
            static std::string str("DataBaudrate");
            return str;
        }
    public:
        static std::string const& ItemName_EnableDataBaudrate(void)
        {
            static std::string str("EnableDataBaudrate");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_USBDevice_Device");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10017");
        return str;
    }
public:
    CType_Config_Universal_Adapter_USBDevice_Device(void)
    {
        try
        {
            Construct_Port();
            Construct_Type();
            Construct_Address();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_Timeout();
            Construct_WatchdogTimeout();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_TimezoneOffset();
            Construct_EnableTimeSynchronization();
            Construct_DataBaudrate();
            Construct_EnableDataBaudrate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_USBDevice_Device(const CType_Config_Universal_Adapter_USBDevice_Device& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_USBDevice_Device(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Type();
            Construct_Address();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_Timeout();
            Construct_WatchdogTimeout();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_TimezoneOffset();
            Construct_EnableTimeSynchronization();
            Construct_DataBaudrate();
            Construct_EnableDataBaudrate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_USBDevice_Device(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Type();
            Initialize_Address();
            Initialize_Baudrate();
            Initialize_CharFormat();
            Initialize_AnswerDelay();
            Initialize_Timeout();
            Initialize_WatchdogTimeout();
            Initialize_HandleInterval();
            Initialize_IdleTime();
            Initialize_TimezoneOffset();
            Initialize_EnableTimeSynchronization();
            Initialize_DataBaudrate();
            Initialize_EnableDataBaudrate();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Address (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Address(void) const
        {
            return (*Value())[ItemName_Address()];
        }
        bool Get_Address(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (*Value())[ItemName_Address()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnswerDelay (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    Construct_AnswerDelay();
                }
                if ((*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnswerDelay(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnswerDelay()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_AnswerDelay(void) const
        {
            return (*Value())[ItemName_AnswerDelay()];
        }
        bool Get_AnswerDelay(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnswerDelay()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnswerDelay()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HandleInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    Construct_HandleInterval();
                }
                if ((*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandleInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandleInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandleInterval(void) const
        {
            return (*Value())[ItemName_HandleInterval()];
        }
        bool Get_HandleInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandleInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandleInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IdleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    Construct_IdleTime();
                }
                if ((*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IdleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_IdleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_IdleTime(void) const
        {
            return (*Value())[ItemName_IdleTime()];
        }
        bool Get_IdleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IdleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_IdleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimezoneOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    Construct_TimezoneOffset();
                }
                if ((*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimezoneOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimezoneOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimezoneOffset(void) const
        {
            return (*Value())[ItemName_TimezoneOffset()];
        }
        bool Get_TimezoneOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimezoneOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimezoneOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableTimeSynchronization (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableTimeSynchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableTimeSynchronization()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableTimeSynchronization()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableTimeSynchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableTimeSynchronization()))
                {
                    Construct_EnableTimeSynchronization();
                }
                if ((*Value()).hasMember(ItemName_EnableTimeSynchronization()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableTimeSynchronization()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableTimeSynchronization(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableTimeSynchronization()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableTimeSynchronization(void) const
        {
            return (*Value())[ItemName_EnableTimeSynchronization()];
        }
        bool Get_EnableTimeSynchronization(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableTimeSynchronization()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableTimeSynchronization()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataBaudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DataBaudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBaudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataBaudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataBaudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBaudrate()))
                {
                    Construct_DataBaudrate();
                }
                if ((*Value()).hasMember(ItemName_DataBaudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataBaudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataBaudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataBaudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DataBaudrate(void) const
        {
            return (*Value())[ItemName_DataBaudrate()];
        }
        bool Get_DataBaudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataBaudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataBaudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableDataBaudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableDataBaudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDataBaudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDataBaudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableDataBaudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableDataBaudrate()))
                {
                    Construct_EnableDataBaudrate();
                }
                if ((*Value()).hasMember(ItemName_EnableDataBaudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableDataBaudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableDataBaudrate(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableDataBaudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableDataBaudrate(void) const
        {
            return (*Value())[ItemName_EnableDataBaudrate()];
        }
        bool Get_EnableDataBaudrate(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableDataBaudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableDataBaudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_USBDevice_Device


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_USBDevice
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_USBDevice : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DeviceCount(void)
        {
            static std::string str("DeviceCount");
            return str;
        }
    public:
        static std::string const& ItemName_Device0(void)
        {
            static std::string str("Device0");
            return str;
        }
    public:
        static std::string const& ItemName_Device1(void)
        {
            static std::string str("Device1");
            return str;
        }
    public:
        static std::string const& ItemName_Device2(void)
        {
            static std::string str("Device2");
            return str;
        }
    public:
        static std::string const& ItemName_Device3(void)
        {
            static std::string str("Device3");
            return str;
        }
    public:
        static std::string const& ItemName_Device4(void)
        {
            static std::string str("Device4");
            return str;
        }
    public:
        static std::string const& ItemName_Device5(void)
        {
            static std::string str("Device5");
            return str;
        }
    public:
        static std::string const& ItemName_Device6(void)
        {
            static std::string str("Device6");
            return str;
        }
    public:
        static std::string const& ItemName_Device7(void)
        {
            static std::string str("Device7");
            return str;
        }
    public:
        static std::string const& ItemName_Device8(void)
        {
            static std::string str("Device8");
            return str;
        }
    public:
        static std::string const& ItemName_Device9(void)
        {
            static std::string str("Device9");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_USBDevice");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10018");
        return str;
    }
public:
    CType_Config_Universal_Adapter_USBDevice(void)
    {
        try
        {
            Construct_DeviceCount();
            Construct_Device0();
            Construct_Device1();
            Construct_Device2();
            Construct_Device3();
            Construct_Device4();
            Construct_Device5();
            Construct_Device6();
            Construct_Device7();
            Construct_Device8();
            Construct_Device9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_USBDevice(const CType_Config_Universal_Adapter_USBDevice& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_USBDevice(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DeviceCount();
            Construct_Device0();
            Construct_Device1();
            Construct_Device2();
            Construct_Device3();
            Construct_Device4();
            Construct_Device5();
            Construct_Device6();
            Construct_Device7();
            Construct_Device8();
            Construct_Device9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_USBDevice(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DeviceCount();
            Initialize_Device0();
            Initialize_Device1();
            Initialize_Device2();
            Initialize_Device3();
            Initialize_Device4();
            Initialize_Device5();
            Initialize_Device6();
            Initialize_Device7();
            Initialize_Device8();
            Initialize_Device9();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DeviceCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_DeviceCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DeviceCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceCount()))
                {
                    Construct_DeviceCount();
                }
                if ((*Value()).hasMember(ItemName_DeviceCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DeviceCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_DeviceCount(void) const
        {
            return (*Value())[ItemName_DeviceCount()];
        }
        bool Get_DeviceCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeviceCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device0 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device0()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device0()))
                {
                    Construct_Device0();
                }
                if ((*Value()).hasMember(ItemName_Device0()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device0(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device0(void) const
        {
            return (*Value())[ItemName_Device0()];
        }
        bool Get_Device0(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device1 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device1()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device1()))
                {
                    Construct_Device1();
                }
                if ((*Value()).hasMember(ItemName_Device1()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device1(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device1(void) const
        {
            return (*Value())[ItemName_Device1()];
        }
        bool Get_Device1(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device2 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device2()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device2()))
                {
                    Construct_Device2();
                }
                if ((*Value()).hasMember(ItemName_Device2()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device2(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device2(void) const
        {
            return (*Value())[ItemName_Device2()];
        }
        bool Get_Device2(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device3 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device3()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device3()))
                {
                    Construct_Device3();
                }
                if ((*Value()).hasMember(ItemName_Device3()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device3(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device3(void) const
        {
            return (*Value())[ItemName_Device3()];
        }
        bool Get_Device3(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device4 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device4()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device4()))
                {
                    Construct_Device4();
                }
                if ((*Value()).hasMember(ItemName_Device4()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device4(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device4(void) const
        {
            return (*Value())[ItemName_Device4()];
        }
        bool Get_Device4(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device5 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device5()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device5()))
                {
                    Construct_Device5();
                }
                if ((*Value()).hasMember(ItemName_Device5()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device5(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device5(void) const
        {
            return (*Value())[ItemName_Device5()];
        }
        bool Get_Device5(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device5()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device6 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device6()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device6()))
                {
                    Construct_Device6();
                }
                if ((*Value()).hasMember(ItemName_Device6()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device6(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device6(void) const
        {
            return (*Value())[ItemName_Device6()];
        }
        bool Get_Device6(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device6()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device7 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device7()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device7()))
                {
                    Construct_Device7();
                }
                if ((*Value()).hasMember(ItemName_Device7()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device7(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device7(void) const
        {
            return (*Value())[ItemName_Device7()];
        }
        bool Get_Device7(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device7()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device8 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device8()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device8()))
                {
                    Construct_Device8();
                }
                if ((*Value()).hasMember(ItemName_Device8()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device8(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device8(void) const
        {
            return (*Value())[ItemName_Device8()];
        }
        bool Get_Device8(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device8()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Device9 (Type: "CType_Config_Universal_Adapter_USBDevice_Device")
    protected:
        void Construct_Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device9()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Device9()))
                {
                    Construct_Device9();
                }
                if ((*Value()).hasMember(ItemName_Device9()))
                {
                    CType_Config_Universal_Adapter_USBDevice_Device InitValue;
                    (*Value())[ItemName_Device9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Device9(const CType_Config_Universal_Adapter_USBDevice_Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_Device9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice_Device Get_Device9(void) const
        {
            return (*Value())[ItemName_Device9()];
        }
        bool Get_Device9(CType_Config_Universal_Adapter_USBDevice_Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Device9()]).valid())
                {
                    GetValue = (*Value())[ItemName_Device9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_USBDevice


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
    public:
        static std::string const& ItemName_AnswerDelay(void)
        {
            static std::string str("AnswerDelay");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_TimezoneOffset(void)
        {
            static std::string str("TimezoneOffset");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10019");
        return str;
    }
public:
    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus(void)
    {
        try
        {
            Construct_Address();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_WatchdogTimeout();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus(const CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Address();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_WatchdogTimeout();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Address();
            Initialize_Protocol();
            Initialize_Baudrate();
            Initialize_CharFormat();
            Initialize_AnswerDelay();
            Initialize_WatchdogTimeout();
            Initialize_TimezoneOffset();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Address (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Address(void) const
        {
            return (*Value())[ItemName_Address()];
        }
        bool Get_Address(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (*Value())[ItemName_Address()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnswerDelay (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    Construct_AnswerDelay();
                }
                if ((*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnswerDelay(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnswerDelay()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_AnswerDelay(void) const
        {
            return (*Value())[ItemName_AnswerDelay()];
        }
        bool Get_AnswerDelay(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnswerDelay()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnswerDelay()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimezoneOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    Construct_TimezoneOffset();
                }
                if ((*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimezoneOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimezoneOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimezoneOffset(void) const
        {
            return (*Value())[ItemName_TimezoneOffset()];
        }
        bool Get_TimezoneOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimezoneOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimezoneOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_SerialDevice_RSDevice
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_SerialDevice_RSDevice : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
    public:
        static std::string const& ItemName_AnswerDelay(void)
        {
            static std::string str("AnswerDelay");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
    public:
        static std::string const& ItemName_HandleInterval(void)
        {
            static std::string str("HandleInterval");
            return str;
        }
    public:
        static std::string const& ItemName_IdleTime(void)
        {
            static std::string str("IdleTime");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_TimezoneOffset(void)
        {
            static std::string str("TimezoneOffset");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_SerialDevice_RSDevice");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10020");
        return str;
    }
public:
    CType_Config_Universal_Adapter_SerialDevice_RSDevice(void)
    {
        try
        {
            Construct_Type();
            Construct_Address();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_Timeout();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_WatchdogTimeout();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_SerialDevice_RSDevice(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_SerialDevice_RSDevice(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Address();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_Timeout();
            Construct_HandleInterval();
            Construct_IdleTime();
            Construct_WatchdogTimeout();
            Construct_TimezoneOffset();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_SerialDevice_RSDevice(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Address();
            Initialize_Baudrate();
            Initialize_CharFormat();
            Initialize_AnswerDelay();
            Initialize_Timeout();
            Initialize_HandleInterval();
            Initialize_IdleTime();
            Initialize_WatchdogTimeout();
            Initialize_TimezoneOffset();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Address (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Address(void) const
        {
            return (*Value())[ItemName_Address()];
        }
        bool Get_Address(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (*Value())[ItemName_Address()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnswerDelay (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    Construct_AnswerDelay();
                }
                if ((*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnswerDelay(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnswerDelay()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_AnswerDelay(void) const
        {
            return (*Value())[ItemName_AnswerDelay()];
        }
        bool Get_AnswerDelay(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnswerDelay()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnswerDelay()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HandleInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandleInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandleInterval()))
                {
                    Construct_HandleInterval();
                }
                if ((*Value()).hasMember(ItemName_HandleInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandleInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandleInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandleInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandleInterval(void) const
        {
            return (*Value())[ItemName_HandleInterval()];
        }
        bool Get_HandleInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandleInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandleInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item IdleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IdleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IdleTime()))
                {
                    Construct_IdleTime();
                }
                if ((*Value()).hasMember(ItemName_IdleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_IdleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IdleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_IdleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_IdleTime(void) const
        {
            return (*Value())[ItemName_IdleTime()];
        }
        bool Get_IdleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IdleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_IdleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimezoneOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimezoneOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    Construct_TimezoneOffset();
                }
                if ((*Value()).hasMember(ItemName_TimezoneOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimezoneOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimezoneOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimezoneOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimezoneOffset(void) const
        {
            return (*Value())[ItemName_TimezoneOffset()];
        }
        bool Get_TimezoneOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimezoneOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimezoneOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_SerialDevice_RSDevice


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_SerialDevice_SDI12Device
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_SerialDevice_SDI12Device : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_SerialDevice_SDI12Device");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10021");
        return str;
    }
public:
    CType_Config_Universal_Adapter_SerialDevice_SDI12Device(void)
    {
        try
        {
            Construct_Type();
            Construct_Timeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_SerialDevice_SDI12Device(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_SerialDevice_SDI12Device(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Timeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_SerialDevice_SDI12Device(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Timeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_SerialDevice_SDI12Device


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter_SerialDevice
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter_SerialDevice : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_RS485DeviceConfigbus(void)
        {
            static std::string str("RS485DeviceConfigbus");
            return str;
        }
    public:
        static std::string const& ItemName_RS232DeviceConfigbus(void)
        {
            static std::string str("RS232DeviceConfigbus");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device0(void)
        {
            static std::string str("RS485Device0");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device1(void)
        {
            static std::string str("RS485Device1");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device2(void)
        {
            static std::string str("RS485Device2");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device3(void)
        {
            static std::string str("RS485Device3");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device4(void)
        {
            static std::string str("RS485Device4");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device5(void)
        {
            static std::string str("RS485Device5");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device6(void)
        {
            static std::string str("RS485Device6");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device7(void)
        {
            static std::string str("RS485Device7");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device8(void)
        {
            static std::string str("RS485Device8");
            return str;
        }
    public:
        static std::string const& ItemName_RS485Device9(void)
        {
            static std::string str("RS485Device9");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device0(void)
        {
            static std::string str("SDI12Device0");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device1(void)
        {
            static std::string str("SDI12Device1");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device2(void)
        {
            static std::string str("SDI12Device2");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device3(void)
        {
            static std::string str("SDI12Device3");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device4(void)
        {
            static std::string str("SDI12Device4");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device5(void)
        {
            static std::string str("SDI12Device5");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device6(void)
        {
            static std::string str("SDI12Device6");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device7(void)
        {
            static std::string str("SDI12Device7");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device8(void)
        {
            static std::string str("SDI12Device8");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12Device9(void)
        {
            static std::string str("SDI12Device9");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter_SerialDevice");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10022");
        return str;
    }
public:
    CType_Config_Universal_Adapter_SerialDevice(void)
    {
        try
        {
            Construct_RS485DeviceConfigbus();
            Construct_RS232DeviceConfigbus();
            Construct_RS485Device0();
            Construct_RS485Device1();
            Construct_RS485Device2();
            Construct_RS485Device3();
            Construct_RS485Device4();
            Construct_RS485Device5();
            Construct_RS485Device6();
            Construct_RS485Device7();
            Construct_RS485Device8();
            Construct_RS485Device9();
            Construct_SDI12Device0();
            Construct_SDI12Device1();
            Construct_SDI12Device2();
            Construct_SDI12Device3();
            Construct_SDI12Device4();
            Construct_SDI12Device5();
            Construct_SDI12Device6();
            Construct_SDI12Device7();
            Construct_SDI12Device8();
            Construct_SDI12Device9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter_SerialDevice(const CType_Config_Universal_Adapter_SerialDevice& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter_SerialDevice(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_RS485DeviceConfigbus();
            Construct_RS232DeviceConfigbus();
            Construct_RS485Device0();
            Construct_RS485Device1();
            Construct_RS485Device2();
            Construct_RS485Device3();
            Construct_RS485Device4();
            Construct_RS485Device5();
            Construct_RS485Device6();
            Construct_RS485Device7();
            Construct_RS485Device8();
            Construct_RS485Device9();
            Construct_SDI12Device0();
            Construct_SDI12Device1();
            Construct_SDI12Device2();
            Construct_SDI12Device3();
            Construct_SDI12Device4();
            Construct_SDI12Device5();
            Construct_SDI12Device6();
            Construct_SDI12Device7();
            Construct_SDI12Device8();
            Construct_SDI12Device9();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter_SerialDevice(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_RS485DeviceConfigbus();
            Initialize_RS232DeviceConfigbus();
            Initialize_RS485Device0();
            Initialize_RS485Device1();
            Initialize_RS485Device2();
            Initialize_RS485Device3();
            Initialize_RS485Device4();
            Initialize_RS485Device5();
            Initialize_RS485Device6();
            Initialize_RS485Device7();
            Initialize_RS485Device8();
            Initialize_RS485Device9();
            Initialize_SDI12Device0();
            Initialize_SDI12Device1();
            Initialize_SDI12Device2();
            Initialize_SDI12Device3();
            Initialize_SDI12Device4();
            Initialize_SDI12Device5();
            Initialize_SDI12Device6();
            Initialize_SDI12Device7();
            Initialize_SDI12Device8();
            Initialize_SDI12Device9();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item RS485DeviceConfigbus (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus")
    protected:
        void Construct_RS485DeviceConfigbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485DeviceConfigbus()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus InitValue;
                    (*Value())[ItemName_RS485DeviceConfigbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485DeviceConfigbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485DeviceConfigbus()))
                {
                    Construct_RS485DeviceConfigbus();
                }
                if ((*Value()).hasMember(ItemName_RS485DeviceConfigbus()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus InitValue;
                    (*Value())[ItemName_RS485DeviceConfigbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485DeviceConfigbus(const CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485DeviceConfigbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus Get_RS485DeviceConfigbus(void) const
        {
            return (*Value())[ItemName_RS485DeviceConfigbus()];
        }
        bool Get_RS485DeviceConfigbus(CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485DeviceConfigbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485DeviceConfigbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS232DeviceConfigbus (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus")
    protected:
        void Construct_RS232DeviceConfigbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS232DeviceConfigbus()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus InitValue;
                    (*Value())[ItemName_RS232DeviceConfigbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS232DeviceConfigbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS232DeviceConfigbus()))
                {
                    Construct_RS232DeviceConfigbus();
                }
                if ((*Value()).hasMember(ItemName_RS232DeviceConfigbus()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus InitValue;
                    (*Value())[ItemName_RS232DeviceConfigbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS232DeviceConfigbus(const CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS232DeviceConfigbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus Get_RS232DeviceConfigbus(void) const
        {
            return (*Value())[ItemName_RS232DeviceConfigbus()];
        }
        bool Get_RS232DeviceConfigbus(CType_Config_Universal_Adapter_SerialDevice_RSDeviceConfigbus& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS232DeviceConfigbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS232DeviceConfigbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device0 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device0()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device0()))
                {
                    Construct_RS485Device0();
                }
                if ((*Value()).hasMember(ItemName_RS485Device0()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device0(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device0(void) const
        {
            return (*Value())[ItemName_RS485Device0()];
        }
        bool Get_RS485Device0(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device0()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device1 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device1()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device1()))
                {
                    Construct_RS485Device1();
                }
                if ((*Value()).hasMember(ItemName_RS485Device1()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device1(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device1(void) const
        {
            return (*Value())[ItemName_RS485Device1()];
        }
        bool Get_RS485Device1(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device1()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device2 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device2()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device2()))
                {
                    Construct_RS485Device2();
                }
                if ((*Value()).hasMember(ItemName_RS485Device2()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device2(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device2(void) const
        {
            return (*Value())[ItemName_RS485Device2()];
        }
        bool Get_RS485Device2(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device2()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device3 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device3()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device3()))
                {
                    Construct_RS485Device3();
                }
                if ((*Value()).hasMember(ItemName_RS485Device3()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device3(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device3(void) const
        {
            return (*Value())[ItemName_RS485Device3()];
        }
        bool Get_RS485Device3(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device3()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device4 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device4()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device4()))
                {
                    Construct_RS485Device4();
                }
                if ((*Value()).hasMember(ItemName_RS485Device4()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device4(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device4(void) const
        {
            return (*Value())[ItemName_RS485Device4()];
        }
        bool Get_RS485Device4(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device4()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device5 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device5()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device5()))
                {
                    Construct_RS485Device5();
                }
                if ((*Value()).hasMember(ItemName_RS485Device5()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device5(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device5(void) const
        {
            return (*Value())[ItemName_RS485Device5()];
        }
        bool Get_RS485Device5(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device5()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device6 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device6()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device6()))
                {
                    Construct_RS485Device6();
                }
                if ((*Value()).hasMember(ItemName_RS485Device6()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device6(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device6(void) const
        {
            return (*Value())[ItemName_RS485Device6()];
        }
        bool Get_RS485Device6(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device6()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device7 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device7()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device7()))
                {
                    Construct_RS485Device7();
                }
                if ((*Value()).hasMember(ItemName_RS485Device7()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device7(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device7(void) const
        {
            return (*Value())[ItemName_RS485Device7()];
        }
        bool Get_RS485Device7(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device7()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device8 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device8()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device8()))
                {
                    Construct_RS485Device8();
                }
                if ((*Value()).hasMember(ItemName_RS485Device8()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device8(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device8(void) const
        {
            return (*Value())[ItemName_RS485Device8()];
        }
        bool Get_RS485Device8(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device8()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RS485Device9 (Type: "CType_Config_Universal_Adapter_SerialDevice_RSDevice")
    protected:
        void Construct_RS485Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device9()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RS485Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RS485Device9()))
                {
                    Construct_RS485Device9();
                }
                if ((*Value()).hasMember(ItemName_RS485Device9()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_RSDevice InitValue;
                    (*Value())[ItemName_RS485Device9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RS485Device9(const CType_Config_Universal_Adapter_SerialDevice_RSDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_RS485Device9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_RSDevice Get_RS485Device9(void) const
        {
            return (*Value())[ItemName_RS485Device9()];
        }
        bool Get_RS485Device9(CType_Config_Universal_Adapter_SerialDevice_RSDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RS485Device9()]).valid())
                {
                    GetValue = (*Value())[ItemName_RS485Device9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device0 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device0()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device0()))
                {
                    Construct_SDI12Device0();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device0()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device0(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device0(void) const
        {
            return (*Value())[ItemName_SDI12Device0()];
        }
        bool Get_SDI12Device0(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device0()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device1 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device1()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device1()))
                {
                    Construct_SDI12Device1();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device1()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device1(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device1(void) const
        {
            return (*Value())[ItemName_SDI12Device1()];
        }
        bool Get_SDI12Device1(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device1()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device2 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device2()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device2()))
                {
                    Construct_SDI12Device2();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device2()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device2(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device2(void) const
        {
            return (*Value())[ItemName_SDI12Device2()];
        }
        bool Get_SDI12Device2(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device2()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device3 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device3()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device3()))
                {
                    Construct_SDI12Device3();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device3()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device3(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device3(void) const
        {
            return (*Value())[ItemName_SDI12Device3()];
        }
        bool Get_SDI12Device3(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device3()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device4 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device4()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device4()))
                {
                    Construct_SDI12Device4();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device4()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device4(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device4(void) const
        {
            return (*Value())[ItemName_SDI12Device4()];
        }
        bool Get_SDI12Device4(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device4()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device5 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device5()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device5()))
                {
                    Construct_SDI12Device5();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device5()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device5(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device5(void) const
        {
            return (*Value())[ItemName_SDI12Device5()];
        }
        bool Get_SDI12Device5(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device5()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device6 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device6()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device6()))
                {
                    Construct_SDI12Device6();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device6()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device6(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device6(void) const
        {
            return (*Value())[ItemName_SDI12Device6()];
        }
        bool Get_SDI12Device6(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device6()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device7 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device7()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device7()))
                {
                    Construct_SDI12Device7();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device7()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device7(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device7(void) const
        {
            return (*Value())[ItemName_SDI12Device7()];
        }
        bool Get_SDI12Device7(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device7()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device8 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device8()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device8()))
                {
                    Construct_SDI12Device8();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device8()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device8(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device8(void) const
        {
            return (*Value())[ItemName_SDI12Device8()];
        }
        bool Get_SDI12Device8(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device8()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12Device9 (Type: "CType_Config_Universal_Adapter_SerialDevice_SDI12Device")
    protected:
        void Construct_SDI12Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device9()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12Device9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12Device9()))
                {
                    Construct_SDI12Device9();
                }
                if ((*Value()).hasMember(ItemName_SDI12Device9()))
                {
                    CType_Config_Universal_Adapter_SerialDevice_SDI12Device InitValue;
                    (*Value())[ItemName_SDI12Device9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12Device9(const CType_Config_Universal_Adapter_SerialDevice_SDI12Device& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12Device9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice_SDI12Device Get_SDI12Device9(void) const
        {
            return (*Value())[ItemName_SDI12Device9()];
        }
        bool Get_SDI12Device9(CType_Config_Universal_Adapter_SerialDevice_SDI12Device& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12Device9()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12Device9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter_SerialDevice


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Adapter
//------------------------------------------------------------------------
class CType_Config_Universal_Adapter : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Dataport(void)
        {
            static std::string str("Dataport");
            return str;
        }
    public:
        static std::string const& ItemName_Network(void)
        {
            static std::string str("Network");
            return str;
        }
    public:
        static std::string const& ItemName_Fieldbus(void)
        {
            static std::string str("Fieldbus");
            return str;
        }
    public:
        static std::string const& ItemName_NetDrive(void)
        {
            static std::string str("NetDrive");
            return str;
        }
    public:
        static std::string const& ItemName_FTP(void)
        {
            static std::string str("FTP");
            return str;
        }
    public:
        static std::string const& ItemName_Mail(void)
        {
            static std::string str("Mail");
            return str;
        }
    public:
        static std::string const& ItemName_NTP(void)
        {
            static std::string str("NTP");
            return str;
        }
    public:
        static std::string const& ItemName_USBDevice(void)
        {
            static std::string str("USBDevice");
            return str;
        }
    public:
        static std::string const& ItemName_SerialDevice(void)
        {
            static std::string str("SerialDevice");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Adapter");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10023");
        return str;
    }
public:
    CType_Config_Universal_Adapter(void)
    {
        try
        {
            Construct_Dataport();
            Construct_Network();
            Construct_Fieldbus();
            Construct_NetDrive();
            Construct_FTP();
            Construct_Mail();
            Construct_NTP();
            Construct_USBDevice();
            Construct_SerialDevice();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Adapter(const CType_Config_Universal_Adapter& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Adapter(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Dataport();
            Construct_Network();
            Construct_Fieldbus();
            Construct_NetDrive();
            Construct_FTP();
            Construct_Mail();
            Construct_NTP();
            Construct_USBDevice();
            Construct_SerialDevice();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Adapter(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Dataport();
            Initialize_Network();
            Initialize_Fieldbus();
            Initialize_NetDrive();
            Initialize_FTP();
            Initialize_Mail();
            Initialize_NTP();
            Initialize_USBDevice();
            Initialize_SerialDevice();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Dataport (Type: "CType_Config_Universal_Adapter_Dataport")
    protected:
        void Construct_Dataport(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Dataport()))
                {
                    CType_Config_Universal_Adapter_Dataport InitValue;
                    (*Value())[ItemName_Dataport()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Dataport(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Dataport()))
                {
                    Construct_Dataport();
                }
                if ((*Value()).hasMember(ItemName_Dataport()))
                {
                    CType_Config_Universal_Adapter_Dataport InitValue;
                    (*Value())[ItemName_Dataport()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Dataport(const CType_Config_Universal_Adapter_Dataport& SetValue)
        {
            try
            {
                (*Value())[ItemName_Dataport()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Dataport Get_Dataport(void) const
        {
            return (*Value())[ItemName_Dataport()];
        }
        bool Get_Dataport(CType_Config_Universal_Adapter_Dataport& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Dataport()]).valid())
                {
                    GetValue = (*Value())[ItemName_Dataport()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Network (Type: "CType_Config_Universal_Adapter_Network")
    protected:
        void Construct_Network(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Network()))
                {
                    CType_Config_Universal_Adapter_Network InitValue;
                    (*Value())[ItemName_Network()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Network(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Network()))
                {
                    Construct_Network();
                }
                if ((*Value()).hasMember(ItemName_Network()))
                {
                    CType_Config_Universal_Adapter_Network InitValue;
                    (*Value())[ItemName_Network()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Network(const CType_Config_Universal_Adapter_Network& SetValue)
        {
            try
            {
                (*Value())[ItemName_Network()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Network Get_Network(void) const
        {
            return (*Value())[ItemName_Network()];
        }
        bool Get_Network(CType_Config_Universal_Adapter_Network& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Network()]).valid())
                {
                    GetValue = (*Value())[ItemName_Network()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Fieldbus (Type: "CType_Config_Universal_Adapter_Fieldbus")
    protected:
        void Construct_Fieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Fieldbus()))
                {
                    CType_Config_Universal_Adapter_Fieldbus InitValue;
                    (*Value())[ItemName_Fieldbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Fieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Fieldbus()))
                {
                    Construct_Fieldbus();
                }
                if ((*Value()).hasMember(ItemName_Fieldbus()))
                {
                    CType_Config_Universal_Adapter_Fieldbus InitValue;
                    (*Value())[ItemName_Fieldbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Fieldbus(const CType_Config_Universal_Adapter_Fieldbus& SetValue)
        {
            try
            {
                (*Value())[ItemName_Fieldbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Fieldbus Get_Fieldbus(void) const
        {
            return (*Value())[ItemName_Fieldbus()];
        }
        bool Get_Fieldbus(CType_Config_Universal_Adapter_Fieldbus& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Fieldbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_Fieldbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NetDrive (Type: "CType_Config_Universal_Adapter_NetDrive")
    protected:
        void Construct_NetDrive(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetDrive()))
                {
                    CType_Config_Universal_Adapter_NetDrive InitValue;
                    (*Value())[ItemName_NetDrive()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NetDrive(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NetDrive()))
                {
                    Construct_NetDrive();
                }
                if ((*Value()).hasMember(ItemName_NetDrive()))
                {
                    CType_Config_Universal_Adapter_NetDrive InitValue;
                    (*Value())[ItemName_NetDrive()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NetDrive(const CType_Config_Universal_Adapter_NetDrive& SetValue)
        {
            try
            {
                (*Value())[ItemName_NetDrive()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NetDrive Get_NetDrive(void) const
        {
            return (*Value())[ItemName_NetDrive()];
        }
        bool Get_NetDrive(CType_Config_Universal_Adapter_NetDrive& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NetDrive()]).valid())
                {
                    GetValue = (*Value())[ItemName_NetDrive()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FTP (Type: "CType_Config_Universal_Adapter_FTP")
    protected:
        void Construct_FTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FTP()))
                {
                    CType_Config_Universal_Adapter_FTP InitValue;
                    (*Value())[ItemName_FTP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FTP()))
                {
                    Construct_FTP();
                }
                if ((*Value()).hasMember(ItemName_FTP()))
                {
                    CType_Config_Universal_Adapter_FTP InitValue;
                    (*Value())[ItemName_FTP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FTP(const CType_Config_Universal_Adapter_FTP& SetValue)
        {
            try
            {
                (*Value())[ItemName_FTP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_FTP Get_FTP(void) const
        {
            return (*Value())[ItemName_FTP()];
        }
        bool Get_FTP(CType_Config_Universal_Adapter_FTP& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FTP()]).valid())
                {
                    GetValue = (*Value())[ItemName_FTP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Mail (Type: "CType_Config_Universal_Adapter_Mail")
    protected:
        void Construct_Mail(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mail()))
                {
                    CType_Config_Universal_Adapter_Mail InitValue;
                    (*Value())[ItemName_Mail()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Mail(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mail()))
                {
                    Construct_Mail();
                }
                if ((*Value()).hasMember(ItemName_Mail()))
                {
                    CType_Config_Universal_Adapter_Mail InitValue;
                    (*Value())[ItemName_Mail()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Mail(const CType_Config_Universal_Adapter_Mail& SetValue)
        {
            try
            {
                (*Value())[ItemName_Mail()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_Mail Get_Mail(void) const
        {
            return (*Value())[ItemName_Mail()];
        }
        bool Get_Mail(CType_Config_Universal_Adapter_Mail& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Mail()]).valid())
                {
                    GetValue = (*Value())[ItemName_Mail()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NTP (Type: "CType_Config_Universal_Adapter_NTP")
    protected:
        void Construct_NTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NTP()))
                {
                    CType_Config_Universal_Adapter_NTP InitValue;
                    (*Value())[ItemName_NTP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NTP()))
                {
                    Construct_NTP();
                }
                if ((*Value()).hasMember(ItemName_NTP()))
                {
                    CType_Config_Universal_Adapter_NTP InitValue;
                    (*Value())[ItemName_NTP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NTP(const CType_Config_Universal_Adapter_NTP& SetValue)
        {
            try
            {
                (*Value())[ItemName_NTP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_NTP Get_NTP(void) const
        {
            return (*Value())[ItemName_NTP()];
        }
        bool Get_NTP(CType_Config_Universal_Adapter_NTP& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NTP()]).valid())
                {
                    GetValue = (*Value())[ItemName_NTP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item USBDevice (Type: "CType_Config_Universal_Adapter_USBDevice")
    protected:
        void Construct_USBDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_USBDevice()))
                {
                    CType_Config_Universal_Adapter_USBDevice InitValue;
                    (*Value())[ItemName_USBDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_USBDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_USBDevice()))
                {
                    Construct_USBDevice();
                }
                if ((*Value()).hasMember(ItemName_USBDevice()))
                {
                    CType_Config_Universal_Adapter_USBDevice InitValue;
                    (*Value())[ItemName_USBDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_USBDevice(const CType_Config_Universal_Adapter_USBDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_USBDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_USBDevice Get_USBDevice(void) const
        {
            return (*Value())[ItemName_USBDevice()];
        }
        bool Get_USBDevice(CType_Config_Universal_Adapter_USBDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_USBDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_USBDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SerialDevice (Type: "CType_Config_Universal_Adapter_SerialDevice")
    protected:
        void Construct_SerialDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SerialDevice()))
                {
                    CType_Config_Universal_Adapter_SerialDevice InitValue;
                    (*Value())[ItemName_SerialDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SerialDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SerialDevice()))
                {
                    Construct_SerialDevice();
                }
                if ((*Value()).hasMember(ItemName_SerialDevice()))
                {
                    CType_Config_Universal_Adapter_SerialDevice InitValue;
                    (*Value())[ItemName_SerialDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SerialDevice(const CType_Config_Universal_Adapter_SerialDevice& SetValue)
        {
            try
            {
                (*Value())[ItemName_SerialDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter_SerialDevice Get_SerialDevice(void) const
        {
            return (*Value())[ItemName_SerialDevice()];
        }
        bool Get_SerialDevice(CType_Config_Universal_Adapter_SerialDevice& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SerialDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_SerialDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Adapter


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Function_FFT_Processor_Evaluator
//------------------------------------------------------------------------
class CType_Config_Universal_Function_FFT_Processor_Evaluator : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_TypeEntryType(void)
        {
            static std::string str("TypeEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_TypeConstant(void)
        {
            static std::string str("TypeConstant");
            return str;
        }
    public:
        static std::string const& ItemName_TypeVariable(void)
        {
            static std::string str("TypeVariable");
            return str;
        }
    public:
        static std::string const& ItemName_StartFrequencyEntryType(void)
        {
            static std::string str("StartFrequencyEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_StartFrequencyConstant(void)
        {
            static std::string str("StartFrequencyConstant");
            return str;
        }
    public:
        static std::string const& ItemName_StartFrequencyVariable(void)
        {
            static std::string str("StartFrequencyVariable");
            return str;
        }
    public:
        static std::string const& ItemName_StopFrequencyEntryType(void)
        {
            static std::string str("StopFrequencyEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_StopFrequencyConstant(void)
        {
            static std::string str("StopFrequencyConstant");
            return str;
        }
    public:
        static std::string const& ItemName_StopFrequencyVariable(void)
        {
            static std::string str("StopFrequencyVariable");
            return str;
        }
    public:
        static std::string const& ItemName_ResultVariable0(void)
        {
            static std::string str("ResultVariable0");
            return str;
        }
    public:
        static std::string const& ItemName_ResultVariable1(void)
        {
            static std::string str("ResultVariable1");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Function_FFT_Processor_Evaluator");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10050");
        return str;
    }
public:
    CType_Config_Universal_Function_FFT_Processor_Evaluator(void)
    {
        try
        {
            Construct_TypeEntryType();
            Construct_TypeConstant();
            Construct_TypeVariable();
            Construct_StartFrequencyEntryType();
            Construct_StartFrequencyConstant();
            Construct_StartFrequencyVariable();
            Construct_StopFrequencyEntryType();
            Construct_StopFrequencyConstant();
            Construct_StopFrequencyVariable();
            Construct_ResultVariable0();
            Construct_ResultVariable1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Function_FFT_Processor_Evaluator(const CType_Config_Universal_Function_FFT_Processor_Evaluator& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Function_FFT_Processor_Evaluator(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_TypeEntryType();
            Construct_TypeConstant();
            Construct_TypeVariable();
            Construct_StartFrequencyEntryType();
            Construct_StartFrequencyConstant();
            Construct_StartFrequencyVariable();
            Construct_StopFrequencyEntryType();
            Construct_StopFrequencyConstant();
            Construct_StopFrequencyVariable();
            Construct_ResultVariable0();
            Construct_ResultVariable1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Function_FFT_Processor_Evaluator(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_TypeEntryType();
            Initialize_TypeConstant();
            Initialize_TypeVariable();
            Initialize_StartFrequencyEntryType();
            Initialize_StartFrequencyConstant();
            Initialize_StartFrequencyVariable();
            Initialize_StopFrequencyEntryType();
            Initialize_StopFrequencyConstant();
            Initialize_StopFrequencyVariable();
            Initialize_ResultVariable0();
            Initialize_ResultVariable1();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item TypeEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeEntryType()))
                {
                    Construct_TypeEntryType();
                }
                if ((*Value()).hasMember(ItemName_TypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TypeEntryType(void) const
        {
            return (*Value())[ItemName_TypeEntryType()];
        }
        bool Get_TypeEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeConstant()))
                {
                    Construct_TypeConstant();
                }
                if ((*Value()).hasMember(ItemName_TypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeConstant(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TypeConstant(void) const
        {
            return (*Value())[ItemName_TypeConstant()];
        }
        bool Get_TypeConstant(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeVariable()))
                {
                    Construct_TypeVariable();
                }
                if ((*Value()).hasMember(ItemName_TypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TypeVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TypeVariable(void) const
        {
            return (*Value())[ItemName_TypeVariable()];
        }
        bool Get_TypeVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StartFrequencyEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StartFrequencyEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartFrequencyEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartFrequencyEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyEntryType()))
                {
                    Construct_StartFrequencyEntryType();
                }
                if ((*Value()).hasMember(ItemName_StartFrequencyEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartFrequencyEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartFrequencyEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartFrequencyEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StartFrequencyEntryType(void) const
        {
            return (*Value())[ItemName_StartFrequencyEntryType()];
        }
        bool Get_StartFrequencyEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartFrequencyEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartFrequencyEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StartFrequencyConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_StartFrequencyConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StartFrequencyConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartFrequencyConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyConstant()))
                {
                    Construct_StartFrequencyConstant();
                }
                if ((*Value()).hasMember(ItemName_StartFrequencyConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StartFrequencyConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartFrequencyConstant(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartFrequencyConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_StartFrequencyConstant(void) const
        {
            return (*Value())[ItemName_StartFrequencyConstant()];
        }
        bool Get_StartFrequencyConstant(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartFrequencyConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartFrequencyConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StartFrequencyVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StartFrequencyVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartFrequencyVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartFrequencyVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartFrequencyVariable()))
                {
                    Construct_StartFrequencyVariable();
                }
                if ((*Value()).hasMember(ItemName_StartFrequencyVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartFrequencyVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartFrequencyVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartFrequencyVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StartFrequencyVariable(void) const
        {
            return (*Value())[ItemName_StartFrequencyVariable()];
        }
        bool Get_StartFrequencyVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartFrequencyVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartFrequencyVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StopFrequencyEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StopFrequencyEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StopFrequencyEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StopFrequencyEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyEntryType()))
                {
                    Construct_StopFrequencyEntryType();
                }
                if ((*Value()).hasMember(ItemName_StopFrequencyEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StopFrequencyEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StopFrequencyEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StopFrequencyEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StopFrequencyEntryType(void) const
        {
            return (*Value())[ItemName_StopFrequencyEntryType()];
        }
        bool Get_StopFrequencyEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StopFrequencyEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_StopFrequencyEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StopFrequencyConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_StopFrequencyConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StopFrequencyConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StopFrequencyConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyConstant()))
                {
                    Construct_StopFrequencyConstant();
                }
                if ((*Value()).hasMember(ItemName_StopFrequencyConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StopFrequencyConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StopFrequencyConstant(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_StopFrequencyConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_StopFrequencyConstant(void) const
        {
            return (*Value())[ItemName_StopFrequencyConstant()];
        }
        bool Get_StopFrequencyConstant(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StopFrequencyConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_StopFrequencyConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StopFrequencyVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StopFrequencyVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StopFrequencyVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StopFrequencyVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopFrequencyVariable()))
                {
                    Construct_StopFrequencyVariable();
                }
                if ((*Value()).hasMember(ItemName_StopFrequencyVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StopFrequencyVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StopFrequencyVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StopFrequencyVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StopFrequencyVariable(void) const
        {
            return (*Value())[ItemName_StopFrequencyVariable()];
        }
        bool Get_StopFrequencyVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StopFrequencyVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_StopFrequencyVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultVariable0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ResultVariable0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultVariable0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultVariable0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultVariable0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultVariable0()))
                {
                    Construct_ResultVariable0();
                }
                if ((*Value()).hasMember(ItemName_ResultVariable0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultVariable0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultVariable0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultVariable0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ResultVariable0(void) const
        {
            return (*Value())[ItemName_ResultVariable0()];
        }
        bool Get_ResultVariable0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultVariable0()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResultVariable0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultVariable1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ResultVariable1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultVariable1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultVariable1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultVariable1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultVariable1()))
                {
                    Construct_ResultVariable1();
                }
                if ((*Value()).hasMember(ItemName_ResultVariable1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultVariable1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultVariable1(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultVariable1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ResultVariable1(void) const
        {
            return (*Value())[ItemName_ResultVariable1()];
        }
        bool Get_ResultVariable1(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultVariable1()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResultVariable1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Function_FFT_Processor_Evaluator


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Function_FFT_Processor
//------------------------------------------------------------------------
class CType_Config_Universal_Function_FFT_Processor : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_SizeEntryType(void)
        {
            static std::string str("SizeEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_SizeConstant(void)
        {
            static std::string str("SizeConstant");
            return str;
        }
    public:
        static std::string const& ItemName_SizeVariable(void)
        {
            static std::string str("SizeVariable");
            return str;
        }
    public:
        static std::string const& ItemName_WindowTypeEntryType(void)
        {
            static std::string str("WindowTypeEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_WindowTypeConstant(void)
        {
            static std::string str("WindowTypeConstant");
            return str;
        }
    public:
        static std::string const& ItemName_WindowTypeVariable(void)
        {
            static std::string str("WindowTypeVariable");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterTypeEntryType(void)
        {
            static std::string str("WindowParameterTypeEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterTypeConstant(void)
        {
            static std::string str("WindowParameterTypeConstant");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterTypeVariable(void)
        {
            static std::string str("WindowParameterTypeVariable");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterEntryType(void)
        {
            static std::string str("WindowParameterEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterConstant(void)
        {
            static std::string str("WindowParameterConstant");
            return str;
        }
    public:
        static std::string const& ItemName_WindowParameterVariable(void)
        {
            static std::string str("WindowParameterVariable");
            return str;
        }
    public:
        static std::string const& ItemName_TimeDomainBufferOverlappingPercentageEntryType(void)
        {
            static std::string str("TimeDomainBufferOverlappingPercentageEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_TimeDomainBufferOverlappingPercentageConstant(void)
        {
            static std::string str("TimeDomainBufferOverlappingPercentageConstant");
            return str;
        }
    public:
        static std::string const& ItemName_TimeDomainBufferOverlappingPercentageVariable(void)
        {
            static std::string str("TimeDomainBufferOverlappingPercentageVariable");
            return str;
        }
    public:
        static std::string const& ItemName_EnableGeneratingTemporaryFilesEntryType(void)
        {
            static std::string str("EnableGeneratingTemporaryFilesEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_EnableGeneratingTemporaryFilesConstant(void)
        {
            static std::string str("EnableGeneratingTemporaryFilesConstant");
            return str;
        }
    public:
        static std::string const& ItemName_EnableGeneratingTemporaryFilesVariable(void)
        {
            static std::string str("EnableGeneratingTemporaryFilesVariable");
            return str;
        }
    public:
        static std::string const& ItemName_SignalCalculationTypeEntryType(void)
        {
            static std::string str("SignalCalculationTypeEntryType");
            return str;
        }
    public:
        static std::string const& ItemName_SignalCalculationTypeConstant(void)
        {
            static std::string str("SignalCalculationTypeConstant");
            return str;
        }
    public:
        static std::string const& ItemName_SignalCalculationTypeVariable(void)
        {
            static std::string str("SignalCalculationTypeVariable");
            return str;
        }
    public:
        static std::string const& ItemName_EvaluatorCount(void)
        {
            static std::string str("EvaluatorCount");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator0(void)
        {
            static std::string str("Evaluator0");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator1(void)
        {
            static std::string str("Evaluator1");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator2(void)
        {
            static std::string str("Evaluator2");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator3(void)
        {
            static std::string str("Evaluator3");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator4(void)
        {
            static std::string str("Evaluator4");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator5(void)
        {
            static std::string str("Evaluator5");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator6(void)
        {
            static std::string str("Evaluator6");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator7(void)
        {
            static std::string str("Evaluator7");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator8(void)
        {
            static std::string str("Evaluator8");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator9(void)
        {
            static std::string str("Evaluator9");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator10(void)
        {
            static std::string str("Evaluator10");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator11(void)
        {
            static std::string str("Evaluator11");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator12(void)
        {
            static std::string str("Evaluator12");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator13(void)
        {
            static std::string str("Evaluator13");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator14(void)
        {
            static std::string str("Evaluator14");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator15(void)
        {
            static std::string str("Evaluator15");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator16(void)
        {
            static std::string str("Evaluator16");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator17(void)
        {
            static std::string str("Evaluator17");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator18(void)
        {
            static std::string str("Evaluator18");
            return str;
        }
    public:
        static std::string const& ItemName_Evaluator19(void)
        {
            static std::string str("Evaluator19");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Function_FFT_Processor");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10051");
        return str;
    }
public:
    CType_Config_Universal_Function_FFT_Processor(void)
    {
        try
        {
            Construct_StreamProcessor();
            Construct_Variable();
            Construct_SizeEntryType();
            Construct_SizeConstant();
            Construct_SizeVariable();
            Construct_WindowTypeEntryType();
            Construct_WindowTypeConstant();
            Construct_WindowTypeVariable();
            Construct_WindowParameterTypeEntryType();
            Construct_WindowParameterTypeConstant();
            Construct_WindowParameterTypeVariable();
            Construct_WindowParameterEntryType();
            Construct_WindowParameterConstant();
            Construct_WindowParameterVariable();
            Construct_TimeDomainBufferOverlappingPercentageEntryType();
            Construct_TimeDomainBufferOverlappingPercentageConstant();
            Construct_TimeDomainBufferOverlappingPercentageVariable();
            Construct_EnableGeneratingTemporaryFilesEntryType();
            Construct_EnableGeneratingTemporaryFilesConstant();
            Construct_EnableGeneratingTemporaryFilesVariable();
            Construct_SignalCalculationTypeEntryType();
            Construct_SignalCalculationTypeConstant();
            Construct_SignalCalculationTypeVariable();
            Construct_EvaluatorCount();
            Construct_Evaluator0();
            Construct_Evaluator1();
            Construct_Evaluator2();
            Construct_Evaluator3();
            Construct_Evaluator4();
            Construct_Evaluator5();
            Construct_Evaluator6();
            Construct_Evaluator7();
            Construct_Evaluator8();
            Construct_Evaluator9();
            Construct_Evaluator10();
            Construct_Evaluator11();
            Construct_Evaluator12();
            Construct_Evaluator13();
            Construct_Evaluator14();
            Construct_Evaluator15();
            Construct_Evaluator16();
            Construct_Evaluator17();
            Construct_Evaluator18();
            Construct_Evaluator19();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Function_FFT_Processor(const CType_Config_Universal_Function_FFT_Processor& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Function_FFT_Processor(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StreamProcessor();
            Construct_Variable();
            Construct_SizeEntryType();
            Construct_SizeConstant();
            Construct_SizeVariable();
            Construct_WindowTypeEntryType();
            Construct_WindowTypeConstant();
            Construct_WindowTypeVariable();
            Construct_WindowParameterTypeEntryType();
            Construct_WindowParameterTypeConstant();
            Construct_WindowParameterTypeVariable();
            Construct_WindowParameterEntryType();
            Construct_WindowParameterConstant();
            Construct_WindowParameterVariable();
            Construct_TimeDomainBufferOverlappingPercentageEntryType();
            Construct_TimeDomainBufferOverlappingPercentageConstant();
            Construct_TimeDomainBufferOverlappingPercentageVariable();
            Construct_EnableGeneratingTemporaryFilesEntryType();
            Construct_EnableGeneratingTemporaryFilesConstant();
            Construct_EnableGeneratingTemporaryFilesVariable();
            Construct_SignalCalculationTypeEntryType();
            Construct_SignalCalculationTypeConstant();
            Construct_SignalCalculationTypeVariable();
            Construct_EvaluatorCount();
            Construct_Evaluator0();
            Construct_Evaluator1();
            Construct_Evaluator2();
            Construct_Evaluator3();
            Construct_Evaluator4();
            Construct_Evaluator5();
            Construct_Evaluator6();
            Construct_Evaluator7();
            Construct_Evaluator8();
            Construct_Evaluator9();
            Construct_Evaluator10();
            Construct_Evaluator11();
            Construct_Evaluator12();
            Construct_Evaluator13();
            Construct_Evaluator14();
            Construct_Evaluator15();
            Construct_Evaluator16();
            Construct_Evaluator17();
            Construct_Evaluator18();
            Construct_Evaluator19();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Function_FFT_Processor(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StreamProcessor();
            Initialize_Variable();
            Initialize_SizeEntryType();
            Initialize_SizeConstant();
            Initialize_SizeVariable();
            Initialize_WindowTypeEntryType();
            Initialize_WindowTypeConstant();
            Initialize_WindowTypeVariable();
            Initialize_WindowParameterTypeEntryType();
            Initialize_WindowParameterTypeConstant();
            Initialize_WindowParameterTypeVariable();
            Initialize_WindowParameterEntryType();
            Initialize_WindowParameterConstant();
            Initialize_WindowParameterVariable();
            Initialize_TimeDomainBufferOverlappingPercentageEntryType();
            Initialize_TimeDomainBufferOverlappingPercentageConstant();
            Initialize_TimeDomainBufferOverlappingPercentageVariable();
            Initialize_EnableGeneratingTemporaryFilesEntryType();
            Initialize_EnableGeneratingTemporaryFilesConstant();
            Initialize_EnableGeneratingTemporaryFilesVariable();
            Initialize_SignalCalculationTypeEntryType();
            Initialize_SignalCalculationTypeConstant();
            Initialize_SignalCalculationTypeVariable();
            Initialize_EvaluatorCount();
            Initialize_Evaluator0();
            Initialize_Evaluator1();
            Initialize_Evaluator2();
            Initialize_Evaluator3();
            Initialize_Evaluator4();
            Initialize_Evaluator5();
            Initialize_Evaluator6();
            Initialize_Evaluator7();
            Initialize_Evaluator8();
            Initialize_Evaluator9();
            Initialize_Evaluator10();
            Initialize_Evaluator11();
            Initialize_Evaluator12();
            Initialize_Evaluator13();
            Initialize_Evaluator14();
            Initialize_Evaluator15();
            Initialize_Evaluator16();
            Initialize_Evaluator17();
            Initialize_Evaluator18();
            Initialize_Evaluator19();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SizeEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SizeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SizeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeEntryType()))
                {
                    Construct_SizeEntryType();
                }
                if ((*Value()).hasMember(ItemName_SizeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SizeEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SizeEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SizeEntryType(void) const
        {
            return (*Value())[ItemName_SizeEntryType()];
        }
        bool Get_SizeEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SizeEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SizeEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SizeConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SizeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SizeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeConstant()))
                {
                    Construct_SizeConstant();
                }
                if ((*Value()).hasMember(ItemName_SizeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SizeConstant(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SizeConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SizeConstant(void) const
        {
            return (*Value())[ItemName_SizeConstant()];
        }
        bool Get_SizeConstant(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SizeConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_SizeConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SizeVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SizeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SizeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SizeVariable()))
                {
                    Construct_SizeVariable();
                }
                if ((*Value()).hasMember(ItemName_SizeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SizeVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SizeVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SizeVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SizeVariable(void) const
        {
            return (*Value())[ItemName_SizeVariable()];
        }
        bool Get_SizeVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SizeVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_SizeVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowTypeEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeEntryType()))
                {
                    Construct_WindowTypeEntryType();
                }
                if ((*Value()).hasMember(ItemName_WindowTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowTypeEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowTypeEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowTypeEntryType(void) const
        {
            return (*Value())[ItemName_WindowTypeEntryType()];
        }
        bool Get_WindowTypeEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowTypeEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowTypeEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowTypeConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeConstant()))
                {
                    Construct_WindowTypeConstant();
                }
                if ((*Value()).hasMember(ItemName_WindowTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowTypeConstant(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowTypeConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowTypeConstant(void) const
        {
            return (*Value())[ItemName_WindowTypeConstant()];
        }
        bool Get_WindowTypeConstant(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowTypeConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowTypeConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowTypeVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowTypeVariable()))
                {
                    Construct_WindowTypeVariable();
                }
                if ((*Value()).hasMember(ItemName_WindowTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowTypeVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowTypeVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowTypeVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowTypeVariable(void) const
        {
            return (*Value())[ItemName_WindowTypeVariable()];
        }
        bool Get_WindowTypeVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowTypeVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowTypeVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterTypeEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowParameterTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeEntryType()))
                {
                    Construct_WindowParameterTypeEntryType();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterTypeEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterTypeEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowParameterTypeEntryType(void) const
        {
            return (*Value())[ItemName_WindowParameterTypeEntryType()];
        }
        bool Get_WindowParameterTypeEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterTypeEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterTypeEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterTypeConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowParameterTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeConstant()))
                {
                    Construct_WindowParameterTypeConstant();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterTypeConstant(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterTypeConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowParameterTypeConstant(void) const
        {
            return (*Value())[ItemName_WindowParameterTypeConstant()];
        }
        bool Get_WindowParameterTypeConstant(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterTypeConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterTypeConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterTypeVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowParameterTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterTypeVariable()))
                {
                    Construct_WindowParameterTypeVariable();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterTypeVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterTypeVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterTypeVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowParameterTypeVariable(void) const
        {
            return (*Value())[ItemName_WindowParameterTypeVariable()];
        }
        bool Get_WindowParameterTypeVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterTypeVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterTypeVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowParameterEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterEntryType()))
                {
                    Construct_WindowParameterEntryType();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowParameterEntryType(void) const
        {
            return (*Value())[ItemName_WindowParameterEntryType()];
        }
        bool Get_WindowParameterEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WindowParameterConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WindowParameterConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterConstant()))
                {
                    Construct_WindowParameterConstant();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WindowParameterConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterConstant(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WindowParameterConstant(void) const
        {
            return (*Value())[ItemName_WindowParameterConstant()];
        }
        bool Get_WindowParameterConstant(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WindowParameterVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_WindowParameterVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WindowParameterVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WindowParameterVariable()))
                {
                    Construct_WindowParameterVariable();
                }
                if ((*Value()).hasMember(ItemName_WindowParameterVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_WindowParameterVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WindowParameterVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_WindowParameterVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_WindowParameterVariable(void) const
        {
            return (*Value())[ItemName_WindowParameterVariable()];
        }
        bool Get_WindowParameterVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WindowParameterVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_WindowParameterVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeDomainBufferOverlappingPercentageEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimeDomainBufferOverlappingPercentageEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeDomainBufferOverlappingPercentageEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageEntryType()))
                {
                    Construct_TimeDomainBufferOverlappingPercentageEntryType();
                }
                if ((*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeDomainBufferOverlappingPercentageEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimeDomainBufferOverlappingPercentageEntryType(void) const
        {
            return (*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()];
        }
        bool Get_TimeDomainBufferOverlappingPercentageEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeDomainBufferOverlappingPercentageEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeDomainBufferOverlappingPercentageConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimeDomainBufferOverlappingPercentageConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeDomainBufferOverlappingPercentageConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageConstant()))
                {
                    Construct_TimeDomainBufferOverlappingPercentageConstant();
                }
                if ((*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeDomainBufferOverlappingPercentageConstant(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimeDomainBufferOverlappingPercentageConstant(void) const
        {
            return (*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()];
        }
        bool Get_TimeDomainBufferOverlappingPercentageConstant(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeDomainBufferOverlappingPercentageConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeDomainBufferOverlappingPercentageVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimeDomainBufferOverlappingPercentageVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeDomainBufferOverlappingPercentageVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageVariable()))
                {
                    Construct_TimeDomainBufferOverlappingPercentageVariable();
                }
                if ((*Value()).hasMember(ItemName_TimeDomainBufferOverlappingPercentageVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeDomainBufferOverlappingPercentageVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimeDomainBufferOverlappingPercentageVariable(void) const
        {
            return (*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()];
        }
        bool Get_TimeDomainBufferOverlappingPercentageVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeDomainBufferOverlappingPercentageVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableGeneratingTemporaryFilesEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_EnableGeneratingTemporaryFilesEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableGeneratingTemporaryFilesEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesEntryType()))
                {
                    Construct_EnableGeneratingTemporaryFilesEntryType();
                }
                if ((*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableGeneratingTemporaryFilesEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_EnableGeneratingTemporaryFilesEntryType(void) const
        {
            return (*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()];
        }
        bool Get_EnableGeneratingTemporaryFilesEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableGeneratingTemporaryFilesEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableGeneratingTemporaryFilesConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableGeneratingTemporaryFilesConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableGeneratingTemporaryFilesConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesConstant()))
                {
                    Construct_EnableGeneratingTemporaryFilesConstant();
                }
                if ((*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableGeneratingTemporaryFilesConstant(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableGeneratingTemporaryFilesConstant(void) const
        {
            return (*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()];
        }
        bool Get_EnableGeneratingTemporaryFilesConstant(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableGeneratingTemporaryFilesConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableGeneratingTemporaryFilesVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_EnableGeneratingTemporaryFilesVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableGeneratingTemporaryFilesVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesVariable()))
                {
                    Construct_EnableGeneratingTemporaryFilesVariable();
                }
                if ((*Value()).hasMember(ItemName_EnableGeneratingTemporaryFilesVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableGeneratingTemporaryFilesVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_EnableGeneratingTemporaryFilesVariable(void) const
        {
            return (*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()];
        }
        bool Get_EnableGeneratingTemporaryFilesVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableGeneratingTemporaryFilesVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SignalCalculationTypeEntryType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SignalCalculationTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeEntryType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SignalCalculationTypeEntryType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeEntryType()))
                {
                    Construct_SignalCalculationTypeEntryType();
                }
                if ((*Value()).hasMember(ItemName_SignalCalculationTypeEntryType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeEntryType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalCalculationTypeEntryType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalCalculationTypeEntryType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SignalCalculationTypeEntryType(void) const
        {
            return (*Value())[ItemName_SignalCalculationTypeEntryType()];
        }
        bool Get_SignalCalculationTypeEntryType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalCalculationTypeEntryType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SignalCalculationTypeEntryType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SignalCalculationTypeConstant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SignalCalculationTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeConstant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SignalCalculationTypeConstant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeConstant()))
                {
                    Construct_SignalCalculationTypeConstant();
                }
                if ((*Value()).hasMember(ItemName_SignalCalculationTypeConstant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeConstant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalCalculationTypeConstant(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalCalculationTypeConstant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SignalCalculationTypeConstant(void) const
        {
            return (*Value())[ItemName_SignalCalculationTypeConstant()];
        }
        bool Get_SignalCalculationTypeConstant(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalCalculationTypeConstant()]).valid())
                {
                    GetValue = (*Value())[ItemName_SignalCalculationTypeConstant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SignalCalculationTypeVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SignalCalculationTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SignalCalculationTypeVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalCalculationTypeVariable()))
                {
                    Construct_SignalCalculationTypeVariable();
                }
                if ((*Value()).hasMember(ItemName_SignalCalculationTypeVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalCalculationTypeVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalCalculationTypeVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalCalculationTypeVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SignalCalculationTypeVariable(void) const
        {
            return (*Value())[ItemName_SignalCalculationTypeVariable()];
        }
        bool Get_SignalCalculationTypeVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalCalculationTypeVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_SignalCalculationTypeVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EvaluatorCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_EvaluatorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EvaluatorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_EvaluatorCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EvaluatorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EvaluatorCount()))
                {
                    Construct_EvaluatorCount();
                }
                if ((*Value()).hasMember(ItemName_EvaluatorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_EvaluatorCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EvaluatorCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_EvaluatorCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_EvaluatorCount(void) const
        {
            return (*Value())[ItemName_EvaluatorCount()];
        }
        bool Get_EvaluatorCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EvaluatorCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_EvaluatorCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator0 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator0()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator0()))
                {
                    Construct_Evaluator0();
                }
                if ((*Value()).hasMember(ItemName_Evaluator0()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator0(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator0(void) const
        {
            return (*Value())[ItemName_Evaluator0()];
        }
        bool Get_Evaluator0(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator1 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator1()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator1()))
                {
                    Construct_Evaluator1();
                }
                if ((*Value()).hasMember(ItemName_Evaluator1()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator1(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator1(void) const
        {
            return (*Value())[ItemName_Evaluator1()];
        }
        bool Get_Evaluator1(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator2 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator2()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator2()))
                {
                    Construct_Evaluator2();
                }
                if ((*Value()).hasMember(ItemName_Evaluator2()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator2(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator2(void) const
        {
            return (*Value())[ItemName_Evaluator2()];
        }
        bool Get_Evaluator2(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator3 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator3()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator3()))
                {
                    Construct_Evaluator3();
                }
                if ((*Value()).hasMember(ItemName_Evaluator3()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator3(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator3(void) const
        {
            return (*Value())[ItemName_Evaluator3()];
        }
        bool Get_Evaluator3(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator4 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator4()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator4()))
                {
                    Construct_Evaluator4();
                }
                if ((*Value()).hasMember(ItemName_Evaluator4()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator4(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator4(void) const
        {
            return (*Value())[ItemName_Evaluator4()];
        }
        bool Get_Evaluator4(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator5 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator5()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator5()))
                {
                    Construct_Evaluator5();
                }
                if ((*Value()).hasMember(ItemName_Evaluator5()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator5(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator5(void) const
        {
            return (*Value())[ItemName_Evaluator5()];
        }
        bool Get_Evaluator5(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator5()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator6 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator6()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator6()))
                {
                    Construct_Evaluator6();
                }
                if ((*Value()).hasMember(ItemName_Evaluator6()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator6(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator6(void) const
        {
            return (*Value())[ItemName_Evaluator6()];
        }
        bool Get_Evaluator6(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator6()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator7 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator7()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator7()))
                {
                    Construct_Evaluator7();
                }
                if ((*Value()).hasMember(ItemName_Evaluator7()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator7(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator7(void) const
        {
            return (*Value())[ItemName_Evaluator7()];
        }
        bool Get_Evaluator7(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator7()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator8 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator8()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator8()))
                {
                    Construct_Evaluator8();
                }
                if ((*Value()).hasMember(ItemName_Evaluator8()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator8(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator8(void) const
        {
            return (*Value())[ItemName_Evaluator8()];
        }
        bool Get_Evaluator8(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator8()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator9 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator9()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator9()))
                {
                    Construct_Evaluator9();
                }
                if ((*Value()).hasMember(ItemName_Evaluator9()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator9(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator9(void) const
        {
            return (*Value())[ItemName_Evaluator9()];
        }
        bool Get_Evaluator9(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator9()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator10 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator10()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator10()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator10()))
                {
                    Construct_Evaluator10();
                }
                if ((*Value()).hasMember(ItemName_Evaluator10()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator10()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator10(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator10()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator10(void) const
        {
            return (*Value())[ItemName_Evaluator10()];
        }
        bool Get_Evaluator10(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator10()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator10()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator11 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator11()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator11()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator11()))
                {
                    Construct_Evaluator11();
                }
                if ((*Value()).hasMember(ItemName_Evaluator11()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator11()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator11(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator11()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator11(void) const
        {
            return (*Value())[ItemName_Evaluator11()];
        }
        bool Get_Evaluator11(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator11()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator11()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator12 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator12()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator12()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator12()))
                {
                    Construct_Evaluator12();
                }
                if ((*Value()).hasMember(ItemName_Evaluator12()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator12()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator12(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator12()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator12(void) const
        {
            return (*Value())[ItemName_Evaluator12()];
        }
        bool Get_Evaluator12(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator12()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator12()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator13 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator13()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator13()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator13()))
                {
                    Construct_Evaluator13();
                }
                if ((*Value()).hasMember(ItemName_Evaluator13()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator13()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator13(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator13()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator13(void) const
        {
            return (*Value())[ItemName_Evaluator13()];
        }
        bool Get_Evaluator13(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator13()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator13()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator14 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator14()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator14()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator14()))
                {
                    Construct_Evaluator14();
                }
                if ((*Value()).hasMember(ItemName_Evaluator14()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator14()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator14(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator14()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator14(void) const
        {
            return (*Value())[ItemName_Evaluator14()];
        }
        bool Get_Evaluator14(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator14()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator14()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator15 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator15()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator15()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator15()))
                {
                    Construct_Evaluator15();
                }
                if ((*Value()).hasMember(ItemName_Evaluator15()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator15()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator15(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator15()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator15(void) const
        {
            return (*Value())[ItemName_Evaluator15()];
        }
        bool Get_Evaluator15(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator15()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator15()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator16 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator16()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator16()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator16()))
                {
                    Construct_Evaluator16();
                }
                if ((*Value()).hasMember(ItemName_Evaluator16()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator16()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator16(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator16()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator16(void) const
        {
            return (*Value())[ItemName_Evaluator16()];
        }
        bool Get_Evaluator16(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator16()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator16()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator17 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator17()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator17()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator17()))
                {
                    Construct_Evaluator17();
                }
                if ((*Value()).hasMember(ItemName_Evaluator17()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator17()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator17(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator17()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator17(void) const
        {
            return (*Value())[ItemName_Evaluator17()];
        }
        bool Get_Evaluator17(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator17()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator17()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator18 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator18()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator18()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator18()))
                {
                    Construct_Evaluator18();
                }
                if ((*Value()).hasMember(ItemName_Evaluator18()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator18()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator18(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator18()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator18(void) const
        {
            return (*Value())[ItemName_Evaluator18()];
        }
        bool Get_Evaluator18(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator18()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator18()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Evaluator19 (Type: "CType_Config_Universal_Function_FFT_Processor_Evaluator")
    protected:
        void Construct_Evaluator19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator19()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator19()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Evaluator19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Evaluator19()))
                {
                    Construct_Evaluator19();
                }
                if ((*Value()).hasMember(ItemName_Evaluator19()))
                {
                    CType_Config_Universal_Function_FFT_Processor_Evaluator InitValue;
                    (*Value())[ItemName_Evaluator19()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Evaluator19(const CType_Config_Universal_Function_FFT_Processor_Evaluator& SetValue)
        {
            try
            {
                (*Value())[ItemName_Evaluator19()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor_Evaluator Get_Evaluator19(void) const
        {
            return (*Value())[ItemName_Evaluator19()];
        }
        bool Get_Evaluator19(CType_Config_Universal_Function_FFT_Processor_Evaluator& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Evaluator19()]).valid())
                {
                    GetValue = (*Value())[ItemName_Evaluator19()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Function_FFT_Processor


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Function_FFT
//------------------------------------------------------------------------
class CType_Config_Universal_Function_FFT : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ProcessorCount(void)
        {
            static std::string str("ProcessorCount");
            return str;
        }
    public:
        static std::string const& ItemName_Processor0(void)
        {
            static std::string str("Processor0");
            return str;
        }
    public:
        static std::string const& ItemName_Processor1(void)
        {
            static std::string str("Processor1");
            return str;
        }
    public:
        static std::string const& ItemName_Processor2(void)
        {
            static std::string str("Processor2");
            return str;
        }
    public:
        static std::string const& ItemName_Processor3(void)
        {
            static std::string str("Processor3");
            return str;
        }
    public:
        static std::string const& ItemName_Processor4(void)
        {
            static std::string str("Processor4");
            return str;
        }
    public:
        static std::string const& ItemName_Processor5(void)
        {
            static std::string str("Processor5");
            return str;
        }
    public:
        static std::string const& ItemName_Processor6(void)
        {
            static std::string str("Processor6");
            return str;
        }
    public:
        static std::string const& ItemName_Processor7(void)
        {
            static std::string str("Processor7");
            return str;
        }
    public:
        static std::string const& ItemName_Processor8(void)
        {
            static std::string str("Processor8");
            return str;
        }
    public:
        static std::string const& ItemName_Processor9(void)
        {
            static std::string str("Processor9");
            return str;
        }
    public:
        static std::string const& ItemName_Processor10(void)
        {
            static std::string str("Processor10");
            return str;
        }
    public:
        static std::string const& ItemName_Processor11(void)
        {
            static std::string str("Processor11");
            return str;
        }
    public:
        static std::string const& ItemName_Processor12(void)
        {
            static std::string str("Processor12");
            return str;
        }
    public:
        static std::string const& ItemName_Processor13(void)
        {
            static std::string str("Processor13");
            return str;
        }
    public:
        static std::string const& ItemName_Processor14(void)
        {
            static std::string str("Processor14");
            return str;
        }
    public:
        static std::string const& ItemName_Processor15(void)
        {
            static std::string str("Processor15");
            return str;
        }
    public:
        static std::string const& ItemName_Processor16(void)
        {
            static std::string str("Processor16");
            return str;
        }
    public:
        static std::string const& ItemName_Processor17(void)
        {
            static std::string str("Processor17");
            return str;
        }
    public:
        static std::string const& ItemName_Processor18(void)
        {
            static std::string str("Processor18");
            return str;
        }
    public:
        static std::string const& ItemName_Processor19(void)
        {
            static std::string str("Processor19");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Function_FFT");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10052");
        return str;
    }
public:
    CType_Config_Universal_Function_FFT(void)
    {
        try
        {
            Construct_ProcessorCount();
            Construct_Processor0();
            Construct_Processor1();
            Construct_Processor2();
            Construct_Processor3();
            Construct_Processor4();
            Construct_Processor5();
            Construct_Processor6();
            Construct_Processor7();
            Construct_Processor8();
            Construct_Processor9();
            Construct_Processor10();
            Construct_Processor11();
            Construct_Processor12();
            Construct_Processor13();
            Construct_Processor14();
            Construct_Processor15();
            Construct_Processor16();
            Construct_Processor17();
            Construct_Processor18();
            Construct_Processor19();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Function_FFT(const CType_Config_Universal_Function_FFT& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Function_FFT(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ProcessorCount();
            Construct_Processor0();
            Construct_Processor1();
            Construct_Processor2();
            Construct_Processor3();
            Construct_Processor4();
            Construct_Processor5();
            Construct_Processor6();
            Construct_Processor7();
            Construct_Processor8();
            Construct_Processor9();
            Construct_Processor10();
            Construct_Processor11();
            Construct_Processor12();
            Construct_Processor13();
            Construct_Processor14();
            Construct_Processor15();
            Construct_Processor16();
            Construct_Processor17();
            Construct_Processor18();
            Construct_Processor19();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Function_FFT(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ProcessorCount();
            Initialize_Processor0();
            Initialize_Processor1();
            Initialize_Processor2();
            Initialize_Processor3();
            Initialize_Processor4();
            Initialize_Processor5();
            Initialize_Processor6();
            Initialize_Processor7();
            Initialize_Processor8();
            Initialize_Processor9();
            Initialize_Processor10();
            Initialize_Processor11();
            Initialize_Processor12();
            Initialize_Processor13();
            Initialize_Processor14();
            Initialize_Processor15();
            Initialize_Processor16();
            Initialize_Processor17();
            Initialize_Processor18();
            Initialize_Processor19();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ProcessorCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ProcessorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ProcessorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ProcessorCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ProcessorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ProcessorCount()))
                {
                    Construct_ProcessorCount();
                }
                if ((*Value()).hasMember(ItemName_ProcessorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ProcessorCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ProcessorCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ProcessorCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ProcessorCount(void) const
        {
            return (*Value())[ItemName_ProcessorCount()];
        }
        bool Get_ProcessorCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ProcessorCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_ProcessorCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor0 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor0()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor0()))
                {
                    Construct_Processor0();
                }
                if ((*Value()).hasMember(ItemName_Processor0()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor0(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor0(void) const
        {
            return (*Value())[ItemName_Processor0()];
        }
        bool Get_Processor0(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor1 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor1()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor1()))
                {
                    Construct_Processor1();
                }
                if ((*Value()).hasMember(ItemName_Processor1()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor1(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor1(void) const
        {
            return (*Value())[ItemName_Processor1()];
        }
        bool Get_Processor1(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor2 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor2()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor2()))
                {
                    Construct_Processor2();
                }
                if ((*Value()).hasMember(ItemName_Processor2()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor2(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor2(void) const
        {
            return (*Value())[ItemName_Processor2()];
        }
        bool Get_Processor2(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor3 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor3()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor3()))
                {
                    Construct_Processor3();
                }
                if ((*Value()).hasMember(ItemName_Processor3()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor3(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor3(void) const
        {
            return (*Value())[ItemName_Processor3()];
        }
        bool Get_Processor3(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor4 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor4()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor4()))
                {
                    Construct_Processor4();
                }
                if ((*Value()).hasMember(ItemName_Processor4()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor4(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor4(void) const
        {
            return (*Value())[ItemName_Processor4()];
        }
        bool Get_Processor4(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor4()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor5 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor5()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor5()))
                {
                    Construct_Processor5();
                }
                if ((*Value()).hasMember(ItemName_Processor5()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor5(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor5(void) const
        {
            return (*Value())[ItemName_Processor5()];
        }
        bool Get_Processor5(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor5()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor6 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor6()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor6()))
                {
                    Construct_Processor6();
                }
                if ((*Value()).hasMember(ItemName_Processor6()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor6(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor6(void) const
        {
            return (*Value())[ItemName_Processor6()];
        }
        bool Get_Processor6(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor6()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor7 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor7()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor7()))
                {
                    Construct_Processor7();
                }
                if ((*Value()).hasMember(ItemName_Processor7()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor7(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor7(void) const
        {
            return (*Value())[ItemName_Processor7()];
        }
        bool Get_Processor7(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor7()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor8 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor8()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor8()))
                {
                    Construct_Processor8();
                }
                if ((*Value()).hasMember(ItemName_Processor8()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor8(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor8(void) const
        {
            return (*Value())[ItemName_Processor8()];
        }
        bool Get_Processor8(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor8()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor9 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor9()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor9()))
                {
                    Construct_Processor9();
                }
                if ((*Value()).hasMember(ItemName_Processor9()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor9(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor9(void) const
        {
            return (*Value())[ItemName_Processor9()];
        }
        bool Get_Processor9(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor9()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor10 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor10()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor10()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor10(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor10()))
                {
                    Construct_Processor10();
                }
                if ((*Value()).hasMember(ItemName_Processor10()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor10()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor10(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor10()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor10(void) const
        {
            return (*Value())[ItemName_Processor10()];
        }
        bool Get_Processor10(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor10()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor10()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor11 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor11()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor11()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor11(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor11()))
                {
                    Construct_Processor11();
                }
                if ((*Value()).hasMember(ItemName_Processor11()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor11()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor11(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor11()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor11(void) const
        {
            return (*Value())[ItemName_Processor11()];
        }
        bool Get_Processor11(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor11()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor11()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor12 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor12()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor12()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor12()))
                {
                    Construct_Processor12();
                }
                if ((*Value()).hasMember(ItemName_Processor12()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor12()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor12(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor12()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor12(void) const
        {
            return (*Value())[ItemName_Processor12()];
        }
        bool Get_Processor12(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor12()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor12()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor13 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor13()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor13()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor13(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor13()))
                {
                    Construct_Processor13();
                }
                if ((*Value()).hasMember(ItemName_Processor13()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor13()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor13(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor13()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor13(void) const
        {
            return (*Value())[ItemName_Processor13()];
        }
        bool Get_Processor13(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor13()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor13()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor14 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor14()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor14()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor14(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor14()))
                {
                    Construct_Processor14();
                }
                if ((*Value()).hasMember(ItemName_Processor14()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor14()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor14(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor14()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor14(void) const
        {
            return (*Value())[ItemName_Processor14()];
        }
        bool Get_Processor14(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor14()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor14()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor15 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor15()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor15()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor15(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor15()))
                {
                    Construct_Processor15();
                }
                if ((*Value()).hasMember(ItemName_Processor15()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor15()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor15(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor15()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor15(void) const
        {
            return (*Value())[ItemName_Processor15()];
        }
        bool Get_Processor15(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor15()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor15()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor16 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor16()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor16()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor16(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor16()))
                {
                    Construct_Processor16();
                }
                if ((*Value()).hasMember(ItemName_Processor16()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor16()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor16(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor16()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor16(void) const
        {
            return (*Value())[ItemName_Processor16()];
        }
        bool Get_Processor16(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor16()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor16()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor17 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor17()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor17()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor17(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor17()))
                {
                    Construct_Processor17();
                }
                if ((*Value()).hasMember(ItemName_Processor17()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor17()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor17(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor17()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor17(void) const
        {
            return (*Value())[ItemName_Processor17()];
        }
        bool Get_Processor17(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor17()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor17()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor18 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor18()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor18()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor18(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor18()))
                {
                    Construct_Processor18();
                }
                if ((*Value()).hasMember(ItemName_Processor18()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor18()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor18(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor18()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor18(void) const
        {
            return (*Value())[ItemName_Processor18()];
        }
        bool Get_Processor18(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor18()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor18()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Processor19 (Type: "CType_Config_Universal_Function_FFT_Processor")
    protected:
        void Construct_Processor19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor19()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor19()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Processor19(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Processor19()))
                {
                    Construct_Processor19();
                }
                if ((*Value()).hasMember(ItemName_Processor19()))
                {
                    CType_Config_Universal_Function_FFT_Processor InitValue;
                    (*Value())[ItemName_Processor19()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Processor19(const CType_Config_Universal_Function_FFT_Processor& SetValue)
        {
            try
            {
                (*Value())[ItemName_Processor19()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT_Processor Get_Processor19(void) const
        {
            return (*Value())[ItemName_Processor19()];
        }
        bool Get_Processor19(CType_Config_Universal_Function_FFT_Processor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Processor19()]).valid())
                {
                    GetValue = (*Value())[ItemName_Processor19()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Function_FFT


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_Function
//------------------------------------------------------------------------
class CType_Config_Universal_Function : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_AvailableProcessImageVariablesRead(void)
        {
            static std::string str("AvailableProcessImageVariablesRead");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableProcessImageVariablesWrite(void)
        {
            static std::string str("AvailableProcessImageVariablesWrite");
            return str;
        }
    public:
        static std::string const& ItemName_FFT(void)
        {
            static std::string str("FFT");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_Function");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10053");
        return str;
    }
public:
    CType_Config_Universal_Function(void)
    {
        try
        {
            Construct_AvailableProcessImageVariablesRead();
            Construct_AvailableProcessImageVariablesWrite();
            Construct_FFT();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_Function(const CType_Config_Universal_Function& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_Function(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_AvailableProcessImageVariablesRead();
            Construct_AvailableProcessImageVariablesWrite();
            Construct_FFT();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_Function(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_AvailableProcessImageVariablesRead();
            Initialize_AvailableProcessImageVariablesWrite();
            Initialize_FFT();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item AvailableProcessImageVariablesRead (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableProcessImageVariablesRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableProcessImageVariablesRead()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableProcessImageVariablesRead()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableProcessImageVariablesRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableProcessImageVariablesRead()))
                {
                    Construct_AvailableProcessImageVariablesRead();
                }
                if ((*Value()).hasMember(ItemName_AvailableProcessImageVariablesRead()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableProcessImageVariablesRead()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableProcessImageVariablesRead(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableProcessImageVariablesRead()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableProcessImageVariablesRead(void) const
        {
            return (*Value())[ItemName_AvailableProcessImageVariablesRead()];
        }
        bool Get_AvailableProcessImageVariablesRead(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableProcessImageVariablesRead()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableProcessImageVariablesRead()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableProcessImageVariablesWrite (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableProcessImageVariablesWrite(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableProcessImageVariablesWrite()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableProcessImageVariablesWrite()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableProcessImageVariablesWrite(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableProcessImageVariablesWrite()))
                {
                    Construct_AvailableProcessImageVariablesWrite();
                }
                if ((*Value()).hasMember(ItemName_AvailableProcessImageVariablesWrite()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableProcessImageVariablesWrite()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableProcessImageVariablesWrite(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableProcessImageVariablesWrite()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableProcessImageVariablesWrite(void) const
        {
            return (*Value())[ItemName_AvailableProcessImageVariablesWrite()];
        }
        bool Get_AvailableProcessImageVariablesWrite(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableProcessImageVariablesWrite()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableProcessImageVariablesWrite()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FFT (Type: "CType_Config_Universal_Function_FFT")
    protected:
        void Construct_FFT(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FFT()))
                {
                    CType_Config_Universal_Function_FFT InitValue;
                    (*Value())[ItemName_FFT()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FFT(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FFT()))
                {
                    Construct_FFT();
                }
                if ((*Value()).hasMember(ItemName_FFT()))
                {
                    CType_Config_Universal_Function_FFT InitValue;
                    (*Value())[ItemName_FFT()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FFT(const CType_Config_Universal_Function_FFT& SetValue)
        {
            try
            {
                (*Value())[ItemName_FFT()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function_FFT Get_FFT(void) const
        {
            return (*Value())[ItemName_FFT()];
        }
        bool Get_FFT(CType_Config_Universal_Function_FFT& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FFT()]).valid())
                {
                    GetValue = (*Value())[ItemName_FFT()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_Function


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_Software
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_Software : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_PacKernelMode(void)
        {
            static std::string str("PacKernelMode");
            return str;
        }
    public:
        static std::string const& ItemName_PluginsMode(void)
        {
            static std::string str("PluginsMode");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_Software");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10100");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_Software(void)
    {
        try
        {
            Construct_PacKernelMode();
            Construct_PluginsMode();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_Software(const CType_Config_Universal_General_Additional_Software& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_Software(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_PacKernelMode();
            Construct_PluginsMode();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_Software(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_PacKernelMode();
            Initialize_PluginsMode();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item PacKernelMode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_PacKernelMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PacKernelMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PacKernelMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PacKernelMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PacKernelMode()))
                {
                    Construct_PacKernelMode();
                }
                if ((*Value()).hasMember(ItemName_PacKernelMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PacKernelMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PacKernelMode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_PacKernelMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_PacKernelMode(void) const
        {
            return (*Value())[ItemName_PacKernelMode()];
        }
        bool Get_PacKernelMode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PacKernelMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_PacKernelMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PluginsMode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_PluginsMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PluginsMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PluginsMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PluginsMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PluginsMode()))
                {
                    Construct_PluginsMode();
                }
                if ((*Value()).hasMember(ItemName_PluginsMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PluginsMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PluginsMode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_PluginsMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_PluginsMode(void) const
        {
            return (*Value())[ItemName_PluginsMode()];
        }
        bool Get_PluginsMode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PluginsMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_PluginsMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_Software


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_LifeSignalSG
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_LifeSignalSG : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OnNoError(void)
        {
            static std::string str("OnNoError");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostTransparentPort(void)
        {
            static std::string str("OnHostTransparentPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostPacKernelPort(void)
        {
            static std::string str("OnHostPacKernelPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostHighspeedUDPPort(void)
        {
            static std::string str("OnHostHighspeedUDPPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostHighspeedTCPIPPort(void)
        {
            static std::string str("OnHostHighspeedTCPIPPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostDistributorPort(void)
        {
            static std::string str("OnHostDistributorPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostDataPort(void)
        {
            static std::string str("OnHostDataPort");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostFieldbus(void)
        {
            static std::string str("OnHostFieldbus");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostFTP(void)
        {
            static std::string str("OnHostFTP");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostRS232Port(void)
        {
            static std::string str("OnHostRS232Port");
            return str;
        }
    public:
        static std::string const& ItemName_OnHostRS485Port(void)
        {
            static std::string str("OnHostRS485Port");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_LifeSignalSG");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10101");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_LifeSignalSG(void)
    {
        try
        {
            Construct_OnNoError();
            Construct_OnHostTransparentPort();
            Construct_OnHostPacKernelPort();
            Construct_OnHostHighspeedUDPPort();
            Construct_OnHostHighspeedTCPIPPort();
            Construct_OnHostDistributorPort();
            Construct_OnHostDataPort();
            Construct_OnHostFieldbus();
            Construct_OnHostFTP();
            Construct_OnHostRS232Port();
            Construct_OnHostRS485Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_LifeSignalSG(const CType_Config_Universal_General_Additional_LifeSignalSG& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_LifeSignalSG(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OnNoError();
            Construct_OnHostTransparentPort();
            Construct_OnHostPacKernelPort();
            Construct_OnHostHighspeedUDPPort();
            Construct_OnHostHighspeedTCPIPPort();
            Construct_OnHostDistributorPort();
            Construct_OnHostDataPort();
            Construct_OnHostFieldbus();
            Construct_OnHostFTP();
            Construct_OnHostRS232Port();
            Construct_OnHostRS485Port();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_LifeSignalSG(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OnNoError();
            Initialize_OnHostTransparentPort();
            Initialize_OnHostPacKernelPort();
            Initialize_OnHostHighspeedUDPPort();
            Initialize_OnHostHighspeedTCPIPPort();
            Initialize_OnHostDistributorPort();
            Initialize_OnHostDataPort();
            Initialize_OnHostFieldbus();
            Initialize_OnHostFTP();
            Initialize_OnHostRS232Port();
            Initialize_OnHostRS485Port();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OnNoError (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnNoError(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnNoError()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnNoError()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnNoError(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnNoError()))
                {
                    Construct_OnNoError();
                }
                if ((*Value()).hasMember(ItemName_OnNoError()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnNoError()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnNoError(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnNoError()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnNoError(void) const
        {
            return (*Value())[ItemName_OnNoError()];
        }
        bool Get_OnNoError(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnNoError()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnNoError()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostTransparentPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostTransparentPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostTransparentPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostTransparentPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostTransparentPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostTransparentPort()))
                {
                    Construct_OnHostTransparentPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostTransparentPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostTransparentPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostTransparentPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostTransparentPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostTransparentPort(void) const
        {
            return (*Value())[ItemName_OnHostTransparentPort()];
        }
        bool Get_OnHostTransparentPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostTransparentPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostTransparentPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostPacKernelPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostPacKernelPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostPacKernelPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostPacKernelPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostPacKernelPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostPacKernelPort()))
                {
                    Construct_OnHostPacKernelPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostPacKernelPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostPacKernelPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostPacKernelPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostPacKernelPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostPacKernelPort(void) const
        {
            return (*Value())[ItemName_OnHostPacKernelPort()];
        }
        bool Get_OnHostPacKernelPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostPacKernelPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostPacKernelPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostHighspeedUDPPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostHighspeedUDPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostHighspeedUDPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostHighspeedUDPPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostHighspeedUDPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostHighspeedUDPPort()))
                {
                    Construct_OnHostHighspeedUDPPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostHighspeedUDPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostHighspeedUDPPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostHighspeedUDPPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostHighspeedUDPPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostHighspeedUDPPort(void) const
        {
            return (*Value())[ItemName_OnHostHighspeedUDPPort()];
        }
        bool Get_OnHostHighspeedUDPPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostHighspeedUDPPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostHighspeedUDPPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostHighspeedTCPIPPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostHighspeedTCPIPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostHighspeedTCPIPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostHighspeedTCPIPPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostHighspeedTCPIPPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostHighspeedTCPIPPort()))
                {
                    Construct_OnHostHighspeedTCPIPPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostHighspeedTCPIPPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostHighspeedTCPIPPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostHighspeedTCPIPPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostHighspeedTCPIPPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostHighspeedTCPIPPort(void) const
        {
            return (*Value())[ItemName_OnHostHighspeedTCPIPPort()];
        }
        bool Get_OnHostHighspeedTCPIPPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostHighspeedTCPIPPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostHighspeedTCPIPPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostDistributorPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostDistributorPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostDistributorPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostDistributorPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostDistributorPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostDistributorPort()))
                {
                    Construct_OnHostDistributorPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostDistributorPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostDistributorPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostDistributorPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostDistributorPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostDistributorPort(void) const
        {
            return (*Value())[ItemName_OnHostDistributorPort()];
        }
        bool Get_OnHostDistributorPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostDistributorPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostDistributorPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostDataPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostDataPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostDataPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostDataPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostDataPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostDataPort()))
                {
                    Construct_OnHostDataPort();
                }
                if ((*Value()).hasMember(ItemName_OnHostDataPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostDataPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostDataPort(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostDataPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostDataPort(void) const
        {
            return (*Value())[ItemName_OnHostDataPort()];
        }
        bool Get_OnHostDataPort(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostDataPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostDataPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostFieldbus (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostFieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostFieldbus()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostFieldbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostFieldbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostFieldbus()))
                {
                    Construct_OnHostFieldbus();
                }
                if ((*Value()).hasMember(ItemName_OnHostFieldbus()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostFieldbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostFieldbus(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostFieldbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostFieldbus(void) const
        {
            return (*Value())[ItemName_OnHostFieldbus()];
        }
        bool Get_OnHostFieldbus(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostFieldbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostFieldbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostFTP (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostFTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostFTP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostFTP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostFTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostFTP()))
                {
                    Construct_OnHostFTP();
                }
                if ((*Value()).hasMember(ItemName_OnHostFTP()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostFTP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostFTP(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostFTP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostFTP(void) const
        {
            return (*Value())[ItemName_OnHostFTP()];
        }
        bool Get_OnHostFTP(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostFTP()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostFTP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostRS232Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostRS232Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostRS232Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostRS232Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostRS232Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostRS232Port()))
                {
                    Construct_OnHostRS232Port();
                }
                if ((*Value()).hasMember(ItemName_OnHostRS232Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostRS232Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostRS232Port(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostRS232Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostRS232Port(void) const
        {
            return (*Value())[ItemName_OnHostRS232Port()];
        }
        bool Get_OnHostRS232Port(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostRS232Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostRS232Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHostRS485Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHostRS485Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostRS485Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostRS485Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHostRS485Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHostRS485Port()))
                {
                    Construct_OnHostRS485Port();
                }
                if ((*Value()).hasMember(ItemName_OnHostRS485Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHostRS485Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHostRS485Port(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHostRS485Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHostRS485Port(void) const
        {
            return (*Value())[ItemName_OnHostRS485Port()];
        }
        bool Get_OnHostRS485Port(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHostRS485Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHostRS485Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_LifeSignalSG


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_LifeSignal
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_LifeSignal : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ToggleTime(void)
        {
            static std::string str("ToggleTime");
            return str;
        }
    public:
        static std::string const& ItemName_UseOutputVariableAsDestination(void)
        {
            static std::string str("UseOutputVariableAsDestination");
            return str;
        }
    public:
        static std::string const& ItemName_OutputVariableAsDestination(void)
        {
            static std::string str("OutputVariableAsDestination");
            return str;
        }
    public:
        static std::string const& ItemName_ItemsActiveANDed(void)
        {
            static std::string str("ItemsActiveANDed");
            return str;
        }
    public:
        static std::string const& ItemName_ItemsPassiveORed(void)
        {
            static std::string str("ItemsPassiveORed");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_LifeSignal");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10102");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_LifeSignal(void)
    {
        try
        {
            Construct_Type();
            Construct_ToggleTime();
            Construct_UseOutputVariableAsDestination();
            Construct_OutputVariableAsDestination();
            Construct_ItemsActiveANDed();
            Construct_ItemsPassiveORed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_LifeSignal(const CType_Config_Universal_General_Additional_LifeSignal& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_LifeSignal(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_ToggleTime();
            Construct_UseOutputVariableAsDestination();
            Construct_OutputVariableAsDestination();
            Construct_ItemsActiveANDed();
            Construct_ItemsPassiveORed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_LifeSignal(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_ToggleTime();
            Initialize_UseOutputVariableAsDestination();
            Initialize_OutputVariableAsDestination();
            Initialize_ItemsActiveANDed();
            Initialize_ItemsPassiveORed();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ToggleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ToggleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ToggleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ToggleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ToggleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ToggleTime()))
                {
                    Construct_ToggleTime();
                }
                if ((*Value()).hasMember(ItemName_ToggleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ToggleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ToggleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ToggleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ToggleTime(void) const
        {
            return (*Value())[ItemName_ToggleTime()];
        }
        bool Get_ToggleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ToggleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ToggleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UseOutputVariableAsDestination (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_UseOutputVariableAsDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UseOutputVariableAsDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_UseOutputVariableAsDestination()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UseOutputVariableAsDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UseOutputVariableAsDestination()))
                {
                    Construct_UseOutputVariableAsDestination();
                }
                if ((*Value()).hasMember(ItemName_UseOutputVariableAsDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_UseOutputVariableAsDestination()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UseOutputVariableAsDestination(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UseOutputVariableAsDestination()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_UseOutputVariableAsDestination(void) const
        {
            return (*Value())[ItemName_UseOutputVariableAsDestination()];
        }
        bool Get_UseOutputVariableAsDestination(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UseOutputVariableAsDestination()]).valid())
                {
                    GetValue = (*Value())[ItemName_UseOutputVariableAsDestination()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OutputVariableAsDestination (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_OutputVariableAsDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OutputVariableAsDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_OutputVariableAsDestination()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OutputVariableAsDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OutputVariableAsDestination()))
                {
                    Construct_OutputVariableAsDestination();
                }
                if ((*Value()).hasMember(ItemName_OutputVariableAsDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_OutputVariableAsDestination()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OutputVariableAsDestination(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_OutputVariableAsDestination()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_OutputVariableAsDestination(void) const
        {
            return (*Value())[ItemName_OutputVariableAsDestination()];
        }
        bool Get_OutputVariableAsDestination(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OutputVariableAsDestination()]).valid())
                {
                    GetValue = (*Value())[ItemName_OutputVariableAsDestination()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ItemsActiveANDed (Type: "CType_Config_Universal_General_Additional_LifeSignalSG")
    protected:
        void Construct_ItemsActiveANDed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ItemsActiveANDed()))
                {
                    CType_Config_Universal_General_Additional_LifeSignalSG InitValue;
                    (*Value())[ItemName_ItemsActiveANDed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ItemsActiveANDed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ItemsActiveANDed()))
                {
                    Construct_ItemsActiveANDed();
                }
                if ((*Value()).hasMember(ItemName_ItemsActiveANDed()))
                {
                    CType_Config_Universal_General_Additional_LifeSignalSG InitValue;
                    (*Value())[ItemName_ItemsActiveANDed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ItemsActiveANDed(const CType_Config_Universal_General_Additional_LifeSignalSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_ItemsActiveANDed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_LifeSignalSG Get_ItemsActiveANDed(void) const
        {
            return (*Value())[ItemName_ItemsActiveANDed()];
        }
        bool Get_ItemsActiveANDed(CType_Config_Universal_General_Additional_LifeSignalSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ItemsActiveANDed()]).valid())
                {
                    GetValue = (*Value())[ItemName_ItemsActiveANDed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ItemsPassiveORed (Type: "CType_Config_Universal_General_Additional_LifeSignalSG")
    protected:
        void Construct_ItemsPassiveORed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ItemsPassiveORed()))
                {
                    CType_Config_Universal_General_Additional_LifeSignalSG InitValue;
                    (*Value())[ItemName_ItemsPassiveORed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ItemsPassiveORed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ItemsPassiveORed()))
                {
                    Construct_ItemsPassiveORed();
                }
                if ((*Value()).hasMember(ItemName_ItemsPassiveORed()))
                {
                    CType_Config_Universal_General_Additional_LifeSignalSG InitValue;
                    (*Value())[ItemName_ItemsPassiveORed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ItemsPassiveORed(const CType_Config_Universal_General_Additional_LifeSignalSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_ItemsPassiveORed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_LifeSignalSG Get_ItemsPassiveORed(void) const
        {
            return (*Value())[ItemName_ItemsPassiveORed()];
        }
        bool Get_ItemsPassiveORed(CType_Config_Universal_General_Additional_LifeSignalSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ItemsPassiveORed()]).valid())
                {
                    GetValue = (*Value())[ItemName_ItemsPassiveORed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_LifeSignal


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_BufferPreInit
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_BufferPreInit : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_FillPattern(void)
        {
            static std::string str("FillPattern");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_BufferPreInit");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10103");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_BufferPreInit(void)
    {
        try
        {
            Construct_Type();
            Construct_FillPattern();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_BufferPreInit(const CType_Config_Universal_General_Additional_BufferPreInit& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_BufferPreInit(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_FillPattern();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_BufferPreInit(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_FillPattern();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FillPattern (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_FillPattern(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FillPattern()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FillPattern()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FillPattern(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FillPattern()))
                {
                    Construct_FillPattern();
                }
                if ((*Value()).hasMember(ItemName_FillPattern()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FillPattern()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FillPattern(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_FillPattern()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_FillPattern(void) const
        {
            return (*Value())[ItemName_FillPattern()];
        }
        bool Get_FillPattern(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FillPattern()]).valid())
                {
                    GetValue = (*Value())[ItemName_FillPattern()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_BufferPreInit


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_Watchdog
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_Watchdog : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_StartDelayTime(void)
        {
            static std::string str("StartDelayTime");
            return str;
        }
    public:
        static std::string const& ItemName_ReTriggerTime(void)
        {
            static std::string str("ReTriggerTime");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_Watchdog");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10104");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_Watchdog(void)
    {
        try
        {
            Construct_Type();
            Construct_StartDelayTime();
            Construct_ReTriggerTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_Watchdog(const CType_Config_Universal_General_Additional_Watchdog& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_Watchdog(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_StartDelayTime();
            Construct_ReTriggerTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_Watchdog(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_StartDelayTime();
            Initialize_ReTriggerTime();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StartDelayTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_StartDelayTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartDelayTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StartDelayTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartDelayTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartDelayTime()))
                {
                    Construct_StartDelayTime();
                }
                if ((*Value()).hasMember(ItemName_StartDelayTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_StartDelayTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartDelayTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartDelayTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_StartDelayTime(void) const
        {
            return (*Value())[ItemName_StartDelayTime()];
        }
        bool Get_StartDelayTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartDelayTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartDelayTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReTriggerTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ReTriggerTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReTriggerTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ReTriggerTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReTriggerTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReTriggerTime()))
                {
                    Construct_ReTriggerTime();
                }
                if ((*Value()).hasMember(ItemName_ReTriggerTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ReTriggerTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReTriggerTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReTriggerTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ReTriggerTime(void) const
        {
            return (*Value())[ItemName_ReTriggerTime()];
        }
        bool Get_ReTriggerTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReTriggerTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReTriggerTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_Watchdog


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional_UDBFCompatibility
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional_UDBFCompatibility : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Auto(void)
        {
            static std::string str("Auto");
            return str;
        }
    public:
        static std::string const& ItemName_AdditionalDataStructureID(void)
        {
            static std::string str("AdditionalDataStructureID");
            return str;
        }
    public:
        static std::string const& ItemName_VariableAdditionalDataStructureID(void)
        {
            static std::string str("VariableAdditionalDataStructureID");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional_UDBFCompatibility");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10105");
        return str;
    }
public:
    CType_Config_Universal_General_Additional_UDBFCompatibility(void)
    {
        try
        {
            Construct_Auto();
            Construct_AdditionalDataStructureID();
            Construct_VariableAdditionalDataStructureID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional_UDBFCompatibility(const CType_Config_Universal_General_Additional_UDBFCompatibility& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional_UDBFCompatibility(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Auto();
            Construct_AdditionalDataStructureID();
            Construct_VariableAdditionalDataStructureID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional_UDBFCompatibility(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Auto();
            Initialize_AdditionalDataStructureID();
            Initialize_VariableAdditionalDataStructureID();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Auto (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Auto(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Auto()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Auto()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Auto(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Auto()))
                {
                    Construct_Auto();
                }
                if ((*Value()).hasMember(ItemName_Auto()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Auto()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Auto(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Auto()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Auto(void) const
        {
            return (*Value())[ItemName_Auto()];
        }
        bool Get_Auto(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Auto()]).valid())
                {
                    GetValue = (*Value())[ItemName_Auto()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AdditionalDataStructureID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_AdditionalDataStructureID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AdditionalDataStructureID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_AdditionalDataStructureID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AdditionalDataStructureID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AdditionalDataStructureID()))
                {
                    Construct_AdditionalDataStructureID();
                }
                if ((*Value()).hasMember(ItemName_AdditionalDataStructureID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_AdditionalDataStructureID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AdditionalDataStructureID(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_AdditionalDataStructureID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_AdditionalDataStructureID(void) const
        {
            return (*Value())[ItemName_AdditionalDataStructureID()];
        }
        bool Get_AdditionalDataStructureID(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AdditionalDataStructureID()]).valid())
                {
                    GetValue = (*Value())[ItemName_AdditionalDataStructureID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VariableAdditionalDataStructureID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_VariableAdditionalDataStructureID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAdditionalDataStructureID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_VariableAdditionalDataStructureID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VariableAdditionalDataStructureID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAdditionalDataStructureID()))
                {
                    Construct_VariableAdditionalDataStructureID();
                }
                if ((*Value()).hasMember(ItemName_VariableAdditionalDataStructureID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_VariableAdditionalDataStructureID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VariableAdditionalDataStructureID(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_VariableAdditionalDataStructureID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_VariableAdditionalDataStructureID(void) const
        {
            return (*Value())[ItemName_VariableAdditionalDataStructureID()];
        }
        bool Get_VariableAdditionalDataStructureID(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VariableAdditionalDataStructureID()]).valid())
                {
                    GetValue = (*Value())[ItemName_VariableAdditionalDataStructureID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional_UDBFCompatibility


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_Additional
//------------------------------------------------------------------------
class CType_Config_Universal_General_Additional : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Software(void)
        {
            static std::string str("Software");
            return str;
        }
    public:
        static std::string const& ItemName_LifeSignal(void)
        {
            static std::string str("LifeSignal");
            return str;
        }
    public:
        static std::string const& ItemName_BufferPreInit(void)
        {
            static std::string str("BufferPreInit");
            return str;
        }
    public:
        static std::string const& ItemName_Watchdog(void)
        {
            static std::string str("Watchdog");
            return str;
        }
    public:
        static std::string const& ItemName_UDBFCompatibility(void)
        {
            static std::string str("UDBFCompatibility");
            return str;
        }
    public:
        static std::string const& ItemName_VariableAccessRulesRead(void)
        {
            static std::string str("VariableAccessRulesRead");
            return str;
        }
    public:
        static std::string const& ItemName_VariableAccessRulesWrite(void)
        {
            static std::string str("VariableAccessRulesWrite");
            return str;
        }
    public:
        static std::string const& ItemName_CANConfigs(void)
        {
            static std::string str("CANConfigs");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_Additional");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10106");
        return str;
    }
public:
    CType_Config_Universal_General_Additional(void)
    {
        try
        {
            Construct_Software();
            Construct_LifeSignal();
            Construct_BufferPreInit();
            Construct_Watchdog();
            Construct_UDBFCompatibility();
            Construct_VariableAccessRulesRead();
            Construct_VariableAccessRulesWrite();
            Construct_CANConfigs();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_Additional(const CType_Config_Universal_General_Additional& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_Additional(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Software();
            Construct_LifeSignal();
            Construct_BufferPreInit();
            Construct_Watchdog();
            Construct_UDBFCompatibility();
            Construct_VariableAccessRulesRead();
            Construct_VariableAccessRulesWrite();
            Construct_CANConfigs();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_Additional(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Software();
            Initialize_LifeSignal();
            Initialize_BufferPreInit();
            Initialize_Watchdog();
            Initialize_UDBFCompatibility();
            Initialize_VariableAccessRulesRead();
            Initialize_VariableAccessRulesWrite();
            Initialize_CANConfigs();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Software (Type: "CType_Config_Universal_General_Additional_Software")
    protected:
        void Construct_Software(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Software()))
                {
                    CType_Config_Universal_General_Additional_Software InitValue;
                    (*Value())[ItemName_Software()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Software(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Software()))
                {
                    Construct_Software();
                }
                if ((*Value()).hasMember(ItemName_Software()))
                {
                    CType_Config_Universal_General_Additional_Software InitValue;
                    (*Value())[ItemName_Software()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Software(const CType_Config_Universal_General_Additional_Software& SetValue)
        {
            try
            {
                (*Value())[ItemName_Software()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_Software Get_Software(void) const
        {
            return (*Value())[ItemName_Software()];
        }
        bool Get_Software(CType_Config_Universal_General_Additional_Software& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Software()]).valid())
                {
                    GetValue = (*Value())[ItemName_Software()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LifeSignal (Type: "CType_Config_Universal_General_Additional_LifeSignal")
    protected:
        void Construct_LifeSignal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LifeSignal()))
                {
                    CType_Config_Universal_General_Additional_LifeSignal InitValue;
                    (*Value())[ItemName_LifeSignal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LifeSignal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LifeSignal()))
                {
                    Construct_LifeSignal();
                }
                if ((*Value()).hasMember(ItemName_LifeSignal()))
                {
                    CType_Config_Universal_General_Additional_LifeSignal InitValue;
                    (*Value())[ItemName_LifeSignal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LifeSignal(const CType_Config_Universal_General_Additional_LifeSignal& SetValue)
        {
            try
            {
                (*Value())[ItemName_LifeSignal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_LifeSignal Get_LifeSignal(void) const
        {
            return (*Value())[ItemName_LifeSignal()];
        }
        bool Get_LifeSignal(CType_Config_Universal_General_Additional_LifeSignal& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LifeSignal()]).valid())
                {
                    GetValue = (*Value())[ItemName_LifeSignal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BufferPreInit (Type: "CType_Config_Universal_General_Additional_BufferPreInit")
    protected:
        void Construct_BufferPreInit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BufferPreInit()))
                {
                    CType_Config_Universal_General_Additional_BufferPreInit InitValue;
                    (*Value())[ItemName_BufferPreInit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BufferPreInit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BufferPreInit()))
                {
                    Construct_BufferPreInit();
                }
                if ((*Value()).hasMember(ItemName_BufferPreInit()))
                {
                    CType_Config_Universal_General_Additional_BufferPreInit InitValue;
                    (*Value())[ItemName_BufferPreInit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BufferPreInit(const CType_Config_Universal_General_Additional_BufferPreInit& SetValue)
        {
            try
            {
                (*Value())[ItemName_BufferPreInit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_BufferPreInit Get_BufferPreInit(void) const
        {
            return (*Value())[ItemName_BufferPreInit()];
        }
        bool Get_BufferPreInit(CType_Config_Universal_General_Additional_BufferPreInit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BufferPreInit()]).valid())
                {
                    GetValue = (*Value())[ItemName_BufferPreInit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Watchdog (Type: "CType_Config_Universal_General_Additional_Watchdog")
    protected:
        void Construct_Watchdog(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Watchdog()))
                {
                    CType_Config_Universal_General_Additional_Watchdog InitValue;
                    (*Value())[ItemName_Watchdog()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Watchdog(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Watchdog()))
                {
                    Construct_Watchdog();
                }
                if ((*Value()).hasMember(ItemName_Watchdog()))
                {
                    CType_Config_Universal_General_Additional_Watchdog InitValue;
                    (*Value())[ItemName_Watchdog()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Watchdog(const CType_Config_Universal_General_Additional_Watchdog& SetValue)
        {
            try
            {
                (*Value())[ItemName_Watchdog()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_Watchdog Get_Watchdog(void) const
        {
            return (*Value())[ItemName_Watchdog()];
        }
        bool Get_Watchdog(CType_Config_Universal_General_Additional_Watchdog& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Watchdog()]).valid())
                {
                    GetValue = (*Value())[ItemName_Watchdog()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UDBFCompatibility (Type: "CType_Config_Universal_General_Additional_UDBFCompatibility")
    protected:
        void Construct_UDBFCompatibility(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UDBFCompatibility()))
                {
                    CType_Config_Universal_General_Additional_UDBFCompatibility InitValue;
                    (*Value())[ItemName_UDBFCompatibility()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UDBFCompatibility(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UDBFCompatibility()))
                {
                    Construct_UDBFCompatibility();
                }
                if ((*Value()).hasMember(ItemName_UDBFCompatibility()))
                {
                    CType_Config_Universal_General_Additional_UDBFCompatibility InitValue;
                    (*Value())[ItemName_UDBFCompatibility()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UDBFCompatibility(const CType_Config_Universal_General_Additional_UDBFCompatibility& SetValue)
        {
            try
            {
                (*Value())[ItemName_UDBFCompatibility()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional_UDBFCompatibility Get_UDBFCompatibility(void) const
        {
            return (*Value())[ItemName_UDBFCompatibility()];
        }
        bool Get_UDBFCompatibility(CType_Config_Universal_General_Additional_UDBFCompatibility& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UDBFCompatibility()]).valid())
                {
                    GetValue = (*Value())[ItemName_UDBFCompatibility()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VariableAccessRulesRead (Type: "CType_Edit_VariableAccessRuleList")
    protected:
        void Construct_VariableAccessRulesRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAccessRulesRead()))
                {
                    CType_Edit_VariableAccessRuleList InitValue;
                    (*Value())[ItemName_VariableAccessRulesRead()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VariableAccessRulesRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAccessRulesRead()))
                {
                    Construct_VariableAccessRulesRead();
                }
                if ((*Value()).hasMember(ItemName_VariableAccessRulesRead()))
                {
                    CType_Edit_VariableAccessRuleList InitValue;
                    (*Value())[ItemName_VariableAccessRulesRead()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VariableAccessRulesRead(const CType_Edit_VariableAccessRuleList& SetValue)
        {
            try
            {
                (*Value())[ItemName_VariableAccessRulesRead()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_VariableAccessRuleList Get_VariableAccessRulesRead(void) const
        {
            return (*Value())[ItemName_VariableAccessRulesRead()];
        }
        bool Get_VariableAccessRulesRead(CType_Edit_VariableAccessRuleList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VariableAccessRulesRead()]).valid())
                {
                    GetValue = (*Value())[ItemName_VariableAccessRulesRead()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VariableAccessRulesWrite (Type: "CType_Edit_VariableAccessRuleList")
    protected:
        void Construct_VariableAccessRulesWrite(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAccessRulesWrite()))
                {
                    CType_Edit_VariableAccessRuleList InitValue;
                    (*Value())[ItemName_VariableAccessRulesWrite()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VariableAccessRulesWrite(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableAccessRulesWrite()))
                {
                    Construct_VariableAccessRulesWrite();
                }
                if ((*Value()).hasMember(ItemName_VariableAccessRulesWrite()))
                {
                    CType_Edit_VariableAccessRuleList InitValue;
                    (*Value())[ItemName_VariableAccessRulesWrite()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VariableAccessRulesWrite(const CType_Edit_VariableAccessRuleList& SetValue)
        {
            try
            {
                (*Value())[ItemName_VariableAccessRulesWrite()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_VariableAccessRuleList Get_VariableAccessRulesWrite(void) const
        {
            return (*Value())[ItemName_VariableAccessRulesWrite()];
        }
        bool Get_VariableAccessRulesWrite(CType_Edit_VariableAccessRuleList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VariableAccessRulesWrite()]).valid())
                {
                    GetValue = (*Value())[ItemName_VariableAccessRulesWrite()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CANConfigs (Type: "CType_Edit_CANConfigList")
    protected:
        void Construct_CANConfigs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CANConfigs()))
                {
                    CType_Edit_CANConfigList InitValue;
                    (*Value())[ItemName_CANConfigs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CANConfigs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CANConfigs()))
                {
                    Construct_CANConfigs();
                }
                if ((*Value()).hasMember(ItemName_CANConfigs()))
                {
                    CType_Edit_CANConfigList InitValue;
                    (*Value())[ItemName_CANConfigs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CANConfigs(const CType_Edit_CANConfigList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CANConfigs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_CANConfigList Get_CANConfigs(void) const
        {
            return (*Value())[ItemName_CANConfigs()];
        }
        bool Get_CANConfigs(CType_Edit_CANConfigList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CANConfigs()]).valid())
                {
                    GetValue = (*Value())[ItemName_CANConfigs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_Additional


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Universal_General_LocationDetails
//------------------------------------------------------------------------
class CType_Config_Universal_General_LocationDetails : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_SiteName(void)
        {
            static std::string str("SiteName");
            return str;
        }
    public:
        static std::string const& ItemName_Continent(void)
        {
            static std::string str("Continent");
            return str;
        }
    public:
        static std::string const& ItemName_Street(void)
        {
            static std::string str("Street");
            return str;
        }
    public:
        static std::string const& ItemName_City(void)
        {
            static std::string str("City");
            return str;
        }
    public:
        static std::string const& ItemName_Province(void)
        {
            static std::string str("Province");
            return str;
        }
    public:
        static std::string const& ItemName_PostCode(void)
        {
            static std::string str("PostCode");
            return str;
        }
    public:
        static std::string const& ItemName_Country(void)
        {
            static std::string str("Country");
            return str;
        }
    public:
        static std::string const& ItemName_Longitude(void)
        {
            static std::string str("Longitude");
            return str;
        }
    public:
        static std::string const& ItemName_Latitude(void)
        {
            static std::string str("Latitude");
            return str;
        }
    public:
        static std::string const& ItemName_Altitude(void)
        {
            static std::string str("Altitude");
            return str;
        }
    public:
        static std::string const& ItemName_TimeZone(void)
        {
            static std::string str("TimeZone");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Universal_General_LocationDetails");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.10150");
        return str;
    }
public:
    CType_Config_Universal_General_LocationDetails(void)
    {
        try
        {
            Construct_Enabled();
            Construct_SiteName();
            Construct_Continent();
            Construct_Street();
            Construct_City();
            Construct_Province();
            Construct_PostCode();
            Construct_Country();
            Construct_Longitude();
            Construct_Latitude();
            Construct_Altitude();
            Construct_TimeZone();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Universal_General_LocationDetails(const CType_Config_Universal_General_LocationDetails& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Universal_General_LocationDetails(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_SiteName();
            Construct_Continent();
            Construct_Street();
            Construct_City();
            Construct_Province();
            Construct_PostCode();
            Construct_Country();
            Construct_Longitude();
            Construct_Latitude();
            Construct_Altitude();
            Construct_TimeZone();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Universal_General_LocationDetails(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_SiteName();
            Initialize_Continent();
            Initialize_Street();
            Initialize_City();
            Initialize_Province();
            Initialize_PostCode();
            Initialize_Country();
            Initialize_Longitude();
            Initialize_Latitude();
            Initialize_Altitude();
            Initialize_TimeZone();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SiteName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_SiteName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SiteName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SiteName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SiteName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SiteName()))
                {
                    Construct_SiteName();
                }
                if ((*Value()).hasMember(ItemName_SiteName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SiteName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SiteName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SiteName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_SiteName(void) const
        {
            return (*Value())[ItemName_SiteName()];
        }
        bool Get_SiteName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SiteName()]).valid())
                {
                    GetValue = (*Value())[ItemName_SiteName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Continent (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_Continent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Continent()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Continent()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Continent(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Continent()))
                {
                    Construct_Continent();
                }
                if ((*Value()).hasMember(ItemName_Continent()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Continent()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Continent(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_Continent()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_Continent(void) const
        {
            return (*Value())[ItemName_Continent()];
        }
        bool Get_Continent(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Continent()]).valid())
                {
                    GetValue = (*Value())[ItemName_Continent()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Street (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Street(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Street()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Street()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Street(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Street()))
                {
                    Construct_Street();
                }
                if ((*Value()).hasMember(ItemName_Street()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Street()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Street(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Street()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Street(void) const
        {
            return (*Value())[ItemName_Street()];
        }
        bool Get_Street(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Street()]).valid())
                {
                    GetValue = (*Value())[ItemName_Street()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item City (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_City(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_City()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_City()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_City(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_City()))
                {
                    Construct_City();
                }
                if ((*Value()).hasMember(ItemName_City()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_City()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_City(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_City()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_City(void) const
        {
            return (*Value())[ItemName_City()];
        }
        bool Get_City(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_City()]).valid())
                {
                    GetValue = (*Value())[ItemName_City()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Province (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Province(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Province()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Province()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Province(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Province()))
                {
                    Construct_Province();
                }
                if ((*Value()).hasMember(ItemName_Province()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Province()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Province(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Province()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Province(void) const
        {
            return (*Value())[ItemName_Province()];
        }
        bool Get_Province(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Province()]).valid())
                {
                    GetValue = (*Value())[ItemName_Province()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PostCode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_PostCode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PostCode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_PostCode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PostCode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PostCode()))
                {
                    Construct_PostCode();
                }
                if ((*Value()).hasMember(ItemName_PostCode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_PostCode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PostCode(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_PostCode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_PostCode(void) const
        {
            return (*Value())[ItemName_PostCode()];
        }
        bool Get_PostCode(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PostCode()]).valid())
                {
                    GetValue = (*Value())[ItemName_PostCode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Country (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Country(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Country()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Country()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Country(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Country()))
                {
                    Construct_Country();
                }
                if ((*Value()).hasMember(ItemName_Country()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Country()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Country(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Country()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Country(void) const
        {
            return (*Value())[ItemName_Country()];
        }
        bool Get_Country(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Country()]).valid())
                {
                    GetValue = (*Value())[ItemName_Country()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Longitude (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Longitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Longitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Longitude()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Longitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Longitude()))
                {
                    Construct_Longitude();
                }
                if ((*Value()).hasMember(ItemName_Longitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Longitude()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Longitude(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Longitude()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Longitude(void) const
        {
            return (*Value())[ItemName_Longitude()];
        }
        bool Get_Longitude(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Longitude()]).valid())
                {
                    GetValue = (*Value())[ItemName_Longitude()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Latitude (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Latitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Latitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Latitude()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Latitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Latitude()))
                {
                    Construct_Latitude();
                }
                if ((*Value()).hasMember(ItemName_Latitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Latitude()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Latitude(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Latitude()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Latitude(void) const
        {
            return (*Value())[ItemName_Latitude()];
        }
        bool Get_Latitude(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Latitude()]).valid())
                {
                    GetValue = (*Value())[ItemName_Latitude()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Altitude (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Altitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Altitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Altitude()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Altitude(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Altitude()))
                {
                    Construct_Altitude();
                }
                if ((*Value()).hasMember(ItemName_Altitude()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Altitude()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Altitude(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Altitude()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Altitude(void) const
        {
            return (*Value())[ItemName_Altitude()];
        }
        bool Get_Altitude(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Altitude()]).valid())
                {
                    GetValue = (*Value())[ItemName_Altitude()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeZone (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimeZone(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeZone()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeZone()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeZone(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeZone()))
                {
                    Construct_TimeZone();
                }
                if ((*Value()).hasMember(ItemName_TimeZone()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeZone()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeZone(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeZone()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimeZone(void) const
        {
            return (*Value())[ItemName_TimeZone()];
        }
        bool Get_TimeZone(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeZone()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeZone()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Universal_General_LocationDetails


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_Average_CalculatorFrequencyResponse
//------------------------------------------------------------------------
class CType_Config_Variable_General_Average_CalculatorFrequencyResponse : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_FrequencyStart(void)
        {
            static std::string str("FrequencyStart");
            return str;
        }
    public:
        static std::string const& ItemName_FrequencyStop(void)
        {
            static std::string str("FrequencyStop");
            return str;
        }
    public:
        static std::string const& ItemName_FrequencyStep(void)
        {
            static std::string str("FrequencyStep");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_ResultCommand(void)
        {
            static std::string str("ResultCommand");
            return str;
        }
    public:
        static std::string const& ItemName_ResultList(void)
        {
            static std::string str("ResultList");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_Average_CalculatorFrequencyResponse");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.301");
        return str;
    }
public:
    CType_Config_Variable_General_Average_CalculatorFrequencyResponse(void)
    {
        try
        {
            Construct_FrequencyStart();
            Construct_FrequencyStop();
            Construct_FrequencyStep();
            Construct_Command();
            Construct_ResultCommand();
            Construct_ResultList();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_Average_CalculatorFrequencyResponse(const CType_Config_Variable_General_Average_CalculatorFrequencyResponse& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_Average_CalculatorFrequencyResponse(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_FrequencyStart();
            Construct_FrequencyStop();
            Construct_FrequencyStep();
            Construct_Command();
            Construct_ResultCommand();
            Construct_ResultList();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_Average_CalculatorFrequencyResponse(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_FrequencyStart();
            Initialize_FrequencyStop();
            Initialize_FrequencyStep();
            Initialize_Command();
            Initialize_ResultCommand();
            Initialize_ResultList();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item FrequencyStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_FrequencyStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FrequencyStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStart()))
                {
                    Construct_FrequencyStart();
                }
                if ((*Value()).hasMember(ItemName_FrequencyStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FrequencyStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FrequencyStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_FrequencyStart(void) const
        {
            return (*Value())[ItemName_FrequencyStart()];
        }
        bool Get_FrequencyStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FrequencyStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_FrequencyStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FrequencyStop (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_FrequencyStop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStop()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStop()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FrequencyStop(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStop()))
                {
                    Construct_FrequencyStop();
                }
                if ((*Value()).hasMember(ItemName_FrequencyStop()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStop()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FrequencyStop(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FrequencyStop()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_FrequencyStop(void) const
        {
            return (*Value())[ItemName_FrequencyStop()];
        }
        bool Get_FrequencyStop(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FrequencyStop()]).valid())
                {
                    GetValue = (*Value())[ItemName_FrequencyStop()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FrequencyStep (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_FrequencyStep(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStep()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStep()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FrequencyStep(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FrequencyStep()))
                {
                    Construct_FrequencyStep();
                }
                if ((*Value()).hasMember(ItemName_FrequencyStep()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_FrequencyStep()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FrequencyStep(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FrequencyStep()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_FrequencyStep(void) const
        {
            return (*Value())[ItemName_FrequencyStep()];
        }
        bool Get_FrequencyStep(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FrequencyStep()]).valid())
                {
                    GetValue = (*Value())[ItemName_FrequencyStep()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultCommand (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_ResultCommand(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultCommand()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ResultCommand()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultCommand(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultCommand()))
                {
                    Construct_ResultCommand();
                }
                if ((*Value()).hasMember(ItemName_ResultCommand()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ResultCommand()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultCommand(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultCommand()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_ResultCommand(void) const
        {
            return (*Value())[ItemName_ResultCommand()];
        }
        bool Get_ResultCommand(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultCommand()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResultCommand()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultList (Type: "GInsXmlRpcStdAPI::CGIns_Info_PointList")
    protected:
        void Construct_ResultList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_ResultList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultList()))
                {
                    Construct_ResultList();
                }
                if ((*Value()).hasMember(ItemName_ResultList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_ResultList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultList(const GInsXmlRpcStdAPI::CGIns_Info_PointList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_PointList Get_ResultList(void) const
        {
            return (*Value())[ItemName_ResultList()];
        }
        bool Get_ResultList(GInsXmlRpcStdAPI::CGIns_Info_PointList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultList()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResultList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_Average_CalculatorFrequencyResponse


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_Average
//------------------------------------------------------------------------
class CType_Config_Variable_General_Average : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_CalculationType(void)
        {
            static std::string str("CalculationType");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_SampleCountList(void)
        {
            static std::string str("SampleCountList");
            return str;
        }
    public:
        static std::string const& ItemName_SampleCountRange(void)
        {
            static std::string str("SampleCountRange");
            return str;
        }
    public:
        static std::string const& ItemName_RankDepthList(void)
        {
            static std::string str("RankDepthList");
            return str;
        }
    public:
        static std::string const& ItemName_RankDepthRange(void)
        {
            static std::string str("RankDepthRange");
            return str;
        }
    public:
        static std::string const& ItemName_JitterDepthList(void)
        {
            static std::string str("JitterDepthList");
            return str;
        }
    public:
        static std::string const& ItemName_JitterDepthRange(void)
        {
            static std::string str("JitterDepthRange");
            return str;
        }
    public:
        static std::string const& ItemName_TimeConstantList(void)
        {
            static std::string str("TimeConstantList");
            return str;
        }
    public:
        static std::string const& ItemName_TimeConstantRange(void)
        {
            static std::string str("TimeConstantRange");
            return str;
        }
    public:
        static std::string const& ItemName_Frequency3dB1List(void)
        {
            static std::string str("Frequency3dB1List");
            return str;
        }
    public:
        static std::string const& ItemName_Frequency3dB1Range(void)
        {
            static std::string str("Frequency3dB1Range");
            return str;
        }
    public:
        static std::string const& ItemName_Frequency3dB2List(void)
        {
            static std::string str("Frequency3dB2List");
            return str;
        }
    public:
        static std::string const& ItemName_Frequency3dB2Range(void)
        {
            static std::string str("Frequency3dB2Range");
            return str;
        }
    public:
        static std::string const& ItemName_CalculatorFrequencyResponse(void)
        {
            static std::string str("CalculatorFrequencyResponse");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_Average");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.302");
        return str;
    }
public:
    CType_Config_Variable_General_Average(void)
    {
        try
        {
            Construct_CalculationType();
            Construct_Type();
            Construct_SampleCountList();
            Construct_SampleCountRange();
            Construct_RankDepthList();
            Construct_RankDepthRange();
            Construct_JitterDepthList();
            Construct_JitterDepthRange();
            Construct_TimeConstantList();
            Construct_TimeConstantRange();
            Construct_Frequency3dB1List();
            Construct_Frequency3dB1Range();
            Construct_Frequency3dB2List();
            Construct_Frequency3dB2Range();
            Construct_CalculatorFrequencyResponse();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_Average(const CType_Config_Variable_General_Average& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_Average(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_CalculationType();
            Construct_Type();
            Construct_SampleCountList();
            Construct_SampleCountRange();
            Construct_RankDepthList();
            Construct_RankDepthRange();
            Construct_JitterDepthList();
            Construct_JitterDepthRange();
            Construct_TimeConstantList();
            Construct_TimeConstantRange();
            Construct_Frequency3dB1List();
            Construct_Frequency3dB1Range();
            Construct_Frequency3dB2List();
            Construct_Frequency3dB2Range();
            Construct_CalculatorFrequencyResponse();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_Average(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_CalculationType();
            Initialize_Type();
            Initialize_SampleCountList();
            Initialize_SampleCountRange();
            Initialize_RankDepthList();
            Initialize_RankDepthRange();
            Initialize_JitterDepthList();
            Initialize_JitterDepthRange();
            Initialize_TimeConstantList();
            Initialize_TimeConstantRange();
            Initialize_Frequency3dB1List();
            Initialize_Frequency3dB1Range();
            Initialize_Frequency3dB2List();
            Initialize_Frequency3dB2Range();
            Initialize_CalculatorFrequencyResponse();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item CalculationType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CalculationType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculationType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CalculationType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculationType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculationType()))
                {
                    Construct_CalculationType();
                }
                if ((*Value()).hasMember(ItemName_CalculationType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CalculationType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculationType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculationType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CalculationType(void) const
        {
            return (*Value())[ItemName_CalculationType()];
        }
        bool Get_CalculationType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculationType()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculationType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SampleCountList (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SampleCountList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleCountList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SampleCountList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SampleCountList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleCountList()))
                {
                    Construct_SampleCountList();
                }
                if ((*Value()).hasMember(ItemName_SampleCountList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SampleCountList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SampleCountList(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SampleCountList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SampleCountList(void) const
        {
            return (*Value())[ItemName_SampleCountList()];
        }
        bool Get_SampleCountList(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SampleCountList()]).valid())
                {
                    GetValue = (*Value())[ItemName_SampleCountList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SampleCountRange (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_SampleCountRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleCountRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_SampleCountRange()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SampleCountRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleCountRange()))
                {
                    Construct_SampleCountRange();
                }
                if ((*Value()).hasMember(ItemName_SampleCountRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_SampleCountRange()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SampleCountRange(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_SampleCountRange()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_SampleCountRange(void) const
        {
            return (*Value())[ItemName_SampleCountRange()];
        }
        bool Get_SampleCountRange(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SampleCountRange()]).valid())
                {
                    GetValue = (*Value())[ItemName_SampleCountRange()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RankDepthList (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_RankDepthList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RankDepthList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_RankDepthList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RankDepthList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RankDepthList()))
                {
                    Construct_RankDepthList();
                }
                if ((*Value()).hasMember(ItemName_RankDepthList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_RankDepthList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RankDepthList(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_RankDepthList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_RankDepthList(void) const
        {
            return (*Value())[ItemName_RankDepthList()];
        }
        bool Get_RankDepthList(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RankDepthList()]).valid())
                {
                    GetValue = (*Value())[ItemName_RankDepthList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RankDepthRange (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_RankDepthRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RankDepthRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_RankDepthRange()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RankDepthRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RankDepthRange()))
                {
                    Construct_RankDepthRange();
                }
                if ((*Value()).hasMember(ItemName_RankDepthRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_RankDepthRange()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RankDepthRange(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_RankDepthRange()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_RankDepthRange(void) const
        {
            return (*Value())[ItemName_RankDepthRange()];
        }
        bool Get_RankDepthRange(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RankDepthRange()]).valid())
                {
                    GetValue = (*Value())[ItemName_RankDepthRange()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item JitterDepthList (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_JitterDepthList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_JitterDepthList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_JitterDepthList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_JitterDepthList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_JitterDepthList()))
                {
                    Construct_JitterDepthList();
                }
                if ((*Value()).hasMember(ItemName_JitterDepthList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_JitterDepthList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_JitterDepthList(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_JitterDepthList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_JitterDepthList(void) const
        {
            return (*Value())[ItemName_JitterDepthList()];
        }
        bool Get_JitterDepthList(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_JitterDepthList()]).valid())
                {
                    GetValue = (*Value())[ItemName_JitterDepthList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item JitterDepthRange (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_JitterDepthRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_JitterDepthRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_JitterDepthRange()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_JitterDepthRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_JitterDepthRange()))
                {
                    Construct_JitterDepthRange();
                }
                if ((*Value()).hasMember(ItemName_JitterDepthRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_JitterDepthRange()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_JitterDepthRange(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_JitterDepthRange()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_JitterDepthRange(void) const
        {
            return (*Value())[ItemName_JitterDepthRange()];
        }
        bool Get_JitterDepthRange(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_JitterDepthRange()]).valid())
                {
                    GetValue = (*Value())[ItemName_JitterDepthRange()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeConstantList (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimeConstantList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeConstantList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeConstantList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeConstantList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeConstantList()))
                {
                    Construct_TimeConstantList();
                }
                if ((*Value()).hasMember(ItemName_TimeConstantList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimeConstantList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeConstantList(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeConstantList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimeConstantList(void) const
        {
            return (*Value())[ItemName_TimeConstantList()];
        }
        bool Get_TimeConstantList(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeConstantList()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeConstantList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimeConstantRange (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimeConstantRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeConstantRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeConstantRange()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeConstantRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeConstantRange()))
                {
                    Construct_TimeConstantRange();
                }
                if ((*Value()).hasMember(ItemName_TimeConstantRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeConstantRange()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeConstantRange(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeConstantRange()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimeConstantRange(void) const
        {
            return (*Value())[ItemName_TimeConstantRange()];
        }
        bool Get_TimeConstantRange(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeConstantRange()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeConstantRange()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Frequency3dB1List (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Frequency3dB1List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB1List()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Frequency3dB1List()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Frequency3dB1List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB1List()))
                {
                    Construct_Frequency3dB1List();
                }
                if ((*Value()).hasMember(ItemName_Frequency3dB1List()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Frequency3dB1List()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Frequency3dB1List(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Frequency3dB1List()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Frequency3dB1List(void) const
        {
            return (*Value())[ItemName_Frequency3dB1List()];
        }
        bool Get_Frequency3dB1List(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Frequency3dB1List()]).valid())
                {
                    GetValue = (*Value())[ItemName_Frequency3dB1List()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Frequency3dB1Range (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Frequency3dB1Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB1Range()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Frequency3dB1Range()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Frequency3dB1Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB1Range()))
                {
                    Construct_Frequency3dB1Range();
                }
                if ((*Value()).hasMember(ItemName_Frequency3dB1Range()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Frequency3dB1Range()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Frequency3dB1Range(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Frequency3dB1Range()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Frequency3dB1Range(void) const
        {
            return (*Value())[ItemName_Frequency3dB1Range()];
        }
        bool Get_Frequency3dB1Range(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Frequency3dB1Range()]).valid())
                {
                    GetValue = (*Value())[ItemName_Frequency3dB1Range()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Frequency3dB2List (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Frequency3dB2List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB2List()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Frequency3dB2List()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Frequency3dB2List(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB2List()))
                {
                    Construct_Frequency3dB2List();
                }
                if ((*Value()).hasMember(ItemName_Frequency3dB2List()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Frequency3dB2List()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Frequency3dB2List(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Frequency3dB2List()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Frequency3dB2List(void) const
        {
            return (*Value())[ItemName_Frequency3dB2List()];
        }
        bool Get_Frequency3dB2List(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Frequency3dB2List()]).valid())
                {
                    GetValue = (*Value())[ItemName_Frequency3dB2List()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Frequency3dB2Range (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Frequency3dB2Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB2Range()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Frequency3dB2Range()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Frequency3dB2Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Frequency3dB2Range()))
                {
                    Construct_Frequency3dB2Range();
                }
                if ((*Value()).hasMember(ItemName_Frequency3dB2Range()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Frequency3dB2Range()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Frequency3dB2Range(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Frequency3dB2Range()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Frequency3dB2Range(void) const
        {
            return (*Value())[ItemName_Frequency3dB2Range()];
        }
        bool Get_Frequency3dB2Range(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Frequency3dB2Range()]).valid())
                {
                    GetValue = (*Value())[ItemName_Frequency3dB2Range()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CalculatorFrequencyResponse (Type: "CType_Config_Variable_General_Average_CalculatorFrequencyResponse")
    protected:
        void Construct_CalculatorFrequencyResponse(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorFrequencyResponse()))
                {
                    CType_Config_Variable_General_Average_CalculatorFrequencyResponse InitValue;
                    (*Value())[ItemName_CalculatorFrequencyResponse()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculatorFrequencyResponse(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorFrequencyResponse()))
                {
                    Construct_CalculatorFrequencyResponse();
                }
                if ((*Value()).hasMember(ItemName_CalculatorFrequencyResponse()))
                {
                    CType_Config_Variable_General_Average_CalculatorFrequencyResponse InitValue;
                    (*Value())[ItemName_CalculatorFrequencyResponse()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculatorFrequencyResponse(const CType_Config_Variable_General_Average_CalculatorFrequencyResponse& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculatorFrequencyResponse()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_Average_CalculatorFrequencyResponse Get_CalculatorFrequencyResponse(void) const
        {
            return (*Value())[ItemName_CalculatorFrequencyResponse()];
        }
        bool Get_CalculatorFrequencyResponse(CType_Config_Variable_General_Average_CalculatorFrequencyResponse& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculatorFrequencyResponse()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculatorFrequencyResponse()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_Average


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Linearisation
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Linearisation : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SourceType(void)
        {
            static std::string str("SourceType");
            return str;
        }
    public:
        static std::string const& ItemName_SensorActorName(void)
        {
            static std::string str("SensorActorName");
            return str;
        }
    public:
        static std::string const& ItemName_SensorActorIsStandard(void)
        {
            static std::string str("SensorActorIsStandard");
            return str;
        }
    public:
        static std::string const& ItemName_SensorActorIsTemporary(void)
        {
            static std::string str("SensorActorIsTemporary");
            return str;
        }
    public:
        static std::string const& ItemName_SensorActorIsOnlineAdjusted(void)
        {
            static std::string str("SensorActorIsOnlineAdjusted");
            return str;
        }
    public:
        static std::string const& ItemName_PolynomialCoefficients(void)
        {
            static std::string str("PolynomialCoefficients");
            return str;
        }
    public:
        static std::string const& ItemName_PolynomialValuePhysicalMinimum(void)
        {
            static std::string str("PolynomialValuePhysicalMinimum");
            return str;
        }
    public:
        static std::string const& ItemName_PolynomialValuePhysicalMaximum(void)
        {
            static std::string str("PolynomialValuePhysicalMaximum");
            return str;
        }
    public:
        static std::string const& ItemName_PolynomialValueSupplyBasedPhysicalMinimum(void)
        {
            static std::string str("PolynomialValueSupplyBasedPhysicalMinimum");
            return str;
        }
    public:
        static std::string const& ItemName_PolynomialValueSupplyBasedPhysicalMaximum(void)
        {
            static std::string str("PolynomialValueSupplyBasedPhysicalMaximum");
            return str;
        }
    public:
        static std::string const& ItemName_PointsPhysical2Intermediate(void)
        {
            static std::string str("PointsPhysical2Intermediate");
            return str;
        }
    public:
        static std::string const& ItemName_PointsPhysical2Engineering(void)
        {
            static std::string str("PointsPhysical2Engineering");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Linearisation");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.303");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Linearisation(void)
    {
        try
        {
            Construct_SourceType();
            Construct_SensorActorName();
            Construct_SensorActorIsStandard();
            Construct_SensorActorIsTemporary();
            Construct_SensorActorIsOnlineAdjusted();
            Construct_PolynomialCoefficients();
            Construct_PolynomialValuePhysicalMinimum();
            Construct_PolynomialValuePhysicalMaximum();
            Construct_PolynomialValueSupplyBasedPhysicalMinimum();
            Construct_PolynomialValueSupplyBasedPhysicalMaximum();
            Construct_PointsPhysical2Intermediate();
            Construct_PointsPhysical2Engineering();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Linearisation(const CType_Config_Variable_General_ValueHandlingSG_Linearisation& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Linearisation(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SourceType();
            Construct_SensorActorName();
            Construct_SensorActorIsStandard();
            Construct_SensorActorIsTemporary();
            Construct_SensorActorIsOnlineAdjusted();
            Construct_PolynomialCoefficients();
            Construct_PolynomialValuePhysicalMinimum();
            Construct_PolynomialValuePhysicalMaximum();
            Construct_PolynomialValueSupplyBasedPhysicalMinimum();
            Construct_PolynomialValueSupplyBasedPhysicalMaximum();
            Construct_PointsPhysical2Intermediate();
            Construct_PointsPhysical2Engineering();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Linearisation(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SourceType();
            Initialize_SensorActorName();
            Initialize_SensorActorIsStandard();
            Initialize_SensorActorIsTemporary();
            Initialize_SensorActorIsOnlineAdjusted();
            Initialize_PolynomialCoefficients();
            Initialize_PolynomialValuePhysicalMinimum();
            Initialize_PolynomialValuePhysicalMaximum();
            Initialize_PolynomialValueSupplyBasedPhysicalMinimum();
            Initialize_PolynomialValueSupplyBasedPhysicalMaximum();
            Initialize_PointsPhysical2Intermediate();
            Initialize_PointsPhysical2Engineering();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SourceType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SourceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SourceType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceType()))
                {
                    Construct_SourceType();
                }
                if ((*Value()).hasMember(ItemName_SourceType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SourceType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SourceType(void) const
        {
            return (*Value())[ItemName_SourceType()];
        }
        bool Get_SourceType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SourceType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SensorActorName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SensorActorName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SensorActorName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SensorActorName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorName()))
                {
                    Construct_SensorActorName();
                }
                if ((*Value()).hasMember(ItemName_SensorActorName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SensorActorName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SensorActorName(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SensorActorName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SensorActorName(void) const
        {
            return (*Value())[ItemName_SensorActorName()];
        }
        bool Get_SensorActorName(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SensorActorName()]).valid())
                {
                    GetValue = (*Value())[ItemName_SensorActorName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SensorActorIsStandard (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_SensorActorIsStandard(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsStandard()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsStandard()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SensorActorIsStandard(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsStandard()))
                {
                    Construct_SensorActorIsStandard();
                }
                if ((*Value()).hasMember(ItemName_SensorActorIsStandard()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsStandard()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SensorActorIsStandard(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SensorActorIsStandard()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_SensorActorIsStandard(void) const
        {
            return (*Value())[ItemName_SensorActorIsStandard()];
        }
        bool Get_SensorActorIsStandard(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SensorActorIsStandard()]).valid())
                {
                    GetValue = (*Value())[ItemName_SensorActorIsStandard()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SensorActorIsTemporary (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_SensorActorIsTemporary(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsTemporary()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsTemporary()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SensorActorIsTemporary(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsTemporary()))
                {
                    Construct_SensorActorIsTemporary();
                }
                if ((*Value()).hasMember(ItemName_SensorActorIsTemporary()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsTemporary()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SensorActorIsTemporary(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SensorActorIsTemporary()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_SensorActorIsTemporary(void) const
        {
            return (*Value())[ItemName_SensorActorIsTemporary()];
        }
        bool Get_SensorActorIsTemporary(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SensorActorIsTemporary()]).valid())
                {
                    GetValue = (*Value())[ItemName_SensorActorIsTemporary()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SensorActorIsOnlineAdjusted (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_SensorActorIsOnlineAdjusted(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsOnlineAdjusted()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsOnlineAdjusted()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SensorActorIsOnlineAdjusted(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SensorActorIsOnlineAdjusted()))
                {
                    Construct_SensorActorIsOnlineAdjusted();
                }
                if ((*Value()).hasMember(ItemName_SensorActorIsOnlineAdjusted()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_SensorActorIsOnlineAdjusted()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SensorActorIsOnlineAdjusted(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SensorActorIsOnlineAdjusted()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_SensorActorIsOnlineAdjusted(void) const
        {
            return (*Value())[ItemName_SensorActorIsOnlineAdjusted()];
        }
        bool Get_SensorActorIsOnlineAdjusted(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SensorActorIsOnlineAdjusted()]).valid())
                {
                    GetValue = (*Value())[ItemName_SensorActorIsOnlineAdjusted()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PolynomialCoefficients (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float")
    protected:
        void Construct_PolynomialCoefficients(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialCoefficients()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float InitValue;
                    (*Value())[ItemName_PolynomialCoefficients()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PolynomialCoefficients(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialCoefficients()))
                {
                    Construct_PolynomialCoefficients();
                }
                if ((*Value()).hasMember(ItemName_PolynomialCoefficients()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float InitValue;
                    (*Value())[ItemName_PolynomialCoefficients()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PolynomialCoefficients(const GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_PolynomialCoefficients()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float Get_PolynomialCoefficients(void) const
        {
            return (*Value())[ItemName_PolynomialCoefficients()];
        }
        bool Get_PolynomialCoefficients(GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PolynomialCoefficients()]).valid())
                {
                    GetValue = (*Value())[ItemName_PolynomialCoefficients()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PolynomialValuePhysicalMinimum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_PolynomialValuePhysicalMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValuePhysicalMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValuePhysicalMinimum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PolynomialValuePhysicalMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValuePhysicalMinimum()))
                {
                    Construct_PolynomialValuePhysicalMinimum();
                }
                if ((*Value()).hasMember(ItemName_PolynomialValuePhysicalMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValuePhysicalMinimum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PolynomialValuePhysicalMinimum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_PolynomialValuePhysicalMinimum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_PolynomialValuePhysicalMinimum(void) const
        {
            return (*Value())[ItemName_PolynomialValuePhysicalMinimum()];
        }
        bool Get_PolynomialValuePhysicalMinimum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PolynomialValuePhysicalMinimum()]).valid())
                {
                    GetValue = (*Value())[ItemName_PolynomialValuePhysicalMinimum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PolynomialValuePhysicalMaximum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_PolynomialValuePhysicalMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValuePhysicalMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValuePhysicalMaximum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PolynomialValuePhysicalMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValuePhysicalMaximum()))
                {
                    Construct_PolynomialValuePhysicalMaximum();
                }
                if ((*Value()).hasMember(ItemName_PolynomialValuePhysicalMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValuePhysicalMaximum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PolynomialValuePhysicalMaximum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_PolynomialValuePhysicalMaximum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_PolynomialValuePhysicalMaximum(void) const
        {
            return (*Value())[ItemName_PolynomialValuePhysicalMaximum()];
        }
        bool Get_PolynomialValuePhysicalMaximum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PolynomialValuePhysicalMaximum()]).valid())
                {
                    GetValue = (*Value())[ItemName_PolynomialValuePhysicalMaximum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PolynomialValueSupplyBasedPhysicalMinimum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_PolynomialValueSupplyBasedPhysicalMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PolynomialValueSupplyBasedPhysicalMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMinimum()))
                {
                    Construct_PolynomialValueSupplyBasedPhysicalMinimum();
                }
                if ((*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PolynomialValueSupplyBasedPhysicalMinimum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_PolynomialValueSupplyBasedPhysicalMinimum(void) const
        {
            return (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()];
        }
        bool Get_PolynomialValueSupplyBasedPhysicalMinimum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()]).valid())
                {
                    GetValue = (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMinimum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PolynomialValueSupplyBasedPhysicalMaximum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_PolynomialValueSupplyBasedPhysicalMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PolynomialValueSupplyBasedPhysicalMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMaximum()))
                {
                    Construct_PolynomialValueSupplyBasedPhysicalMaximum();
                }
                if ((*Value()).hasMember(ItemName_PolynomialValueSupplyBasedPhysicalMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PolynomialValueSupplyBasedPhysicalMaximum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_PolynomialValueSupplyBasedPhysicalMaximum(void) const
        {
            return (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()];
        }
        bool Get_PolynomialValueSupplyBasedPhysicalMaximum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()]).valid())
                {
                    GetValue = (*Value())[ItemName_PolynomialValueSupplyBasedPhysicalMaximum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PointsPhysical2Intermediate (Type: "GInsXmlRpcStdAPI::CGIns_Info_PointList")
    protected:
        void Construct_PointsPhysical2Intermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PointsPhysical2Intermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_PointsPhysical2Intermediate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PointsPhysical2Intermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PointsPhysical2Intermediate()))
                {
                    Construct_PointsPhysical2Intermediate();
                }
                if ((*Value()).hasMember(ItemName_PointsPhysical2Intermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_PointsPhysical2Intermediate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PointsPhysical2Intermediate(const GInsXmlRpcStdAPI::CGIns_Info_PointList& SetValue)
        {
            try
            {
                (*Value())[ItemName_PointsPhysical2Intermediate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_PointList Get_PointsPhysical2Intermediate(void) const
        {
            return (*Value())[ItemName_PointsPhysical2Intermediate()];
        }
        bool Get_PointsPhysical2Intermediate(GInsXmlRpcStdAPI::CGIns_Info_PointList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PointsPhysical2Intermediate()]).valid())
                {
                    GetValue = (*Value())[ItemName_PointsPhysical2Intermediate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PointsPhysical2Engineering (Type: "GInsXmlRpcStdAPI::CGIns_Info_PointList")
    protected:
        void Construct_PointsPhysical2Engineering(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PointsPhysical2Engineering()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_PointsPhysical2Engineering()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PointsPhysical2Engineering(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PointsPhysical2Engineering()))
                {
                    Construct_PointsPhysical2Engineering();
                }
                if ((*Value()).hasMember(ItemName_PointsPhysical2Engineering()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_PointList InitValue;
                    (*Value())[ItemName_PointsPhysical2Engineering()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PointsPhysical2Engineering(const GInsXmlRpcStdAPI::CGIns_Info_PointList& SetValue)
        {
            try
            {
                (*Value())[ItemName_PointsPhysical2Engineering()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_PointList Get_PointsPhysical2Engineering(void) const
        {
            return (*Value())[ItemName_PointsPhysical2Engineering()];
        }
        bool Get_PointsPhysical2Engineering(GInsXmlRpcStdAPI::CGIns_Info_PointList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PointsPhysical2Engineering()]).valid())
                {
                    GetValue = (*Value())[ItemName_PointsPhysical2Engineering()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Linearisation


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Factor(void)
        {
            static std::string str("Factor");
            return str;
        }
    public:
        static std::string const& ItemName_Offset(void)
        {
            static std::string str("Offset");
            return str;
        }
    public:
        static std::string const& ItemName_FactorLastSaved(void)
        {
            static std::string str("FactorLastSaved");
            return str;
        }
    public:
        static std::string const& ItemName_OffsetLastSaved(void)
        {
            static std::string str("OffsetLastSaved");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_RecalculationPossible(void)
        {
            static std::string str("RecalculationPossible");
            return str;
        }
    public:
        static std::string const& ItemName_Legend0(void)
        {
            static std::string str("Legend0");
            return str;
        }
    public:
        static std::string const& ItemName_Legend1(void)
        {
            static std::string str("Legend1");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.304");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG(void)
    {
        try
        {
            Construct_Factor();
            Construct_Offset();
            Construct_FactorLastSaved();
            Construct_OffsetLastSaved();
            Construct_ChangeDateTime();
            Construct_RecalculationPossible();
            Construct_Legend0();
            Construct_Legend1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG(const CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Factor();
            Construct_Offset();
            Construct_FactorLastSaved();
            Construct_OffsetLastSaved();
            Construct_ChangeDateTime();
            Construct_RecalculationPossible();
            Construct_Legend0();
            Construct_Legend1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Factor();
            Initialize_Offset();
            Initialize_FactorLastSaved();
            Initialize_OffsetLastSaved();
            Initialize_ChangeDateTime();
            Initialize_RecalculationPossible();
            Initialize_Legend0();
            Initialize_Legend1();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Factor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Factor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Factor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Factor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Factor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Factor()))
                {
                    Construct_Factor();
                }
                if ((*Value()).hasMember(ItemName_Factor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Factor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Factor(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Factor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Factor(void) const
        {
            return (*Value())[ItemName_Factor()];
        }
        bool Get_Factor(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Factor()]).valid())
                {
                    GetValue = (*Value())[ItemName_Factor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Offset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Offset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Offset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Offset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Offset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Offset()))
                {
                    Construct_Offset();
                }
                if ((*Value()).hasMember(ItemName_Offset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Offset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Offset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Offset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Offset(void) const
        {
            return (*Value())[ItemName_Offset()];
        }
        bool Get_Offset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Offset()]).valid())
                {
                    GetValue = (*Value())[ItemName_Offset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FactorLastSaved (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_FactorLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FactorLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_FactorLastSaved()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FactorLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FactorLastSaved()))
                {
                    Construct_FactorLastSaved();
                }
                if ((*Value()).hasMember(ItemName_FactorLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_FactorLastSaved()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FactorLastSaved(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FactorLastSaved()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_FactorLastSaved(void) const
        {
            return (*Value())[ItemName_FactorLastSaved()];
        }
        bool Get_FactorLastSaved(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FactorLastSaved()]).valid())
                {
                    GetValue = (*Value())[ItemName_FactorLastSaved()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OffsetLastSaved (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_OffsetLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OffsetLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_OffsetLastSaved()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OffsetLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OffsetLastSaved()))
                {
                    Construct_OffsetLastSaved();
                }
                if ((*Value()).hasMember(ItemName_OffsetLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_OffsetLastSaved()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OffsetLastSaved(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_OffsetLastSaved()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_OffsetLastSaved(void) const
        {
            return (*Value())[ItemName_OffsetLastSaved()];
        }
        bool Get_OffsetLastSaved(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OffsetLastSaved()]).valid())
                {
                    GetValue = (*Value())[ItemName_OffsetLastSaved()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RecalculationPossible (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_RecalculationPossible(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RecalculationPossible()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_RecalculationPossible()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RecalculationPossible(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RecalculationPossible()))
                {
                    Construct_RecalculationPossible();
                }
                if ((*Value()).hasMember(ItemName_RecalculationPossible()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_RecalculationPossible()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RecalculationPossible(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_RecalculationPossible()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_RecalculationPossible(void) const
        {
            return (*Value())[ItemName_RecalculationPossible()];
        }
        bool Get_RecalculationPossible(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RecalculationPossible()]).valid())
                {
                    GetValue = (*Value())[ItemName_RecalculationPossible()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Legend0 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    Construct_Legend0();
                }
                if ((*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Legend0(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Legend0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Legend0(void) const
        {
            return (*Value())[ItemName_Legend0()];
        }
        bool Get_Legend0(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Legend0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Legend0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Legend1 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Legend1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Legend1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend1()))
                {
                    Construct_Legend1();
                }
                if ((*Value()).hasMember(ItemName_Legend1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Legend1(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Legend1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Legend1(void) const
        {
            return (*Value())[ItemName_Legend1()];
        }
        bool Get_Legend1(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Legend1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Legend1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_BridgeFactorK(void)
        {
            static std::string str("BridgeFactorK");
            return str;
        }
    public:
        static std::string const& ItemName_BridgeFactorKLastSet(void)
        {
            static std::string str("BridgeFactorKLastSet");
            return str;
        }
    public:
        static std::string const& ItemName_BridgeFactorB(void)
        {
            static std::string str("BridgeFactorB");
            return str;
        }
    public:
        static std::string const& ItemName_Polarity(void)
        {
            static std::string str("Polarity");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.305");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge(void)
    {
        try
        {
            Construct_BridgeFactorK();
            Construct_BridgeFactorKLastSet();
            Construct_BridgeFactorB();
            Construct_Polarity();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_BridgeFactorK();
            Construct_BridgeFactorKLastSet();
            Construct_BridgeFactorB();
            Construct_Polarity();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_BridgeFactorK();
            Initialize_BridgeFactorKLastSet();
            Initialize_BridgeFactorB();
            Initialize_Polarity();
            Initialize_Command();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item BridgeFactorK (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_BridgeFactorK(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorK()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_BridgeFactorK()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BridgeFactorK(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorK()))
                {
                    Construct_BridgeFactorK();
                }
                if ((*Value()).hasMember(ItemName_BridgeFactorK()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_BridgeFactorK()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BridgeFactorK(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_BridgeFactorK()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_BridgeFactorK(void) const
        {
            return (*Value())[ItemName_BridgeFactorK()];
        }
        bool Get_BridgeFactorK(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BridgeFactorK()]).valid())
                {
                    GetValue = (*Value())[ItemName_BridgeFactorK()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BridgeFactorKLastSet (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_BridgeFactorKLastSet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorKLastSet()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_BridgeFactorKLastSet()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BridgeFactorKLastSet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorKLastSet()))
                {
                    Construct_BridgeFactorKLastSet();
                }
                if ((*Value()).hasMember(ItemName_BridgeFactorKLastSet()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_BridgeFactorKLastSet()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BridgeFactorKLastSet(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_BridgeFactorKLastSet()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_BridgeFactorKLastSet(void) const
        {
            return (*Value())[ItemName_BridgeFactorKLastSet()];
        }
        bool Get_BridgeFactorKLastSet(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BridgeFactorKLastSet()]).valid())
                {
                    GetValue = (*Value())[ItemName_BridgeFactorKLastSet()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BridgeFactorB (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_BridgeFactorB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorB()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_BridgeFactorB()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BridgeFactorB(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BridgeFactorB()))
                {
                    Construct_BridgeFactorB();
                }
                if ((*Value()).hasMember(ItemName_BridgeFactorB()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_BridgeFactorB()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BridgeFactorB(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_BridgeFactorB()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_BridgeFactorB(void) const
        {
            return (*Value())[ItemName_BridgeFactorB()];
        }
        bool Get_BridgeFactorB(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BridgeFactorB()]).valid())
                {
                    GetValue = (*Value())[ItemName_BridgeFactorB()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Polarity (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Polarity(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Polarity()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Polarity()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Polarity(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Polarity()))
                {
                    Construct_Polarity();
                }
                if ((*Value()).hasMember(ItemName_Polarity()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Polarity()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Polarity(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Polarity()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Polarity(void) const
        {
            return (*Value())[ItemName_Polarity()];
        }
        bool Get_Polarity(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Polarity()]).valid())
                {
                    GetValue = (*Value())[ItemName_Polarity()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DirectionIsOutput(void)
        {
            static std::string str("DirectionIsOutput");
            return str;
        }
    public:
        static std::string const& ItemName_ValuePhysicalLower(void)
        {
            static std::string str("ValuePhysicalLower");
            return str;
        }
    public:
        static std::string const& ItemName_ValuePhysicalUpper(void)
        {
            static std::string str("ValuePhysicalUpper");
            return str;
        }
    public:
        static std::string const& ItemName_ValueIntermediateLower(void)
        {
            static std::string str("ValueIntermediateLower");
            return str;
        }
    public:
        static std::string const& ItemName_ValueIntermediateUpper(void)
        {
            static std::string str("ValueIntermediateUpper");
            return str;
        }
    public:
        static std::string const& ItemName_ValueLower(void)
        {
            static std::string str("ValueLower");
            return str;
        }
    public:
        static std::string const& ItemName_ValueUpper(void)
        {
            static std::string str("ValueUpper");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.306");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint(void)
    {
        try
        {
            Construct_DirectionIsOutput();
            Construct_ValuePhysicalLower();
            Construct_ValuePhysicalUpper();
            Construct_ValueIntermediateLower();
            Construct_ValueIntermediateUpper();
            Construct_ValueLower();
            Construct_ValueUpper();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DirectionIsOutput();
            Construct_ValuePhysicalLower();
            Construct_ValuePhysicalUpper();
            Construct_ValueIntermediateLower();
            Construct_ValueIntermediateUpper();
            Construct_ValueLower();
            Construct_ValueUpper();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DirectionIsOutput();
            Initialize_ValuePhysicalLower();
            Initialize_ValuePhysicalUpper();
            Initialize_ValueIntermediateLower();
            Initialize_ValueIntermediateUpper();
            Initialize_ValueLower();
            Initialize_ValueUpper();
            Initialize_Command();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DirectionIsOutput (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_DirectionIsOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DirectionIsOutput()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_DirectionIsOutput()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DirectionIsOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DirectionIsOutput()))
                {
                    Construct_DirectionIsOutput();
                }
                if ((*Value()).hasMember(ItemName_DirectionIsOutput()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_DirectionIsOutput()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DirectionIsOutput(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DirectionIsOutput()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_DirectionIsOutput(void) const
        {
            return (*Value())[ItemName_DirectionIsOutput()];
        }
        bool Get_DirectionIsOutput(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DirectionIsOutput()]).valid())
                {
                    GetValue = (*Value())[ItemName_DirectionIsOutput()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValuePhysicalLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValuePhysicalLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValuePhysicalLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValuePhysicalLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValuePhysicalLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValuePhysicalLower()))
                {
                    Construct_ValuePhysicalLower();
                }
                if ((*Value()).hasMember(ItemName_ValuePhysicalLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValuePhysicalLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValuePhysicalLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValuePhysicalLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValuePhysicalLower(void) const
        {
            return (*Value())[ItemName_ValuePhysicalLower()];
        }
        bool Get_ValuePhysicalLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValuePhysicalLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValuePhysicalLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValuePhysicalUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValuePhysicalUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValuePhysicalUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValuePhysicalUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValuePhysicalUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValuePhysicalUpper()))
                {
                    Construct_ValuePhysicalUpper();
                }
                if ((*Value()).hasMember(ItemName_ValuePhysicalUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValuePhysicalUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValuePhysicalUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValuePhysicalUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValuePhysicalUpper(void) const
        {
            return (*Value())[ItemName_ValuePhysicalUpper()];
        }
        bool Get_ValuePhysicalUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValuePhysicalUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValuePhysicalUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueIntermediateLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueIntermediateLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueIntermediateLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueIntermediateLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueIntermediateLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueIntermediateLower()))
                {
                    Construct_ValueIntermediateLower();
                }
                if ((*Value()).hasMember(ItemName_ValueIntermediateLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueIntermediateLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueIntermediateLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueIntermediateLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueIntermediateLower(void) const
        {
            return (*Value())[ItemName_ValueIntermediateLower()];
        }
        bool Get_ValueIntermediateLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueIntermediateLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueIntermediateLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueIntermediateUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueIntermediateUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueIntermediateUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueIntermediateUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueIntermediateUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueIntermediateUpper()))
                {
                    Construct_ValueIntermediateUpper();
                }
                if ((*Value()).hasMember(ItemName_ValueIntermediateUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueIntermediateUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueIntermediateUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueIntermediateUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueIntermediateUpper(void) const
        {
            return (*Value())[ItemName_ValueIntermediateUpper()];
        }
        bool Get_ValueIntermediateUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueIntermediateUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueIntermediateUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueLower()))
                {
                    Construct_ValueLower();
                }
                if ((*Value()).hasMember(ItemName_ValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueLower(void) const
        {
            return (*Value())[ItemName_ValueLower()];
        }
        bool Get_ValueLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUpper()))
                {
                    Construct_ValueUpper();
                }
                if ((*Value()).hasMember(ItemName_ValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueUpper(void) const
        {
            return (*Value())[ItemName_ValueUpper()];
        }
        bool Get_ValueUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ActualValueLower(void)
        {
            static std::string str("ActualValueLower");
            return str;
        }
    public:
        static std::string const& ItemName_NewValueLower(void)
        {
            static std::string str("NewValueLower");
            return str;
        }
    public:
        static std::string const& ItemName_ActualValueUpper(void)
        {
            static std::string str("ActualValueUpper");
            return str;
        }
    public:
        static std::string const& ItemName_NewValueUpper(void)
        {
            static std::string str("NewValueUpper");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.307");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne(void)
    {
        try
        {
            Construct_ActualValueLower();
            Construct_NewValueLower();
            Construct_ActualValueUpper();
            Construct_NewValueUpper();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ActualValueLower();
            Construct_NewValueLower();
            Construct_ActualValueUpper();
            Construct_NewValueUpper();
            Construct_Command();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ActualValueLower();
            Initialize_NewValueLower();
            Initialize_ActualValueUpper();
            Initialize_NewValueUpper();
            Initialize_Command();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ActualValueLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ActualValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ActualValueLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActualValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualValueLower()))
                {
                    Construct_ActualValueLower();
                }
                if ((*Value()).hasMember(ItemName_ActualValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ActualValueLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActualValueLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActualValueLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ActualValueLower(void) const
        {
            return (*Value())[ItemName_ActualValueLower()];
        }
        bool Get_ActualValueLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActualValueLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActualValueLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NewValueLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_NewValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_NewValueLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NewValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewValueLower()))
                {
                    Construct_NewValueLower();
                }
                if ((*Value()).hasMember(ItemName_NewValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_NewValueLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NewValueLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_NewValueLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_NewValueLower(void) const
        {
            return (*Value())[ItemName_NewValueLower()];
        }
        bool Get_NewValueLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NewValueLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_NewValueLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ActualValueUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ActualValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ActualValueUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActualValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActualValueUpper()))
                {
                    Construct_ActualValueUpper();
                }
                if ((*Value()).hasMember(ItemName_ActualValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ActualValueUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActualValueUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActualValueUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ActualValueUpper(void) const
        {
            return (*Value())[ItemName_ActualValueUpper()];
        }
        bool Get_ActualValueUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActualValueUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActualValueUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NewValueUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_NewValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_NewValueUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NewValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewValueUpper()))
                {
                    Construct_NewValueUpper();
                }
                if ((*Value()).hasMember(ItemName_NewValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_NewValueUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NewValueUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_NewValueUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_NewValueUpper(void) const
        {
            return (*Value())[ItemName_NewValueUpper()];
        }
        bool Get_NewValueUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NewValueUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_NewValueUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Scaling
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Scaling : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_UnitName(void)
        {
            static std::string str("UnitName");
            return str;
        }
    public:
        static std::string const& ItemName_UnitNameLastSaved(void)
        {
            static std::string str("UnitNameLastSaved");
            return str;
        }
    public:
        static std::string const& ItemName_Unit(void)
        {
            static std::string str("Unit");
            return str;
        }
    public:
        static std::string const& ItemName_Standard(void)
        {
            static std::string str("Standard");
            return str;
        }
    public:
        static std::string const& ItemName_CalculatorStrainGauge(void)
        {
            static std::string str("CalculatorStrainGauge");
            return str;
        }
    public:
        static std::string const& ItemName_CalculatorTwoPoint(void)
        {
            static std::string str("CalculatorTwoPoint");
            return str;
        }
    public:
        static std::string const& ItemName_CalculatorTwoPointOneByOne(void)
        {
            static std::string str("CalculatorTwoPointOneByOne");
            return str;
        }
    public:
        static std::string const& ItemName_CalculatorTypeLastUsed(void)
        {
            static std::string str("CalculatorTypeLastUsed");
            return str;
        }
    public:
        static std::string const& ItemName_InfoRangeActualPhysical(void)
        {
            static std::string str("InfoRangeActualPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_InfoUnitFactorActualPhysical(void)
        {
            static std::string str("InfoUnitFactorActualPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_InfoUnitOffsetActualPhysical(void)
        {
            static std::string str("InfoUnitOffsetActualPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_InfoRangeActualIntermediate(void)
        {
            static std::string str("InfoRangeActualIntermediate");
            return str;
        }
    public:
        static std::string const& ItemName_InfoUnitFactorActualIntermediate(void)
        {
            static std::string str("InfoUnitFactorActualIntermediate");
            return str;
        }
    public:
        static std::string const& ItemName_InfoUnitOffsetActualIntermediate(void)
        {
            static std::string str("InfoUnitOffsetActualIntermediate");
            return str;
        }
    public:
        static std::string const& ItemName_InfoRangeActual(void)
        {
            static std::string str("InfoRangeActual");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Scaling");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.308");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Scaling(void)
    {
        try
        {
            Construct_UnitName();
            Construct_UnitNameLastSaved();
            Construct_Unit();
            Construct_Standard();
            Construct_CalculatorStrainGauge();
            Construct_CalculatorTwoPoint();
            Construct_CalculatorTwoPointOneByOne();
            Construct_CalculatorTypeLastUsed();
            Construct_InfoRangeActualPhysical();
            Construct_InfoUnitFactorActualPhysical();
            Construct_InfoUnitOffsetActualPhysical();
            Construct_InfoRangeActualIntermediate();
            Construct_InfoUnitFactorActualIntermediate();
            Construct_InfoUnitOffsetActualIntermediate();
            Construct_InfoRangeActual();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Scaling(const CType_Config_Variable_General_ValueHandlingSG_Scaling& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Scaling(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_UnitName();
            Construct_UnitNameLastSaved();
            Construct_Unit();
            Construct_Standard();
            Construct_CalculatorStrainGauge();
            Construct_CalculatorTwoPoint();
            Construct_CalculatorTwoPointOneByOne();
            Construct_CalculatorTypeLastUsed();
            Construct_InfoRangeActualPhysical();
            Construct_InfoUnitFactorActualPhysical();
            Construct_InfoUnitOffsetActualPhysical();
            Construct_InfoRangeActualIntermediate();
            Construct_InfoUnitFactorActualIntermediate();
            Construct_InfoUnitOffsetActualIntermediate();
            Construct_InfoRangeActual();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Scaling(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_UnitName();
            Initialize_UnitNameLastSaved();
            Initialize_Unit();
            Initialize_Standard();
            Initialize_CalculatorStrainGauge();
            Initialize_CalculatorTwoPoint();
            Initialize_CalculatorTwoPointOneByOne();
            Initialize_CalculatorTypeLastUsed();
            Initialize_InfoRangeActualPhysical();
            Initialize_InfoUnitFactorActualPhysical();
            Initialize_InfoUnitOffsetActualPhysical();
            Initialize_InfoRangeActualIntermediate();
            Initialize_InfoUnitFactorActualIntermediate();
            Initialize_InfoUnitOffsetActualIntermediate();
            Initialize_InfoRangeActual();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item UnitName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_UnitName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_UnitName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitName()))
                {
                    Construct_UnitName();
                }
                if ((*Value()).hasMember(ItemName_UnitName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_UnitName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitName(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_UnitName(void) const
        {
            return (*Value())[ItemName_UnitName()];
        }
        bool Get_UnitName(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UnitName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UnitNameLastSaved (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_UnitNameLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitNameLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_UnitNameLastSaved()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UnitNameLastSaved(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UnitNameLastSaved()))
                {
                    Construct_UnitNameLastSaved();
                }
                if ((*Value()).hasMember(ItemName_UnitNameLastSaved()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_UnitNameLastSaved()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UnitNameLastSaved(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UnitNameLastSaved()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_UnitNameLastSaved(void) const
        {
            return (*Value())[ItemName_UnitNameLastSaved()];
        }
        bool Get_UnitNameLastSaved(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UnitNameLastSaved()]).valid())
                {
                    GetValue = (*Value())[ItemName_UnitNameLastSaved()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Unit (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG")
    protected:
        void Construct_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG InitValue;
                    (*Value())[ItemName_Unit()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Unit(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Unit()))
                {
                    Construct_Unit();
                }
                if ((*Value()).hasMember(ItemName_Unit()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG InitValue;
                    (*Value())[ItemName_Unit()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Unit(const CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Unit()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG Get_Unit(void) const
        {
            return (*Value())[ItemName_Unit()];
        }
        bool Get_Unit(CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Unit()]).valid())
                {
                    GetValue = (*Value())[ItemName_Unit()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Standard (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG")
    protected:
        void Construct_Standard(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Standard()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG InitValue;
                    (*Value())[ItemName_Standard()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Standard(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Standard()))
                {
                    Construct_Standard();
                }
                if ((*Value()).hasMember(ItemName_Standard()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG InitValue;
                    (*Value())[ItemName_Standard()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Standard(const CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Standard()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG Get_Standard(void) const
        {
            return (*Value())[ItemName_Standard()];
        }
        bool Get_Standard(CType_Config_Variable_General_ValueHandlingSG_Scaling_LinearEquationSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Standard()]).valid())
                {
                    GetValue = (*Value())[ItemName_Standard()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CalculatorStrainGauge (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge")
    protected:
        void Construct_CalculatorStrainGauge(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorStrainGauge()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge InitValue;
                    (*Value())[ItemName_CalculatorStrainGauge()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculatorStrainGauge(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorStrainGauge()))
                {
                    Construct_CalculatorStrainGauge();
                }
                if ((*Value()).hasMember(ItemName_CalculatorStrainGauge()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge InitValue;
                    (*Value())[ItemName_CalculatorStrainGauge()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculatorStrainGauge(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculatorStrainGauge()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge Get_CalculatorStrainGauge(void) const
        {
            return (*Value())[ItemName_CalculatorStrainGauge()];
        }
        bool Get_CalculatorStrainGauge(CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorStrainGauge& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculatorStrainGauge()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculatorStrainGauge()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CalculatorTwoPoint (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint")
    protected:
        void Construct_CalculatorTwoPoint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTwoPoint()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint InitValue;
                    (*Value())[ItemName_CalculatorTwoPoint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculatorTwoPoint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTwoPoint()))
                {
                    Construct_CalculatorTwoPoint();
                }
                if ((*Value()).hasMember(ItemName_CalculatorTwoPoint()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint InitValue;
                    (*Value())[ItemName_CalculatorTwoPoint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculatorTwoPoint(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculatorTwoPoint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint Get_CalculatorTwoPoint(void) const
        {
            return (*Value())[ItemName_CalculatorTwoPoint()];
        }
        bool Get_CalculatorTwoPoint(CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPoint& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculatorTwoPoint()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculatorTwoPoint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CalculatorTwoPointOneByOne (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne")
    protected:
        void Construct_CalculatorTwoPointOneByOne(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTwoPointOneByOne()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne InitValue;
                    (*Value())[ItemName_CalculatorTwoPointOneByOne()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculatorTwoPointOneByOne(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTwoPointOneByOne()))
                {
                    Construct_CalculatorTwoPointOneByOne();
                }
                if ((*Value()).hasMember(ItemName_CalculatorTwoPointOneByOne()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne InitValue;
                    (*Value())[ItemName_CalculatorTwoPointOneByOne()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculatorTwoPointOneByOne(const CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculatorTwoPointOneByOne()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne Get_CalculatorTwoPointOneByOne(void) const
        {
            return (*Value())[ItemName_CalculatorTwoPointOneByOne()];
        }
        bool Get_CalculatorTwoPointOneByOne(CType_Config_Variable_General_ValueHandlingSG_Scaling_CalculatorTwoPointOneByOne& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculatorTwoPointOneByOne()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculatorTwoPointOneByOne()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CalculatorTypeLastUsed (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_CalculatorTypeLastUsed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTypeLastUsed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_CalculatorTypeLastUsed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CalculatorTypeLastUsed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CalculatorTypeLastUsed()))
                {
                    Construct_CalculatorTypeLastUsed();
                }
                if ((*Value()).hasMember(ItemName_CalculatorTypeLastUsed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_CalculatorTypeLastUsed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CalculatorTypeLastUsed(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_CalculatorTypeLastUsed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_CalculatorTypeLastUsed(void) const
        {
            return (*Value())[ItemName_CalculatorTypeLastUsed()];
        }
        bool Get_CalculatorTypeLastUsed(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CalculatorTypeLastUsed()]).valid())
                {
                    GetValue = (*Value())[ItemName_CalculatorTypeLastUsed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoRangeActualPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Info_Range")
    protected:
        void Construct_InfoRangeActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActualPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoRangeActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActualPhysical()))
                {
                    Construct_InfoRangeActualPhysical();
                }
                if ((*Value()).hasMember(ItemName_InfoRangeActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActualPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoRangeActualPhysical(const GInsXmlRpcStdAPI::CGIns_Info_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoRangeActualPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Range Get_InfoRangeActualPhysical(void) const
        {
            return (*Value())[ItemName_InfoRangeActualPhysical()];
        }
        bool Get_InfoRangeActualPhysical(GInsXmlRpcStdAPI::CGIns_Info_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoRangeActualPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoRangeActualPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoUnitFactorActualPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_InfoUnitFactorActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitFactorActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitFactorActualPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoUnitFactorActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitFactorActualPhysical()))
                {
                    Construct_InfoUnitFactorActualPhysical();
                }
                if ((*Value()).hasMember(ItemName_InfoUnitFactorActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitFactorActualPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoUnitFactorActualPhysical(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoUnitFactorActualPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_InfoUnitFactorActualPhysical(void) const
        {
            return (*Value())[ItemName_InfoUnitFactorActualPhysical()];
        }
        bool Get_InfoUnitFactorActualPhysical(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoUnitFactorActualPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoUnitFactorActualPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoUnitOffsetActualPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_InfoUnitOffsetActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitOffsetActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitOffsetActualPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoUnitOffsetActualPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitOffsetActualPhysical()))
                {
                    Construct_InfoUnitOffsetActualPhysical();
                }
                if ((*Value()).hasMember(ItemName_InfoUnitOffsetActualPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitOffsetActualPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoUnitOffsetActualPhysical(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoUnitOffsetActualPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_InfoUnitOffsetActualPhysical(void) const
        {
            return (*Value())[ItemName_InfoUnitOffsetActualPhysical()];
        }
        bool Get_InfoUnitOffsetActualPhysical(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoUnitOffsetActualPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoUnitOffsetActualPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoRangeActualIntermediate (Type: "GInsXmlRpcStdAPI::CGIns_Info_Range")
    protected:
        void Construct_InfoRangeActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActualIntermediate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoRangeActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActualIntermediate()))
                {
                    Construct_InfoRangeActualIntermediate();
                }
                if ((*Value()).hasMember(ItemName_InfoRangeActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActualIntermediate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoRangeActualIntermediate(const GInsXmlRpcStdAPI::CGIns_Info_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoRangeActualIntermediate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Range Get_InfoRangeActualIntermediate(void) const
        {
            return (*Value())[ItemName_InfoRangeActualIntermediate()];
        }
        bool Get_InfoRangeActualIntermediate(GInsXmlRpcStdAPI::CGIns_Info_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoRangeActualIntermediate()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoRangeActualIntermediate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoUnitFactorActualIntermediate (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_InfoUnitFactorActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitFactorActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitFactorActualIntermediate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoUnitFactorActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitFactorActualIntermediate()))
                {
                    Construct_InfoUnitFactorActualIntermediate();
                }
                if ((*Value()).hasMember(ItemName_InfoUnitFactorActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitFactorActualIntermediate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoUnitFactorActualIntermediate(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoUnitFactorActualIntermediate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_InfoUnitFactorActualIntermediate(void) const
        {
            return (*Value())[ItemName_InfoUnitFactorActualIntermediate()];
        }
        bool Get_InfoUnitFactorActualIntermediate(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoUnitFactorActualIntermediate()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoUnitFactorActualIntermediate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoUnitOffsetActualIntermediate (Type: "GInsXmlRpcStdAPI::CGIns_Info_Value_Float")
    protected:
        void Construct_InfoUnitOffsetActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitOffsetActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitOffsetActualIntermediate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoUnitOffsetActualIntermediate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoUnitOffsetActualIntermediate()))
                {
                    Construct_InfoUnitOffsetActualIntermediate();
                }
                if ((*Value()).hasMember(ItemName_InfoUnitOffsetActualIntermediate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Value_Float InitValue;
                    (*Value())[ItemName_InfoUnitOffsetActualIntermediate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoUnitOffsetActualIntermediate(const GInsXmlRpcStdAPI::CGIns_Info_Value_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoUnitOffsetActualIntermediate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Value_Float Get_InfoUnitOffsetActualIntermediate(void) const
        {
            return (*Value())[ItemName_InfoUnitOffsetActualIntermediate()];
        }
        bool Get_InfoUnitOffsetActualIntermediate(GInsXmlRpcStdAPI::CGIns_Info_Value_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoUnitOffsetActualIntermediate()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoUnitOffsetActualIntermediate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InfoRangeActual (Type: "GInsXmlRpcStdAPI::CGIns_Info_Range")
    protected:
        void Construct_InfoRangeActual(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActual()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActual()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoRangeActual(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoRangeActual()))
                {
                    Construct_InfoRangeActual();
                }
                if ((*Value()).hasMember(ItemName_InfoRangeActual()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_Range InitValue;
                    (*Value())[ItemName_InfoRangeActual()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoRangeActual(const GInsXmlRpcStdAPI::CGIns_Info_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoRangeActual()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_Range Get_InfoRangeActual(void) const
        {
            return (*Value())[ItemName_InfoRangeActual()];
        }
        bool Get_InfoRangeActual(GInsXmlRpcStdAPI::CGIns_Info_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoRangeActual()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoRangeActual()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Scaling


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Range
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Range : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_HardwareDefined(void)
        {
            static std::string str("HardwareDefined");
            return str;
        }
    public:
        static std::string const& ItemName_HardwareDefinedPhysical(void)
        {
            static std::string str("HardwareDefinedPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_ValueMinimum(void)
        {
            static std::string str("ValueMinimum");
            return str;
        }
    public:
        static std::string const& ItemName_ValueMaximum(void)
        {
            static std::string str("ValueMaximum");
            return str;
        }
    public:
        static std::string const& ItemName_ValueSupply(void)
        {
            static std::string str("ValueSupply");
            return str;
        }
    public:
        static std::string const& ItemName_ValueStartupAndDefault(void)
        {
            static std::string str("ValueStartupAndDefault");
            return str;
        }
    public:
        static std::string const& ItemName_ValueStartupAndDefaultPhysical(void)
        {
            static std::string str("ValueStartupAndDefaultPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_ValueStartupAndFallback(void)
        {
            static std::string str("ValueStartupAndFallback");
            return str;
        }
    public:
        static std::string const& ItemName_ValueStartupAndFallbackPhysical(void)
        {
            static std::string str("ValueStartupAndFallbackPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_ValueOverflow(void)
        {
            static std::string str("ValueOverflow");
            return str;
        }
    public:
        static std::string const& ItemName_ValueOverflowPhysical(void)
        {
            static std::string str("ValueOverflowPhysical");
            return str;
        }
    public:
        static std::string const& ItemName_ValueUnderflow(void)
        {
            static std::string str("ValueUnderflow");
            return str;
        }
    public:
        static std::string const& ItemName_ValueUnderflowPhysical(void)
        {
            static std::string str("ValueUnderflowPhysical");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Range");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.309");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Range(void)
    {
        try
        {
            Construct_HardwareDefined();
            Construct_HardwareDefinedPhysical();
            Construct_ValueMinimum();
            Construct_ValueMaximum();
            Construct_ValueSupply();
            Construct_ValueStartupAndDefault();
            Construct_ValueStartupAndDefaultPhysical();
            Construct_ValueStartupAndFallback();
            Construct_ValueStartupAndFallbackPhysical();
            Construct_ValueOverflow();
            Construct_ValueOverflowPhysical();
            Construct_ValueUnderflow();
            Construct_ValueUnderflowPhysical();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Range(const CType_Config_Variable_General_ValueHandlingSG_Range& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Range(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_HardwareDefined();
            Construct_HardwareDefinedPhysical();
            Construct_ValueMinimum();
            Construct_ValueMaximum();
            Construct_ValueSupply();
            Construct_ValueStartupAndDefault();
            Construct_ValueStartupAndDefaultPhysical();
            Construct_ValueStartupAndFallback();
            Construct_ValueStartupAndFallbackPhysical();
            Construct_ValueOverflow();
            Construct_ValueOverflowPhysical();
            Construct_ValueUnderflow();
            Construct_ValueUnderflowPhysical();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Range(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_HardwareDefined();
            Initialize_HardwareDefinedPhysical();
            Initialize_ValueMinimum();
            Initialize_ValueMaximum();
            Initialize_ValueSupply();
            Initialize_ValueStartupAndDefault();
            Initialize_ValueStartupAndDefaultPhysical();
            Initialize_ValueStartupAndFallback();
            Initialize_ValueStartupAndFallbackPhysical();
            Initialize_ValueOverflow();
            Initialize_ValueOverflowPhysical();
            Initialize_ValueUnderflow();
            Initialize_ValueUnderflowPhysical();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item HardwareDefined (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_HardwareDefined(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HardwareDefined()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_HardwareDefined()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HardwareDefined(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HardwareDefined()))
                {
                    Construct_HardwareDefined();
                }
                if ((*Value()).hasMember(ItemName_HardwareDefined()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_HardwareDefined()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HardwareDefined(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_HardwareDefined()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_HardwareDefined(void) const
        {
            return (*Value())[ItemName_HardwareDefined()];
        }
        bool Get_HardwareDefined(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HardwareDefined()]).valid())
                {
                    GetValue = (*Value())[ItemName_HardwareDefined()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HardwareDefinedPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Info_RangeList")
    protected:
        void Construct_HardwareDefinedPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HardwareDefinedPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_RangeList InitValue;
                    (*Value())[ItemName_HardwareDefinedPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HardwareDefinedPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HardwareDefinedPhysical()))
                {
                    Construct_HardwareDefinedPhysical();
                }
                if ((*Value()).hasMember(ItemName_HardwareDefinedPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_RangeList InitValue;
                    (*Value())[ItemName_HardwareDefinedPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HardwareDefinedPhysical(const GInsXmlRpcStdAPI::CGIns_Info_RangeList& SetValue)
        {
            try
            {
                (*Value())[ItemName_HardwareDefinedPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_RangeList Get_HardwareDefinedPhysical(void) const
        {
            return (*Value())[ItemName_HardwareDefinedPhysical()];
        }
        bool Get_HardwareDefinedPhysical(GInsXmlRpcStdAPI::CGIns_Info_RangeList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HardwareDefinedPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_HardwareDefinedPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueMinimum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueMinimum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueMinimum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMinimum()))
                {
                    Construct_ValueMinimum();
                }
                if ((*Value()).hasMember(ItemName_ValueMinimum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueMinimum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueMinimum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueMinimum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueMinimum(void) const
        {
            return (*Value())[ItemName_ValueMinimum()];
        }
        bool Get_ValueMinimum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueMinimum()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueMinimum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueMaximum (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueMaximum()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueMaximum(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueMaximum()))
                {
                    Construct_ValueMaximum();
                }
                if ((*Value()).hasMember(ItemName_ValueMaximum()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueMaximum()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueMaximum(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueMaximum()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueMaximum(void) const
        {
            return (*Value())[ItemName_ValueMaximum()];
        }
        bool Get_ValueMaximum(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueMaximum()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueMaximum()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueSupply (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueSupply(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueSupply()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueSupply()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueSupply(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueSupply()))
                {
                    Construct_ValueSupply();
                }
                if ((*Value()).hasMember(ItemName_ValueSupply()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueSupply()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueSupply(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueSupply()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueSupply(void) const
        {
            return (*Value())[ItemName_ValueSupply()];
        }
        bool Get_ValueSupply(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueSupply()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueSupply()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueStartupAndDefault (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueStartupAndDefault(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndDefault()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndDefault()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueStartupAndDefault(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndDefault()))
                {
                    Construct_ValueStartupAndDefault();
                }
                if ((*Value()).hasMember(ItemName_ValueStartupAndDefault()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndDefault()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueStartupAndDefault(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueStartupAndDefault()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueStartupAndDefault(void) const
        {
            return (*Value())[ItemName_ValueStartupAndDefault()];
        }
        bool Get_ValueStartupAndDefault(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueStartupAndDefault()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueStartupAndDefault()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueStartupAndDefaultPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueStartupAndDefaultPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndDefaultPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndDefaultPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueStartupAndDefaultPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndDefaultPhysical()))
                {
                    Construct_ValueStartupAndDefaultPhysical();
                }
                if ((*Value()).hasMember(ItemName_ValueStartupAndDefaultPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndDefaultPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueStartupAndDefaultPhysical(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueStartupAndDefaultPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueStartupAndDefaultPhysical(void) const
        {
            return (*Value())[ItemName_ValueStartupAndDefaultPhysical()];
        }
        bool Get_ValueStartupAndDefaultPhysical(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueStartupAndDefaultPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueStartupAndDefaultPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueStartupAndFallback (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueStartupAndFallback(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndFallback()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndFallback()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueStartupAndFallback(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndFallback()))
                {
                    Construct_ValueStartupAndFallback();
                }
                if ((*Value()).hasMember(ItemName_ValueStartupAndFallback()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndFallback()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueStartupAndFallback(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueStartupAndFallback()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueStartupAndFallback(void) const
        {
            return (*Value())[ItemName_ValueStartupAndFallback()];
        }
        bool Get_ValueStartupAndFallback(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueStartupAndFallback()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueStartupAndFallback()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueStartupAndFallbackPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueStartupAndFallbackPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndFallbackPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndFallbackPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueStartupAndFallbackPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStartupAndFallbackPhysical()))
                {
                    Construct_ValueStartupAndFallbackPhysical();
                }
                if ((*Value()).hasMember(ItemName_ValueStartupAndFallbackPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueStartupAndFallbackPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueStartupAndFallbackPhysical(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueStartupAndFallbackPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueStartupAndFallbackPhysical(void) const
        {
            return (*Value())[ItemName_ValueStartupAndFallbackPhysical()];
        }
        bool Get_ValueStartupAndFallbackPhysical(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueStartupAndFallbackPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueStartupAndFallbackPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueOverflow (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueOverflow(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueOverflow()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueOverflow()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueOverflow(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueOverflow()))
                {
                    Construct_ValueOverflow();
                }
                if ((*Value()).hasMember(ItemName_ValueOverflow()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueOverflow()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueOverflow(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueOverflow()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueOverflow(void) const
        {
            return (*Value())[ItemName_ValueOverflow()];
        }
        bool Get_ValueOverflow(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueOverflow()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueOverflow()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueOverflowPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueOverflowPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueOverflowPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueOverflowPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueOverflowPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueOverflowPhysical()))
                {
                    Construct_ValueOverflowPhysical();
                }
                if ((*Value()).hasMember(ItemName_ValueOverflowPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueOverflowPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueOverflowPhysical(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueOverflowPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueOverflowPhysical(void) const
        {
            return (*Value())[ItemName_ValueOverflowPhysical()];
        }
        bool Get_ValueOverflowPhysical(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueOverflowPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueOverflowPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueUnderflow (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueUnderflow(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUnderflow()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUnderflow()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueUnderflow(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUnderflow()))
                {
                    Construct_ValueUnderflow();
                }
                if ((*Value()).hasMember(ItemName_ValueUnderflow()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUnderflow()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueUnderflow(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueUnderflow()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueUnderflow(void) const
        {
            return (*Value())[ItemName_ValueUnderflow()];
        }
        bool Get_ValueUnderflow(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueUnderflow()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueUnderflow()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueUnderflowPhysical (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ValueUnderflowPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUnderflowPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUnderflowPhysical()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueUnderflowPhysical(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueUnderflowPhysical()))
                {
                    Construct_ValueUnderflowPhysical();
                }
                if ((*Value()).hasMember(ItemName_ValueUnderflowPhysical()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ValueUnderflowPhysical()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueUnderflowPhysical(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueUnderflowPhysical()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ValueUnderflowPhysical(void) const
        {
            return (*Value())[ItemName_ValueUnderflowPhysical()];
        }
        bool Get_ValueUnderflowPhysical(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueUnderflowPhysical()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueUnderflowPhysical()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Range


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Source
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Source : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalAddress(void)
        {
            static std::string str("ExternalAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataByteOffset(void)
        {
            static std::string str("ExternalDataByteOffset");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataFormat(void)
        {
            static std::string str("ExternalDataFormat");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Source");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.310");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Source(void)
    {
        try
        {
            Construct_Type();
            Construct_ExternalAddress();
            Construct_ExternalDataByteOffset();
            Construct_ExternalDataFormat();
            Construct_Variable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Source(const CType_Config_Variable_General_ValueHandlingSG_Source& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Source(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_ExternalAddress();
            Construct_ExternalDataByteOffset();
            Construct_ExternalDataFormat();
            Construct_Variable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Source(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_ExternalAddress();
            Initialize_ExternalDataByteOffset();
            Initialize_ExternalDataFormat();
            Initialize_Variable();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    Construct_ExternalAddress();
                }
                if ((*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalAddress(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ExternalAddress(void) const
        {
            return (*Value())[ItemName_ExternalAddress()];
        }
        bool Get_ExternalAddress(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataByteOffset (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalDataByteOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataByteOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataByteOffset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataByteOffset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataByteOffset()))
                {
                    Construct_ExternalDataByteOffset();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataByteOffset()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataByteOffset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataByteOffset(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataByteOffset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalDataByteOffset(void) const
        {
            return (*Value())[ItemName_ExternalDataByteOffset()];
        }
        bool Get_ExternalDataByteOffset(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataByteOffset()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataByteOffset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    Construct_ExternalDataFormat();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_ExternalDataFormat(void) const
        {
            return (*Value())[ItemName_ExternalDataFormat()];
        }
        bool Get_ExternalDataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Source


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_ErrorHandling
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_ErrorHandling : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_WithSignaling(void)
        {
            static std::string str("WithSignaling");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_ErrorHandling");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.311");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_ErrorHandling(void)
    {
        try
        {
            Construct_Type();
            Construct_WithSignaling();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_ErrorHandling(const CType_Config_Variable_General_ValueHandlingSG_ErrorHandling& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_ErrorHandling(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_WithSignaling();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_ErrorHandling(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_WithSignaling();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WithSignaling (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_WithSignaling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithSignaling()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_WithSignaling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WithSignaling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithSignaling()))
                {
                    Construct_WithSignaling();
                }
                if ((*Value()).hasMember(ItemName_WithSignaling()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_WithSignaling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithSignaling(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_WithSignaling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_WithSignaling(void) const
        {
            return (*Value())[ItemName_WithSignaling()];
        }
        bool Get_WithSignaling(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithSignaling()]).valid())
                {
                    GetValue = (*Value())[ItemName_WithSignaling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_ErrorHandling


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_WatchdogHandling");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.337");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling(const CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Timing
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Timing : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_TimeBase(void)
        {
            static std::string str("TimeBase");
            return str;
        }
    public:
        static std::string const& ItemName_SignalTimeoutType(void)
        {
            static std::string str("SignalTimeoutType");
            return str;
        }
    public:
        static std::string const& ItemName_SignalTimeoutTime(void)
        {
            static std::string str("SignalTimeoutTime");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Timing");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.312");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Timing(void)
    {
        try
        {
            Construct_TimeBase();
            Construct_SignalTimeoutType();
            Construct_SignalTimeoutTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Timing(const CType_Config_Variable_General_ValueHandlingSG_Timing& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Timing(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_TimeBase();
            Construct_SignalTimeoutType();
            Construct_SignalTimeoutTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Timing(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_TimeBase();
            Initialize_SignalTimeoutType();
            Initialize_SignalTimeoutTime();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item TimeBase (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_TimeBase(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeBase()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeBase()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimeBase(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimeBase()))
                {
                    Construct_TimeBase();
                }
                if ((*Value()).hasMember(ItemName_TimeBase()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_TimeBase()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimeBase(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimeBase()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_TimeBase(void) const
        {
            return (*Value())[ItemName_TimeBase()];
        }
        bool Get_TimeBase(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimeBase()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimeBase()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SignalTimeoutType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SignalTimeoutType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalTimeoutType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalTimeoutType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SignalTimeoutType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalTimeoutType()))
                {
                    Construct_SignalTimeoutType();
                }
                if ((*Value()).hasMember(ItemName_SignalTimeoutType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SignalTimeoutType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalTimeoutType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalTimeoutType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SignalTimeoutType(void) const
        {
            return (*Value())[ItemName_SignalTimeoutType()];
        }
        bool Get_SignalTimeoutType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalTimeoutType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SignalTimeoutType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SignalTimeoutTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SignalTimeoutTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalTimeoutTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SignalTimeoutTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SignalTimeoutTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SignalTimeoutTime()))
                {
                    Construct_SignalTimeoutTime();
                }
                if ((*Value()).hasMember(ItemName_SignalTimeoutTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SignalTimeoutTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SignalTimeoutTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SignalTimeoutTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SignalTimeoutTime(void) const
        {
            return (*Value())[ItemName_SignalTimeoutTime()];
        }
        bool Get_SignalTimeoutTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SignalTimeoutTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_SignalTimeoutTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Timing


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_Constant(void)
        {
            static std::string str("Constant");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.313");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value(void)
    {
        try
        {
            Construct_Type();
            Construct_Variable();
            Construct_Constant();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Variable();
            Construct_Constant();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Variable();
            Initialize_Constant();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Constant (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Constant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Constant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Constant()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Constant(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Constant()))
                {
                    Construct_Constant();
                }
                if ((*Value()).hasMember(ItemName_Constant()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Constant()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Constant(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Constant()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Constant(void) const
        {
            return (*Value())[ItemName_Constant()];
        }
        bool Get_Constant(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Constant()]).valid())
                {
                    GetValue = (*Value())[ItemName_Constant()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_ThresholdSG
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_ThresholdSG : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_Value0(void)
        {
            static std::string str("Value0");
            return str;
        }
    public:
        static std::string const& ItemName_Value1(void)
        {
            static std::string str("Value1");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_ThresholdSG");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.314");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG(void)
    {
        try
        {
            Construct_Type();
            Construct_Variable();
            Construct_Value0();
            Construct_Value1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Variable();
            Construct_Value0();
            Construct_Value1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_ThresholdSG(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Variable();
            Initialize_Value0();
            Initialize_Value1();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value0 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value")
    protected:
        void Construct_Value0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value0()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value InitValue;
                    (*Value())[ItemName_Value0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value0()))
                {
                    Construct_Value0();
                }
                if ((*Value()).hasMember(ItemName_Value0()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value InitValue;
                    (*Value())[ItemName_Value0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value0(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value Get_Value0(void) const
        {
            return (*Value())[ItemName_Value0()];
        }
        bool Get_Value0(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Value1 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value")
    protected:
        void Construct_Value1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value1()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value InitValue;
                    (*Value())[ItemName_Value1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Value1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Value1()))
                {
                    Construct_Value1();
                }
                if ((*Value()).hasMember(ItemName_Value1()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value InitValue;
                    (*Value())[ItemName_Value1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Value1(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value& SetValue)
        {
            try
            {
                (*Value())[ItemName_Value1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value Get_Value1(void) const
        {
            return (*Value())[ItemName_Value1()];
        }
        bool Get_Value1(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG_Value& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Value1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Value1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_ThresholdSG


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG_Threshold
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG_Threshold : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Threshold0(void)
        {
            static std::string str("Threshold0");
            return str;
        }
    public:
        static std::string const& ItemName_Threshold1(void)
        {
            static std::string str("Threshold1");
            return str;
        }
    public:
        static std::string const& ItemName_Threshold2(void)
        {
            static std::string str("Threshold2");
            return str;
        }
    public:
        static std::string const& ItemName_Threshold3(void)
        {
            static std::string str("Threshold3");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG_Threshold");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.315");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG_Threshold(void)
    {
        try
        {
            Construct_Threshold0();
            Construct_Threshold1();
            Construct_Threshold2();
            Construct_Threshold3();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG_Threshold(const CType_Config_Variable_General_ValueHandlingSG_Threshold& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG_Threshold(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Threshold0();
            Construct_Threshold1();
            Construct_Threshold2();
            Construct_Threshold3();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG_Threshold(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Threshold0();
            Initialize_Threshold1();
            Initialize_Threshold2();
            Initialize_Threshold3();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Threshold0 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG")
    protected:
        void Construct_Threshold0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold0()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Threshold0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold0()))
                {
                    Construct_Threshold0();
                }
                if ((*Value()).hasMember(ItemName_Threshold0()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Threshold0(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Threshold0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG Get_Threshold0(void) const
        {
            return (*Value())[ItemName_Threshold0()];
        }
        bool Get_Threshold0(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Threshold0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Threshold0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Threshold1 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG")
    protected:
        void Construct_Threshold1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold1()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Threshold1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold1()))
                {
                    Construct_Threshold1();
                }
                if ((*Value()).hasMember(ItemName_Threshold1()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Threshold1(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Threshold1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG Get_Threshold1(void) const
        {
            return (*Value())[ItemName_Threshold1()];
        }
        bool Get_Threshold1(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Threshold1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Threshold1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Threshold2 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG")
    protected:
        void Construct_Threshold2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold2()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Threshold2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold2()))
                {
                    Construct_Threshold2();
                }
                if ((*Value()).hasMember(ItemName_Threshold2()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Threshold2(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Threshold2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG Get_Threshold2(void) const
        {
            return (*Value())[ItemName_Threshold2()];
        }
        bool Get_Threshold2(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Threshold2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Threshold2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Threshold3 (Type: "CType_Config_Variable_General_ValueHandlingSG_ThresholdSG")
    protected:
        void Construct_Threshold3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold3()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Threshold3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Threshold3()))
                {
                    Construct_Threshold3();
                }
                if ((*Value()).hasMember(ItemName_Threshold3()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ThresholdSG InitValue;
                    (*Value())[ItemName_Threshold3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Threshold3(const CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Threshold3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ThresholdSG Get_Threshold3(void) const
        {
            return (*Value())[ItemName_Threshold3()];
        }
        bool Get_Threshold3(CType_Config_Variable_General_ValueHandlingSG_ThresholdSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Threshold3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Threshold3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG_Threshold


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandlingSG
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandlingSG : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Linearisation(void)
        {
            static std::string str("Linearisation");
            return str;
        }
    public:
        static std::string const& ItemName_Scaling(void)
        {
            static std::string str("Scaling");
            return str;
        }
    public:
        static std::string const& ItemName_Range(void)
        {
            static std::string str("Range");
            return str;
        }
    public:
        static std::string const& ItemName_Source(void)
        {
            static std::string str("Source");
            return str;
        }
    public:
        static std::string const& ItemName_ErrorHandling(void)
        {
            static std::string str("ErrorHandling");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogHandling(void)
        {
            static std::string str("WatchdogHandling");
            return str;
        }
    public:
        static std::string const& ItemName_Timing(void)
        {
            static std::string str("Timing");
            return str;
        }
    public:
        static std::string const& ItemName_ThresholdORed(void)
        {
            static std::string str("ThresholdORed");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandlingSG");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.316");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandlingSG(void)
    {
        try
        {
            Construct_Type();
            Construct_Linearisation();
            Construct_Scaling();
            Construct_Range();
            Construct_Source();
            Construct_ErrorHandling();
            Construct_WatchdogHandling();
            Construct_Timing();
            Construct_ThresholdORed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandlingSG(const CType_Config_Variable_General_ValueHandlingSG& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandlingSG(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Linearisation();
            Construct_Scaling();
            Construct_Range();
            Construct_Source();
            Construct_ErrorHandling();
            Construct_WatchdogHandling();
            Construct_Timing();
            Construct_ThresholdORed();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandlingSG(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Linearisation();
            Initialize_Scaling();
            Initialize_Range();
            Initialize_Source();
            Initialize_ErrorHandling();
            Initialize_WatchdogHandling();
            Initialize_Timing();
            Initialize_ThresholdORed();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Linearisation (Type: "CType_Config_Variable_General_ValueHandlingSG_Linearisation")
    protected:
        void Construct_Linearisation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Linearisation()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Linearisation InitValue;
                    (*Value())[ItemName_Linearisation()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Linearisation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Linearisation()))
                {
                    Construct_Linearisation();
                }
                if ((*Value()).hasMember(ItemName_Linearisation()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Linearisation InitValue;
                    (*Value())[ItemName_Linearisation()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Linearisation(const CType_Config_Variable_General_ValueHandlingSG_Linearisation& SetValue)
        {
            try
            {
                (*Value())[ItemName_Linearisation()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Linearisation Get_Linearisation(void) const
        {
            return (*Value())[ItemName_Linearisation()];
        }
        bool Get_Linearisation(CType_Config_Variable_General_ValueHandlingSG_Linearisation& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Linearisation()]).valid())
                {
                    GetValue = (*Value())[ItemName_Linearisation()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Scaling (Type: "CType_Config_Variable_General_ValueHandlingSG_Scaling")
    protected:
        void Construct_Scaling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Scaling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling InitValue;
                    (*Value())[ItemName_Scaling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Scaling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Scaling()))
                {
                    Construct_Scaling();
                }
                if ((*Value()).hasMember(ItemName_Scaling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Scaling InitValue;
                    (*Value())[ItemName_Scaling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Scaling(const CType_Config_Variable_General_ValueHandlingSG_Scaling& SetValue)
        {
            try
            {
                (*Value())[ItemName_Scaling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Scaling Get_Scaling(void) const
        {
            return (*Value())[ItemName_Scaling()];
        }
        bool Get_Scaling(CType_Config_Variable_General_ValueHandlingSG_Scaling& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Scaling()]).valid())
                {
                    GetValue = (*Value())[ItemName_Scaling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Range (Type: "CType_Config_Variable_General_ValueHandlingSG_Range")
    protected:
        void Construct_Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Range()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Range InitValue;
                    (*Value())[ItemName_Range()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Range(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Range()))
                {
                    Construct_Range();
                }
                if ((*Value()).hasMember(ItemName_Range()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Range InitValue;
                    (*Value())[ItemName_Range()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Range(const CType_Config_Variable_General_ValueHandlingSG_Range& SetValue)
        {
            try
            {
                (*Value())[ItemName_Range()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Range Get_Range(void) const
        {
            return (*Value())[ItemName_Range()];
        }
        bool Get_Range(CType_Config_Variable_General_ValueHandlingSG_Range& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Range()]).valid())
                {
                    GetValue = (*Value())[ItemName_Range()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Source (Type: "CType_Config_Variable_General_ValueHandlingSG_Source")
    protected:
        void Construct_Source(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Source()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Source InitValue;
                    (*Value())[ItemName_Source()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Source(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Source()))
                {
                    Construct_Source();
                }
                if ((*Value()).hasMember(ItemName_Source()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Source InitValue;
                    (*Value())[ItemName_Source()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Source(const CType_Config_Variable_General_ValueHandlingSG_Source& SetValue)
        {
            try
            {
                (*Value())[ItemName_Source()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Source Get_Source(void) const
        {
            return (*Value())[ItemName_Source()];
        }
        bool Get_Source(CType_Config_Variable_General_ValueHandlingSG_Source& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Source()]).valid())
                {
                    GetValue = (*Value())[ItemName_Source()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ErrorHandling (Type: "CType_Config_Variable_General_ValueHandlingSG_ErrorHandling")
    protected:
        void Construct_ErrorHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ErrorHandling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ErrorHandling InitValue;
                    (*Value())[ItemName_ErrorHandling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ErrorHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ErrorHandling()))
                {
                    Construct_ErrorHandling();
                }
                if ((*Value()).hasMember(ItemName_ErrorHandling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_ErrorHandling InitValue;
                    (*Value())[ItemName_ErrorHandling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ErrorHandling(const CType_Config_Variable_General_ValueHandlingSG_ErrorHandling& SetValue)
        {
            try
            {
                (*Value())[ItemName_ErrorHandling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_ErrorHandling Get_ErrorHandling(void) const
        {
            return (*Value())[ItemName_ErrorHandling()];
        }
        bool Get_ErrorHandling(CType_Config_Variable_General_ValueHandlingSG_ErrorHandling& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ErrorHandling()]).valid())
                {
                    GetValue = (*Value())[ItemName_ErrorHandling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogHandling (Type: "CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling")
    protected:
        void Construct_WatchdogHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogHandling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling InitValue;
                    (*Value())[ItemName_WatchdogHandling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogHandling()))
                {
                    Construct_WatchdogHandling();
                }
                if ((*Value()).hasMember(ItemName_WatchdogHandling()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling InitValue;
                    (*Value())[ItemName_WatchdogHandling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogHandling(const CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogHandling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling Get_WatchdogHandling(void) const
        {
            return (*Value())[ItemName_WatchdogHandling()];
        }
        bool Get_WatchdogHandling(CType_Config_Variable_General_ValueHandlingSG_WatchdogHandling& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogHandling()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogHandling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timing (Type: "CType_Config_Variable_General_ValueHandlingSG_Timing")
    protected:
        void Construct_Timing(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timing()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Timing InitValue;
                    (*Value())[ItemName_Timing()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timing(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timing()))
                {
                    Construct_Timing();
                }
                if ((*Value()).hasMember(ItemName_Timing()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Timing InitValue;
                    (*Value())[ItemName_Timing()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timing(const CType_Config_Variable_General_ValueHandlingSG_Timing& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timing()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Timing Get_Timing(void) const
        {
            return (*Value())[ItemName_Timing()];
        }
        bool Get_Timing(CType_Config_Variable_General_ValueHandlingSG_Timing& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timing()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timing()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ThresholdORed (Type: "CType_Config_Variable_General_ValueHandlingSG_Threshold")
    protected:
        void Construct_ThresholdORed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ThresholdORed()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Threshold InitValue;
                    (*Value())[ItemName_ThresholdORed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ThresholdORed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ThresholdORed()))
                {
                    Construct_ThresholdORed();
                }
                if ((*Value()).hasMember(ItemName_ThresholdORed()))
                {
                    CType_Config_Variable_General_ValueHandlingSG_Threshold InitValue;
                    (*Value())[ItemName_ThresholdORed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ThresholdORed(const CType_Config_Variable_General_ValueHandlingSG_Threshold& SetValue)
        {
            try
            {
                (*Value())[ItemName_ThresholdORed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG_Threshold Get_ThresholdORed(void) const
        {
            return (*Value())[ItemName_ThresholdORed()];
        }
        bool Get_ThresholdORed(CType_Config_Variable_General_ValueHandlingSG_Threshold& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ThresholdORed()]).valid())
                {
                    GetValue = (*Value())[ItemName_ThresholdORed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandlingSG


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_ValueHandling
//------------------------------------------------------------------------
class CType_Config_Variable_General_ValueHandling : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Main(void)
        {
            static std::string str("Main");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_ValueHandling");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.317");
        return str;
    }
public:
    CType_Config_Variable_General_ValueHandling(void)
    {
        try
        {
            Construct_Main();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_ValueHandling(const CType_Config_Variable_General_ValueHandling& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_ValueHandling(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Main();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_ValueHandling(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Main();
            Initialize_Additional();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Main (Type: "CType_Config_Variable_General_ValueHandlingSG")
    protected:
        void Construct_Main(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Main()))
                {
                    CType_Config_Variable_General_ValueHandlingSG InitValue;
                    (*Value())[ItemName_Main()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Main(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Main()))
                {
                    Construct_Main();
                }
                if ((*Value()).hasMember(ItemName_Main()))
                {
                    CType_Config_Variable_General_ValueHandlingSG InitValue;
                    (*Value())[ItemName_Main()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Main(const CType_Config_Variable_General_ValueHandlingSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Main()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG Get_Main(void) const
        {
            return (*Value())[ItemName_Main()];
        }
        bool Get_Main(CType_Config_Variable_General_ValueHandlingSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Main()]).valid())
                {
                    GetValue = (*Value())[ItemName_Main()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_Variable_General_ValueHandlingSG")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Variable_General_ValueHandlingSG InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Variable_General_ValueHandlingSG InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_Variable_General_ValueHandlingSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandlingSG Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_Variable_General_ValueHandlingSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_ValueHandling


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_Oversampling
//------------------------------------------------------------------------
class CType_Config_Variable_General_Oversampling : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_SubSamplingFrequencyDivider(void)
        {
            static std::string str("SubSamplingFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_Depth(void)
        {
            static std::string str("Depth");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_Oversampling");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.318");
        return str;
    }
public:
    CType_Config_Variable_General_Oversampling(void)
    {
        try
        {
            Construct_Type();
            Construct_SubSamplingFrequencyDivider();
            Construct_Depth();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_Oversampling(const CType_Config_Variable_General_Oversampling& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_Oversampling(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_SubSamplingFrequencyDivider();
            Construct_Depth();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_Oversampling(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_SubSamplingFrequencyDivider();
            Initialize_Depth();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SubSamplingFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SubSamplingFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubSamplingFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SubSamplingFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SubSamplingFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubSamplingFrequencyDivider()))
                {
                    Construct_SubSamplingFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_SubSamplingFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SubSamplingFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SubSamplingFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SubSamplingFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SubSamplingFrequencyDivider(void) const
        {
            return (*Value())[ItemName_SubSamplingFrequencyDivider()];
        }
        bool Get_SubSamplingFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SubSamplingFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_SubSamplingFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Depth (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Depth(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Depth()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Depth()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Depth(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Depth()))
                {
                    Construct_Depth();
                }
                if ((*Value()).hasMember(ItemName_Depth()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Depth()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Depth(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Depth()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_Depth(void) const
        {
            return (*Value())[ItemName_Depth()];
        }
        bool Get_Depth(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Depth()]).valid())
                {
                    GetValue = (*Value())[ItemName_Depth()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_Oversampling


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_AdjustmentSG
//------------------------------------------------------------------------
class CType_Config_Variable_General_AdjustmentSG : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OnHost(void)
        {
            static std::string str("OnHost");
            return str;
        }
    public:
        static std::string const& ItemName_OnDigitalInputTerminal(void)
        {
            static std::string str("OnDigitalInputTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_OnVariable(void)
        {
            static std::string str("OnVariable");
            return str;
        }
    public:
        static std::string const& ItemName_OnHandlingInterval(void)
        {
            static std::string str("OnHandlingInterval");
            return str;
        }
    public:
        static std::string const& ItemName_SaveNonVolatile(void)
        {
            static std::string str("SaveNonVolatile");
            return str;
        }
    public:
        static std::string const& ItemName_DigitalInputTerminal(void)
        {
            static std::string str("DigitalInputTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_AdjustmentSG");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.319");
        return str;
    }
public:
    CType_Config_Variable_General_AdjustmentSG(void)
    {
        try
        {
            Construct_OnHost();
            Construct_OnDigitalInputTerminal();
            Construct_OnVariable();
            Construct_OnHandlingInterval();
            Construct_SaveNonVolatile();
            Construct_DigitalInputTerminal();
            Construct_Variable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_AdjustmentSG(const CType_Config_Variable_General_AdjustmentSG& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_AdjustmentSG(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OnHost();
            Construct_OnDigitalInputTerminal();
            Construct_OnVariable();
            Construct_OnHandlingInterval();
            Construct_SaveNonVolatile();
            Construct_DigitalInputTerminal();
            Construct_Variable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_AdjustmentSG(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OnHost();
            Initialize_OnDigitalInputTerminal();
            Initialize_OnVariable();
            Initialize_OnHandlingInterval();
            Initialize_SaveNonVolatile();
            Initialize_DigitalInputTerminal();
            Initialize_Variable();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OnHost (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHost(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHost()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHost()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHost(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHost()))
                {
                    Construct_OnHost();
                }
                if ((*Value()).hasMember(ItemName_OnHost()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHost()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHost(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHost()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHost(void) const
        {
            return (*Value())[ItemName_OnHost()];
        }
        bool Get_OnHost(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHost()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHost()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnDigitalInputTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnDigitalInputTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnDigitalInputTerminal()))
                {
                    Construct_OnDigitalInputTerminal();
                }
                if ((*Value()).hasMember(ItemName_OnDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnDigitalInputTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnDigitalInputTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnDigitalInputTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnDigitalInputTerminal(void) const
        {
            return (*Value())[ItemName_OnDigitalInputTerminal()];
        }
        bool Get_OnDigitalInputTerminal(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnDigitalInputTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnDigitalInputTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnVariable()))
                {
                    Construct_OnVariable();
                }
                if ((*Value()).hasMember(ItemName_OnVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnVariable(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnVariable(void) const
        {
            return (*Value())[ItemName_OnVariable()];
        }
        bool Get_OnVariable(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OnHandlingInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_OnHandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHandlingInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OnHandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnHandlingInterval()))
                {
                    Construct_OnHandlingInterval();
                }
                if ((*Value()).hasMember(ItemName_OnHandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_OnHandlingInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnHandlingInterval(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OnHandlingInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_OnHandlingInterval(void) const
        {
            return (*Value())[ItemName_OnHandlingInterval()];
        }
        bool Get_OnHandlingInterval(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnHandlingInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_OnHandlingInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SaveNonVolatile (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_SaveNonVolatile(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SaveNonVolatile()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_SaveNonVolatile()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SaveNonVolatile(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SaveNonVolatile()))
                {
                    Construct_SaveNonVolatile();
                }
                if ((*Value()).hasMember(ItemName_SaveNonVolatile()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_SaveNonVolatile()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SaveNonVolatile(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SaveNonVolatile()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_SaveNonVolatile(void) const
        {
            return (*Value())[ItemName_SaveNonVolatile()];
        }
        bool Get_SaveNonVolatile(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SaveNonVolatile()]).valid())
                {
                    GetValue = (*Value())[ItemName_SaveNonVolatile()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DigitalInputTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputTerminal()))
                {
                    Construct_DigitalInputTerminal();
                }
                if ((*Value()).hasMember(ItemName_DigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalInputTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalInputTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DigitalInputTerminal(void) const
        {
            return (*Value())[ItemName_DigitalInputTerminal()];
        }
        bool Get_DigitalInputTerminal(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalInputTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalInputTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_AdjustmentSG


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_Adjustment
//------------------------------------------------------------------------
class CType_Config_Variable_General_Adjustment : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Event(void)
        {
            static std::string str("Event");
            return str;
        }
    public:
        static std::string const& ItemName_Reset(void)
        {
            static std::string str("Reset");
            return str;
        }
    public:
        static std::string const& ItemName_ResetChargeAmplifier(void)
        {
            static std::string str("ResetChargeAmplifier");
            return str;
        }
    public:
        static std::string const& ItemName_Shunt(void)
        {
            static std::string str("Shunt");
            return str;
        }
    public:
        static std::string const& ItemName_Tare(void)
        {
            static std::string str("Tare");
            return str;
        }
    public:
        static std::string const& ItemName_Zero(void)
        {
            static std::string str("Zero");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_Adjustment");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.320");
        return str;
    }
public:
    CType_Config_Variable_General_Adjustment(void)
    {
        try
        {
            Construct_Event();
            Construct_Reset();
            Construct_ResetChargeAmplifier();
            Construct_Shunt();
            Construct_Tare();
            Construct_Zero();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_Adjustment(const CType_Config_Variable_General_Adjustment& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_Adjustment(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Event();
            Construct_Reset();
            Construct_ResetChargeAmplifier();
            Construct_Shunt();
            Construct_Tare();
            Construct_Zero();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_Adjustment(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Event();
            Initialize_Reset();
            Initialize_ResetChargeAmplifier();
            Initialize_Shunt();
            Initialize_Tare();
            Initialize_Zero();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Event (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_Event(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Event()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Event()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Event(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Event()))
                {
                    Construct_Event();
                }
                if ((*Value()).hasMember(ItemName_Event()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Event()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Event(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Event()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_Event(void) const
        {
            return (*Value())[ItemName_Event()];
        }
        bool Get_Event(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Event()]).valid())
                {
                    GetValue = (*Value())[ItemName_Event()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Reset (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_Reset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reset()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Reset()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Reset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reset()))
                {
                    Construct_Reset();
                }
                if ((*Value()).hasMember(ItemName_Reset()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Reset()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Reset(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Reset()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_Reset(void) const
        {
            return (*Value())[ItemName_Reset()];
        }
        bool Get_Reset(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Reset()]).valid())
                {
                    GetValue = (*Value())[ItemName_Reset()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResetChargeAmplifier (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_ResetChargeAmplifier(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResetChargeAmplifier()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_ResetChargeAmplifier()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResetChargeAmplifier(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResetChargeAmplifier()))
                {
                    Construct_ResetChargeAmplifier();
                }
                if ((*Value()).hasMember(ItemName_ResetChargeAmplifier()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_ResetChargeAmplifier()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResetChargeAmplifier(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResetChargeAmplifier()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_ResetChargeAmplifier(void) const
        {
            return (*Value())[ItemName_ResetChargeAmplifier()];
        }
        bool Get_ResetChargeAmplifier(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResetChargeAmplifier()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResetChargeAmplifier()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Shunt (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_Shunt(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Shunt()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Shunt()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Shunt(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Shunt()))
                {
                    Construct_Shunt();
                }
                if ((*Value()).hasMember(ItemName_Shunt()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Shunt()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Shunt(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Shunt()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_Shunt(void) const
        {
            return (*Value())[ItemName_Shunt()];
        }
        bool Get_Shunt(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Shunt()]).valid())
                {
                    GetValue = (*Value())[ItemName_Shunt()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Tare (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_Tare(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Tare()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Tare()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Tare(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Tare()))
                {
                    Construct_Tare();
                }
                if ((*Value()).hasMember(ItemName_Tare()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Tare()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Tare(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Tare()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_Tare(void) const
        {
            return (*Value())[ItemName_Tare()];
        }
        bool Get_Tare(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Tare()]).valid())
                {
                    GetValue = (*Value())[ItemName_Tare()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Zero (Type: "CType_Config_Variable_General_AdjustmentSG")
    protected:
        void Construct_Zero(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Zero()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Zero()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Zero(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Zero()))
                {
                    Construct_Zero();
                }
                if ((*Value()).hasMember(ItemName_Zero()))
                {
                    CType_Config_Variable_General_AdjustmentSG InitValue;
                    (*Value())[ItemName_Zero()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Zero(const CType_Config_Variable_General_AdjustmentSG& SetValue)
        {
            try
            {
                (*Value())[ItemName_Zero()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_AdjustmentSG Get_Zero(void) const
        {
            return (*Value())[ItemName_Zero()];
        }
        bool Get_Zero(CType_Config_Variable_General_AdjustmentSG& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Zero()]).valid())
                {
                    GetValue = (*Value())[ItemName_Zero()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_Adjustment


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General_Formula
//------------------------------------------------------------------------
class CType_Config_Variable_General_Formula : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_TextToSet(void)
        {
            static std::string str("TextToSet");
            return str;
        }
    public:
        static std::string const& ItemName_TextAnalyzed(void)
        {
            static std::string str("TextAnalyzed");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableVariables(void)
        {
            static std::string str("AvailableVariables");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableSystemVariables(void)
        {
            static std::string str("AvailableSystemVariables");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableOperators(void)
        {
            static std::string str("AvailableOperators");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableFunctions(void)
        {
            static std::string str("AvailableFunctions");
            return str;
        }
    public:
        static std::string const& ItemName_AvailablePredefinedConstants(void)
        {
            static std::string str("AvailablePredefinedConstants");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General_Formula");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.321");
        return str;
    }
public:
    CType_Config_Variable_General_Formula(void)
    {
        try
        {
            Construct_TextToSet();
            Construct_TextAnalyzed();
            Construct_AvailableVariables();
            Construct_AvailableSystemVariables();
            Construct_AvailableOperators();
            Construct_AvailableFunctions();
            Construct_AvailablePredefinedConstants();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General_Formula(const CType_Config_Variable_General_Formula& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General_Formula(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_TextToSet();
            Construct_TextAnalyzed();
            Construct_AvailableVariables();
            Construct_AvailableSystemVariables();
            Construct_AvailableOperators();
            Construct_AvailableFunctions();
            Construct_AvailablePredefinedConstants();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General_Formula(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_TextToSet();
            Initialize_TextAnalyzed();
            Initialize_AvailableVariables();
            Initialize_AvailableSystemVariables();
            Initialize_AvailableOperators();
            Initialize_AvailableFunctions();
            Initialize_AvailablePredefinedConstants();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item TextToSet (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_TextToSet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TextToSet()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_TextToSet()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TextToSet(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TextToSet()))
                {
                    Construct_TextToSet();
                }
                if ((*Value()).hasMember(ItemName_TextToSet()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_TextToSet()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TextToSet(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_TextToSet()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_TextToSet(void) const
        {
            return (*Value())[ItemName_TextToSet()];
        }
        bool Get_TextToSet(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TextToSet()]).valid())
                {
                    GetValue = (*Value())[ItemName_TextToSet()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TextAnalyzed (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_TextAnalyzed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TextAnalyzed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_TextAnalyzed()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TextAnalyzed(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TextAnalyzed()))
                {
                    Construct_TextAnalyzed();
                }
                if ((*Value()).hasMember(ItemName_TextAnalyzed()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_TextAnalyzed()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TextAnalyzed(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_TextAnalyzed()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_TextAnalyzed(void) const
        {
            return (*Value())[ItemName_TextAnalyzed()];
        }
        bool Get_TextAnalyzed(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TextAnalyzed()]).valid())
                {
                    GetValue = (*Value())[ItemName_TextAnalyzed()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableVariables (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableVariables()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableVariables()))
                {
                    Construct_AvailableVariables();
                }
                if ((*Value()).hasMember(ItemName_AvailableVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableVariables()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableVariables(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableVariables()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableVariables(void) const
        {
            return (*Value())[ItemName_AvailableVariables()];
        }
        bool Get_AvailableVariables(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableVariables()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableVariables()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableSystemVariables (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableSystemVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableSystemVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableSystemVariables()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableSystemVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableSystemVariables()))
                {
                    Construct_AvailableSystemVariables();
                }
                if ((*Value()).hasMember(ItemName_AvailableSystemVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableSystemVariables()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableSystemVariables(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableSystemVariables()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableSystemVariables(void) const
        {
            return (*Value())[ItemName_AvailableSystemVariables()];
        }
        bool Get_AvailableSystemVariables(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableSystemVariables()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableSystemVariables()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableOperators (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableOperators(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableOperators()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableOperators()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableOperators(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableOperators()))
                {
                    Construct_AvailableOperators();
                }
                if ((*Value()).hasMember(ItemName_AvailableOperators()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableOperators()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableOperators(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableOperators()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableOperators(void) const
        {
            return (*Value())[ItemName_AvailableOperators()];
        }
        bool Get_AvailableOperators(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableOperators()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableOperators()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableFunctions (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableFunctions(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableFunctions()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableFunctions()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableFunctions(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableFunctions()))
                {
                    Construct_AvailableFunctions();
                }
                if ((*Value()).hasMember(ItemName_AvailableFunctions()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableFunctions()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableFunctions(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableFunctions()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableFunctions(void) const
        {
            return (*Value())[ItemName_AvailableFunctions()];
        }
        bool Get_AvailableFunctions(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableFunctions()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableFunctions()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailablePredefinedConstants (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailablePredefinedConstants(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailablePredefinedConstants()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailablePredefinedConstants()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailablePredefinedConstants(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailablePredefinedConstants()))
                {
                    Construct_AvailablePredefinedConstants();
                }
                if ((*Value()).hasMember(ItemName_AvailablePredefinedConstants()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailablePredefinedConstants()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailablePredefinedConstants(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailablePredefinedConstants()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailablePredefinedConstants(void) const
        {
            return (*Value())[ItemName_AvailablePredefinedConstants()];
        }
        bool Get_AvailablePredefinedConstants(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailablePredefinedConstants()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailablePredefinedConstants()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General_Formula


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_General
//------------------------------------------------------------------------
class CType_Config_Variable_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ValueHandling(void)
        {
            static std::string str("ValueHandling");
            return str;
        }
    public:
        static std::string const& ItemName_DataFormat(void)
        {
            static std::string str("DataFormat");
            return str;
        }
    public:
        static std::string const& ItemName_DataDirection(void)
        {
            static std::string str("DataDirection");
            return str;
        }
    public:
        static std::string const& ItemName_FieldLength(void)
        {
            static std::string str("FieldLength");
            return str;
        }
    public:
        static std::string const& ItemName_Precision(void)
        {
            static std::string str("Precision");
            return str;
        }
    public:
        static std::string const& ItemName_StartTerminal(void)
        {
            static std::string str("StartTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_TerminalVariationType(void)
        {
            static std::string str("TerminalVariationType");
            return str;
        }
    public:
        static std::string const& ItemName_TerminalUsage(void)
        {
            static std::string str("TerminalUsage");
            return str;
        }
    public:
        static std::string const& ItemName_Oversampling(void)
        {
            static std::string str("Oversampling");
            return str;
        }
    public:
        static std::string const& ItemName_Average(void)
        {
            static std::string str("Average");
            return str;
        }
    public:
        static std::string const& ItemName_Adjustment(void)
        {
            static std::string str("Adjustment");
            return str;
        }
    public:
        static std::string const& ItemName_ConnectionImage(void)
        {
            static std::string str("ConnectionImage");
            return str;
        }
    public:
        static std::string const& ItemName_Formula(void)
        {
            static std::string str("Formula");
            return str;
        }
    public:
        static std::string const& ItemName_SampleValueDelayTime(void)
        {
            static std::string str("SampleValueDelayTime");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.322");
        return str;
    }
public:
    CType_Config_Variable_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_Description();
            Construct_Type();
            Construct_ValueHandling();
            Construct_DataFormat();
            Construct_DataDirection();
            Construct_FieldLength();
            Construct_Precision();
            Construct_StartTerminal();
            Construct_TerminalVariationType();
            Construct_TerminalUsage();
            Construct_Oversampling();
            Construct_Average();
            Construct_Adjustment();
            Construct_ConnectionImage();
            Construct_Formula();
            Construct_SampleValueDelayTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_General(const CType_Config_Variable_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_Description();
            Construct_Type();
            Construct_ValueHandling();
            Construct_DataFormat();
            Construct_DataDirection();
            Construct_FieldLength();
            Construct_Precision();
            Construct_StartTerminal();
            Construct_TerminalVariationType();
            Construct_TerminalUsage();
            Construct_Oversampling();
            Construct_Average();
            Construct_Adjustment();
            Construct_ConnectionImage();
            Construct_Formula();
            Construct_SampleValueDelayTime();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_Description();
            Initialize_Type();
            Initialize_ValueHandling();
            Initialize_DataFormat();
            Initialize_DataDirection();
            Initialize_FieldLength();
            Initialize_Precision();
            Initialize_StartTerminal();
            Initialize_TerminalVariationType();
            Initialize_TerminalUsage();
            Initialize_Oversampling();
            Initialize_Average();
            Initialize_Adjustment();
            Initialize_ConnectionImage();
            Initialize_Formula();
            Initialize_SampleValueDelayTime();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueHandling (Type: "CType_Config_Variable_General_ValueHandling")
    protected:
        void Construct_ValueHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueHandling()))
                {
                    CType_Config_Variable_General_ValueHandling InitValue;
                    (*Value())[ItemName_ValueHandling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueHandling()))
                {
                    Construct_ValueHandling();
                }
                if ((*Value()).hasMember(ItemName_ValueHandling()))
                {
                    CType_Config_Variable_General_ValueHandling InitValue;
                    (*Value())[ItemName_ValueHandling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueHandling(const CType_Config_Variable_General_ValueHandling& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueHandling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_ValueHandling Get_ValueHandling(void) const
        {
            return (*Value())[ItemName_ValueHandling()];
        }
        bool Get_ValueHandling(CType_Config_Variable_General_ValueHandling& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueHandling()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueHandling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_DataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_DataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataFormat()))
                {
                    Construct_DataFormat();
                }
                if ((*Value()).hasMember(ItemName_DataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_DataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_DataFormat(void) const
        {
            return (*Value())[ItemName_DataFormat()];
        }
        bool Get_DataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataDirection (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DataDirection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataDirection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataDirection()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataDirection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataDirection()))
                {
                    Construct_DataDirection();
                }
                if ((*Value()).hasMember(ItemName_DataDirection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataDirection()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataDirection(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataDirection()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DataDirection(void) const
        {
            return (*Value())[ItemName_DataDirection()];
        }
        bool Get_DataDirection(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataDirection()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataDirection()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FieldLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_FieldLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FieldLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FieldLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FieldLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FieldLength()))
                {
                    Construct_FieldLength();
                }
                if ((*Value()).hasMember(ItemName_FieldLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FieldLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FieldLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_FieldLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_FieldLength(void) const
        {
            return (*Value())[ItemName_FieldLength()];
        }
        bool Get_FieldLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FieldLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_FieldLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Precision (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Precision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Precision()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Precision()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Precision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Precision()))
                {
                    Construct_Precision();
                }
                if ((*Value()).hasMember(ItemName_Precision()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Precision()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Precision(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Precision()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_Precision(void) const
        {
            return (*Value())[ItemName_Precision()];
        }
        bool Get_Precision(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Precision()]).valid())
                {
                    GetValue = (*Value())[ItemName_Precision()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StartTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StartTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartTerminal()))
                {
                    Construct_StartTerminal();
                }
                if ((*Value()).hasMember(ItemName_StartTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StartTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StartTerminal(void) const
        {
            return (*Value())[ItemName_StartTerminal()];
        }
        bool Get_StartTerminal(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TerminalVariationType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TerminalVariationType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TerminalVariationType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TerminalVariationType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TerminalVariationType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TerminalVariationType()))
                {
                    Construct_TerminalVariationType();
                }
                if ((*Value()).hasMember(ItemName_TerminalVariationType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TerminalVariationType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TerminalVariationType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TerminalVariationType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TerminalVariationType(void) const
        {
            return (*Value())[ItemName_TerminalVariationType()];
        }
        bool Get_TerminalVariationType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TerminalVariationType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TerminalVariationType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TerminalUsage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_TerminalUsage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TerminalUsage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_TerminalUsage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TerminalUsage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TerminalUsage()))
                {
                    Construct_TerminalUsage();
                }
                if ((*Value()).hasMember(ItemName_TerminalUsage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_TerminalUsage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TerminalUsage(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_TerminalUsage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_TerminalUsage(void) const
        {
            return (*Value())[ItemName_TerminalUsage()];
        }
        bool Get_TerminalUsage(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TerminalUsage()]).valid())
                {
                    GetValue = (*Value())[ItemName_TerminalUsage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Oversampling (Type: "CType_Config_Variable_General_Oversampling")
    protected:
        void Construct_Oversampling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Oversampling()))
                {
                    CType_Config_Variable_General_Oversampling InitValue;
                    (*Value())[ItemName_Oversampling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Oversampling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Oversampling()))
                {
                    Construct_Oversampling();
                }
                if ((*Value()).hasMember(ItemName_Oversampling()))
                {
                    CType_Config_Variable_General_Oversampling InitValue;
                    (*Value())[ItemName_Oversampling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Oversampling(const CType_Config_Variable_General_Oversampling& SetValue)
        {
            try
            {
                (*Value())[ItemName_Oversampling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_Oversampling Get_Oversampling(void) const
        {
            return (*Value())[ItemName_Oversampling()];
        }
        bool Get_Oversampling(CType_Config_Variable_General_Oversampling& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Oversampling()]).valid())
                {
                    GetValue = (*Value())[ItemName_Oversampling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Average (Type: "CType_Config_Variable_General_Average")
    protected:
        void Construct_Average(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Average()))
                {
                    CType_Config_Variable_General_Average InitValue;
                    (*Value())[ItemName_Average()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Average(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Average()))
                {
                    Construct_Average();
                }
                if ((*Value()).hasMember(ItemName_Average()))
                {
                    CType_Config_Variable_General_Average InitValue;
                    (*Value())[ItemName_Average()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Average(const CType_Config_Variable_General_Average& SetValue)
        {
            try
            {
                (*Value())[ItemName_Average()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_Average Get_Average(void) const
        {
            return (*Value())[ItemName_Average()];
        }
        bool Get_Average(CType_Config_Variable_General_Average& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Average()]).valid())
                {
                    GetValue = (*Value())[ItemName_Average()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Adjustment (Type: "CType_Config_Variable_General_Adjustment")
    protected:
        void Construct_Adjustment(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adjustment()))
                {
                    CType_Config_Variable_General_Adjustment InitValue;
                    (*Value())[ItemName_Adjustment()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Adjustment(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adjustment()))
                {
                    Construct_Adjustment();
                }
                if ((*Value()).hasMember(ItemName_Adjustment()))
                {
                    CType_Config_Variable_General_Adjustment InitValue;
                    (*Value())[ItemName_Adjustment()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Adjustment(const CType_Config_Variable_General_Adjustment& SetValue)
        {
            try
            {
                (*Value())[ItemName_Adjustment()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_Adjustment Get_Adjustment(void) const
        {
            return (*Value())[ItemName_Adjustment()];
        }
        bool Get_Adjustment(CType_Config_Variable_General_Adjustment& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Adjustment()]).valid())
                {
                    GetValue = (*Value())[ItemName_Adjustment()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConnectionImage (Type: "GInsXmlRpcStdAPI::CGIns_Base_Image")
    protected:
        void Construct_ConnectionImage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionImage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_ConnectionImage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConnectionImage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConnectionImage()))
                {
                    Construct_ConnectionImage();
                }
                if ((*Value()).hasMember(ItemName_ConnectionImage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_ConnectionImage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConnectionImage(const GInsXmlRpcStdAPI::CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConnectionImage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_Image Get_ConnectionImage(void) const
        {
            return (*Value())[ItemName_ConnectionImage()];
        }
        bool Get_ConnectionImage(GInsXmlRpcStdAPI::CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConnectionImage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConnectionImage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Formula (Type: "CType_Config_Variable_General_Formula")
    protected:
        void Construct_Formula(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Formula()))
                {
                    CType_Config_Variable_General_Formula InitValue;
                    (*Value())[ItemName_Formula()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Formula(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Formula()))
                {
                    Construct_Formula();
                }
                if ((*Value()).hasMember(ItemName_Formula()))
                {
                    CType_Config_Variable_General_Formula InitValue;
                    (*Value())[ItemName_Formula()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Formula(const CType_Config_Variable_General_Formula& SetValue)
        {
            try
            {
                (*Value())[ItemName_Formula()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General_Formula Get_Formula(void) const
        {
            return (*Value())[ItemName_Formula()];
        }
        bool Get_Formula(CType_Config_Variable_General_Formula& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Formula()]).valid())
                {
                    GetValue = (*Value())[ItemName_Formula()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SampleValueDelayTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SampleValueDelayTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleValueDelayTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SampleValueDelayTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SampleValueDelayTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleValueDelayTime()))
                {
                    Construct_SampleValueDelayTime();
                }
                if ((*Value()).hasMember(ItemName_SampleValueDelayTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SampleValueDelayTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SampleValueDelayTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SampleValueDelayTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SampleValueDelayTime(void) const
        {
            return (*Value())[ItemName_SampleValueDelayTime()];
        }
        bool Get_SampleValueDelayTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SampleValueDelayTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_SampleValueDelayTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_AnalogInput
//------------------------------------------------------------------------
class CType_Config_Variable_AnalogInput : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_ReferenceTemperature(void)
        {
            static std::string str("ReferenceTemperature");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_AnalogInput");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.323");
        return str;
    }
public:
    CType_Config_Variable_AnalogInput(void)
    {
        try
        {
            Construct_Type();
            Construct_ReferenceTemperature();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_AnalogInput(const CType_Config_Variable_AnalogInput& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_AnalogInput(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_ReferenceTemperature();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_AnalogInput(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_ReferenceTemperature();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReferenceTemperature (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ReferenceTemperature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReferenceTemperature()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ReferenceTemperature()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReferenceTemperature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReferenceTemperature()))
                {
                    Construct_ReferenceTemperature();
                }
                if ((*Value()).hasMember(ItemName_ReferenceTemperature()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ReferenceTemperature()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReferenceTemperature(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReferenceTemperature()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ReferenceTemperature(void) const
        {
            return (*Value())[ItemName_ReferenceTemperature()];
        }
        bool Get_ReferenceTemperature(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReferenceTemperature()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReferenceTemperature()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_AnalogInput


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_AnalogOutput
//------------------------------------------------------------------------
class CType_Config_Variable_AnalogOutput : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_AnalogOutput");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.324");
        return str;
    }
public:
    CType_Config_Variable_AnalogOutput(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_AnalogOutput(const CType_Config_Variable_AnalogOutput& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_AnalogOutput(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_AnalogOutput(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_AnalogOutput


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_DigitalInput
//------------------------------------------------------------------------
class CType_Config_Variable_DigitalInput : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_SwitchingLevelThresholdValueUpper(void)
        {
            static std::string str("SwitchingLevelThresholdValueUpper");
            return str;
        }
    public:
        static std::string const& ItemName_SwitchingLevelThresholdValueLower(void)
        {
            static std::string str("SwitchingLevelThresholdValueLower");
            return str;
        }
    public:
        static std::string const& ItemName_EnablePrescaler(void)
        {
            static std::string str("EnablePrescaler");
            return str;
        }
    public:
        static std::string const& ItemName_PrescalerCount(void)
        {
            static std::string str("PrescalerCount");
            return str;
        }
    public:
        static std::string const& ItemName_EnableReferenceGapCompensation(void)
        {
            static std::string str("EnableReferenceGapCompensation");
            return str;
        }
    public:
        static std::string const& ItemName_ReferenceGapCompensationTeethCount(void)
        {
            static std::string str("ReferenceGapCompensationTeethCount");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_DigitalInput");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.325");
        return str;
    }
public:
    CType_Config_Variable_DigitalInput(void)
    {
        try
        {
            Construct_Type();
            Construct_SwitchingLevelThresholdValueUpper();
            Construct_SwitchingLevelThresholdValueLower();
            Construct_EnablePrescaler();
            Construct_PrescalerCount();
            Construct_EnableReferenceGapCompensation();
            Construct_ReferenceGapCompensationTeethCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_DigitalInput(const CType_Config_Variable_DigitalInput& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_DigitalInput(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_SwitchingLevelThresholdValueUpper();
            Construct_SwitchingLevelThresholdValueLower();
            Construct_EnablePrescaler();
            Construct_PrescalerCount();
            Construct_EnableReferenceGapCompensation();
            Construct_ReferenceGapCompensationTeethCount();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_DigitalInput(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_SwitchingLevelThresholdValueUpper();
            Initialize_SwitchingLevelThresholdValueLower();
            Initialize_EnablePrescaler();
            Initialize_PrescalerCount();
            Initialize_EnableReferenceGapCompensation();
            Initialize_ReferenceGapCompensationTeethCount();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SwitchingLevelThresholdValueUpper (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SwitchingLevelThresholdValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SwitchingLevelThresholdValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SwitchingLevelThresholdValueUpper()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SwitchingLevelThresholdValueUpper(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SwitchingLevelThresholdValueUpper()))
                {
                    Construct_SwitchingLevelThresholdValueUpper();
                }
                if ((*Value()).hasMember(ItemName_SwitchingLevelThresholdValueUpper()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SwitchingLevelThresholdValueUpper()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SwitchingLevelThresholdValueUpper(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SwitchingLevelThresholdValueUpper()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SwitchingLevelThresholdValueUpper(void) const
        {
            return (*Value())[ItemName_SwitchingLevelThresholdValueUpper()];
        }
        bool Get_SwitchingLevelThresholdValueUpper(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SwitchingLevelThresholdValueUpper()]).valid())
                {
                    GetValue = (*Value())[ItemName_SwitchingLevelThresholdValueUpper()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SwitchingLevelThresholdValueLower (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SwitchingLevelThresholdValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SwitchingLevelThresholdValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SwitchingLevelThresholdValueLower()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SwitchingLevelThresholdValueLower(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SwitchingLevelThresholdValueLower()))
                {
                    Construct_SwitchingLevelThresholdValueLower();
                }
                if ((*Value()).hasMember(ItemName_SwitchingLevelThresholdValueLower()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SwitchingLevelThresholdValueLower()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SwitchingLevelThresholdValueLower(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SwitchingLevelThresholdValueLower()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SwitchingLevelThresholdValueLower(void) const
        {
            return (*Value())[ItemName_SwitchingLevelThresholdValueLower()];
        }
        bool Get_SwitchingLevelThresholdValueLower(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SwitchingLevelThresholdValueLower()]).valid())
                {
                    GetValue = (*Value())[ItemName_SwitchingLevelThresholdValueLower()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnablePrescaler (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnablePrescaler(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnablePrescaler()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnablePrescaler()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnablePrescaler(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnablePrescaler()))
                {
                    Construct_EnablePrescaler();
                }
                if ((*Value()).hasMember(ItemName_EnablePrescaler()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnablePrescaler()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnablePrescaler(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnablePrescaler()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnablePrescaler(void) const
        {
            return (*Value())[ItemName_EnablePrescaler()];
        }
        bool Get_EnablePrescaler(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnablePrescaler()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnablePrescaler()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PrescalerCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_PrescalerCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PrescalerCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_PrescalerCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PrescalerCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PrescalerCount()))
                {
                    Construct_PrescalerCount();
                }
                if ((*Value()).hasMember(ItemName_PrescalerCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_PrescalerCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PrescalerCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_PrescalerCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_PrescalerCount(void) const
        {
            return (*Value())[ItemName_PrescalerCount()];
        }
        bool Get_PrescalerCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PrescalerCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_PrescalerCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableReferenceGapCompensation (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableReferenceGapCompensation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableReferenceGapCompensation()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableReferenceGapCompensation()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableReferenceGapCompensation(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableReferenceGapCompensation()))
                {
                    Construct_EnableReferenceGapCompensation();
                }
                if ((*Value()).hasMember(ItemName_EnableReferenceGapCompensation()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableReferenceGapCompensation()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableReferenceGapCompensation(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableReferenceGapCompensation()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableReferenceGapCompensation(void) const
        {
            return (*Value())[ItemName_EnableReferenceGapCompensation()];
        }
        bool Get_EnableReferenceGapCompensation(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableReferenceGapCompensation()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableReferenceGapCompensation()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReferenceGapCompensationTeethCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ReferenceGapCompensationTeethCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReferenceGapCompensationTeethCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ReferenceGapCompensationTeethCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReferenceGapCompensationTeethCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReferenceGapCompensationTeethCount()))
                {
                    Construct_ReferenceGapCompensationTeethCount();
                }
                if ((*Value()).hasMember(ItemName_ReferenceGapCompensationTeethCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ReferenceGapCompensationTeethCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReferenceGapCompensationTeethCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReferenceGapCompensationTeethCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ReferenceGapCompensationTeethCount(void) const
        {
            return (*Value())[ItemName_ReferenceGapCompensationTeethCount()];
        }
        bool Get_ReferenceGapCompensationTeethCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReferenceGapCompensationTeethCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReferenceGapCompensationTeethCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_DigitalInput


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_DigitalOutput
//------------------------------------------------------------------------
class CType_Config_Variable_DigitalOutput : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_DigitalOutput");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.326");
        return str;
    }
public:
    CType_Config_Variable_DigitalOutput(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_DigitalOutput(const CType_Config_Variable_DigitalOutput& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_DigitalOutput(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_DigitalOutput(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_DigitalOutput


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote_SSI
//------------------------------------------------------------------------
class CType_Config_Variable_Remote_SSI : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DecodingType(void)
        {
            static std::string str("DecodingType");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalBusClock(void)
        {
            static std::string str("ExternalBusClock");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataFormat(void)
        {
            static std::string str("ExternalDataFormat");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataBitStart(void)
        {
            static std::string str("ExternalDataBitStart");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataBitLength(void)
        {
            static std::string str("ExternalDataBitLength");
            return str;
        }
    public:
        static std::string const& ItemName_FullExternalDataBitLength(void)
        {
            static std::string str("FullExternalDataBitLength");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote_SSI");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.327");
        return str;
    }
public:
    CType_Config_Variable_Remote_SSI(void)
    {
        try
        {
            Construct_DecodingType();
            Construct_ExternalBusClock();
            Construct_ExternalDataFormat();
            Construct_ExternalDataBitStart();
            Construct_ExternalDataBitLength();
            Construct_FullExternalDataBitLength();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote_SSI(const CType_Config_Variable_Remote_SSI& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote_SSI(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DecodingType();
            Construct_ExternalBusClock();
            Construct_ExternalDataFormat();
            Construct_ExternalDataBitStart();
            Construct_ExternalDataBitLength();
            Construct_FullExternalDataBitLength();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote_SSI(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DecodingType();
            Initialize_ExternalBusClock();
            Initialize_ExternalDataFormat();
            Initialize_ExternalDataBitStart();
            Initialize_ExternalDataBitLength();
            Initialize_FullExternalDataBitLength();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DecodingType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DecodingType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecodingType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DecodingType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DecodingType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecodingType()))
                {
                    Construct_DecodingType();
                }
                if ((*Value()).hasMember(ItemName_DecodingType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DecodingType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DecodingType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DecodingType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DecodingType(void) const
        {
            return (*Value())[ItemName_DecodingType()];
        }
        bool Get_DecodingType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DecodingType()]).valid())
                {
                    GetValue = (*Value())[ItemName_DecodingType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalBusClock (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ExternalBusClock(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalBusClock()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalBusClock()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalBusClock(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalBusClock()))
                {
                    Construct_ExternalBusClock();
                }
                if ((*Value()).hasMember(ItemName_ExternalBusClock()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalBusClock()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalBusClock(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalBusClock()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ExternalBusClock(void) const
        {
            return (*Value())[ItemName_ExternalBusClock()];
        }
        bool Get_ExternalBusClock(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalBusClock()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalBusClock()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    Construct_ExternalDataFormat();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_ExternalDataFormat(void) const
        {
            return (*Value())[ItemName_ExternalDataFormat()];
        }
        bool Get_ExternalDataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataBitStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    Construct_ExternalDataBitStart();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataBitStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataBitStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalDataBitStart(void) const
        {
            return (*Value())[ItemName_ExternalDataBitStart()];
        }
        bool Get_ExternalDataBitStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataBitStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataBitStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    Construct_ExternalDataBitLength();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalDataBitLength(void) const
        {
            return (*Value())[ItemName_ExternalDataBitLength()];
        }
        bool Get_ExternalDataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FullExternalDataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_FullExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FullExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FullExternalDataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FullExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FullExternalDataBitLength()))
                {
                    Construct_FullExternalDataBitLength();
                }
                if ((*Value()).hasMember(ItemName_FullExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_FullExternalDataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FullExternalDataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_FullExternalDataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_FullExternalDataBitLength(void) const
        {
            return (*Value())[ItemName_FullExternalDataBitLength()];
        }
        bool Get_FullExternalDataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FullExternalDataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_FullExternalDataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote_SSI


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote_Modbus
//------------------------------------------------------------------------
class CType_Config_Variable_Remote_Modbus : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_ActionControlType(void)
        {
            static std::string str("ActionControlType");
            return str;
        }
    public:
        static std::string const& ItemName_CycleTime(void)
        {
            static std::string str("CycleTime");
            return str;
        }
    public:
        static std::string const& ItemName_RequestCombineMode(void)
        {
            static std::string str("RequestCombineMode");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalAddress(void)
        {
            static std::string str("ExternalAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalRegisterNumber(void)
        {
            static std::string str("ExternalRegisterNumber");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataFormat(void)
        {
            static std::string str("ExternalDataFormat");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote_Modbus");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.328");
        return str;
    }
public:
    CType_Config_Variable_Remote_Modbus(void)
    {
        try
        {
            Construct_Port();
            Construct_Command();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_RequestCombineMode();
            Construct_ExternalAddress();
            Construct_ExternalRegisterNumber();
            Construct_ExternalDataFormat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote_Modbus(const CType_Config_Variable_Remote_Modbus& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote_Modbus(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Command();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_RequestCombineMode();
            Construct_ExternalAddress();
            Construct_ExternalRegisterNumber();
            Construct_ExternalDataFormat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote_Modbus(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Command();
            Initialize_ActionControlType();
            Initialize_CycleTime();
            Initialize_RequestCombineMode();
            Initialize_ExternalAddress();
            Initialize_ExternalRegisterNumber();
            Initialize_ExternalDataFormat();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ActionControlType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    Construct_ActionControlType();
                }
                if ((*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActionControlType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActionControlType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ActionControlType(void) const
        {
            return (*Value())[ItemName_ActionControlType()];
        }
        bool Get_ActionControlType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActionControlType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActionControlType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    Construct_CycleTime();
                }
                if ((*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_CycleTime(void) const
        {
            return (*Value())[ItemName_CycleTime()];
        }
        bool Get_CycleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RequestCombineMode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_RequestCombineMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RequestCombineMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_RequestCombineMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RequestCombineMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RequestCombineMode()))
                {
                    Construct_RequestCombineMode();
                }
                if ((*Value()).hasMember(ItemName_RequestCombineMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_RequestCombineMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RequestCombineMode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_RequestCombineMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_RequestCombineMode(void) const
        {
            return (*Value())[ItemName_RequestCombineMode()];
        }
        bool Get_RequestCombineMode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RequestCombineMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_RequestCombineMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    Construct_ExternalAddress();
                }
                if ((*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalAddress(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ExternalAddress(void) const
        {
            return (*Value())[ItemName_ExternalAddress()];
        }
        bool Get_ExternalAddress(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalRegisterNumber (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalRegisterNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalRegisterNumber()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalRegisterNumber()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalRegisterNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalRegisterNumber()))
                {
                    Construct_ExternalRegisterNumber();
                }
                if ((*Value()).hasMember(ItemName_ExternalRegisterNumber()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalRegisterNumber()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalRegisterNumber(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalRegisterNumber()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalRegisterNumber(void) const
        {
            return (*Value())[ItemName_ExternalRegisterNumber()];
        }
        bool Get_ExternalRegisterNumber(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalRegisterNumber()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalRegisterNumber()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    Construct_ExternalDataFormat();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_ExternalDataFormat(void) const
        {
            return (*Value())[ItemName_ExternalDataFormat()];
        }
        bool Get_ExternalDataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote_Modbus


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote_CAN
//------------------------------------------------------------------------
class CType_Config_Variable_Remote_CAN : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_EnableRemoteTransmissionRequest(void)
        {
            static std::string str("EnableRemoteTransmissionRequest");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_ConditionVariable(void)
        {
            static std::string str("ConditionVariable");
            return str;
        }
    public:
        static std::string const& ItemName_ActionControlType(void)
        {
            static std::string str("ActionControlType");
            return str;
        }
    public:
        static std::string const& ItemName_CycleTime(void)
        {
            static std::string str("CycleTime");
            return str;
        }
    public:
        static std::string const& ItemName_EnableExtendedExternalID(void)
        {
            static std::string str("EnableExtendedExternalID");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalID(void)
        {
            static std::string str("ExternalID");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataByteOrder(void)
        {
            static std::string str("ExternalDataByteOrder");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataFormat(void)
        {
            static std::string str("ExternalDataFormat");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataBitStart(void)
        {
            static std::string str("ExternalDataBitStart");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalDataBitLength(void)
        {
            static std::string str("ExternalDataBitLength");
            return str;
        }
    public:
        static std::string const& ItemName_EnableMultiplexedExternalParameters(void)
        {
            static std::string str("EnableMultiplexedExternalParameters");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedExternalDataBitStart(void)
        {
            static std::string str("MultiplexedExternalDataBitStart");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedExternalDataBitLength(void)
        {
            static std::string str("MultiplexedExternalDataBitLength");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedExternalDataByteOrder(void)
        {
            static std::string str("MultiplexedExternalDataByteOrder");
            return str;
        }
    public:
        static std::string const& ItemName_MultiplexedExternalValue(void)
        {
            static std::string str("MultiplexedExternalValue");
            return str;
        }
    public:
        static std::string const& ItemName_EnableFD(void)
        {
            static std::string str("EnableFD");
            return str;
        }
    public:
        static std::string const& ItemName_EnableFDBitrateSwitch(void)
        {
            static std::string str("EnableFDBitrateSwitch");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote_CAN");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.329");
        return str;
    }
public:
    CType_Config_Variable_Remote_CAN(void)
    {
        try
        {
            Construct_Port();
            Construct_EnableRemoteTransmissionRequest();
            Construct_Variable();
            Construct_ConditionVariable();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_EnableExtendedExternalID();
            Construct_ExternalID();
            Construct_ExternalDataByteOrder();
            Construct_ExternalDataFormat();
            Construct_ExternalDataBitStart();
            Construct_ExternalDataBitLength();
            Construct_EnableMultiplexedExternalParameters();
            Construct_MultiplexedExternalDataBitStart();
            Construct_MultiplexedExternalDataBitLength();
            Construct_MultiplexedExternalDataByteOrder();
            Construct_MultiplexedExternalValue();
            Construct_EnableFD();
            Construct_EnableFDBitrateSwitch();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote_CAN(const CType_Config_Variable_Remote_CAN& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote_CAN(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_EnableRemoteTransmissionRequest();
            Construct_Variable();
            Construct_ConditionVariable();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_EnableExtendedExternalID();
            Construct_ExternalID();
            Construct_ExternalDataByteOrder();
            Construct_ExternalDataFormat();
            Construct_ExternalDataBitStart();
            Construct_ExternalDataBitLength();
            Construct_EnableMultiplexedExternalParameters();
            Construct_MultiplexedExternalDataBitStart();
            Construct_MultiplexedExternalDataBitLength();
            Construct_MultiplexedExternalDataByteOrder();
            Construct_MultiplexedExternalValue();
            Construct_EnableFD();
            Construct_EnableFDBitrateSwitch();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote_CAN(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_EnableRemoteTransmissionRequest();
            Initialize_Variable();
            Initialize_ConditionVariable();
            Initialize_ActionControlType();
            Initialize_CycleTime();
            Initialize_EnableExtendedExternalID();
            Initialize_ExternalID();
            Initialize_ExternalDataByteOrder();
            Initialize_ExternalDataFormat();
            Initialize_ExternalDataBitStart();
            Initialize_ExternalDataBitLength();
            Initialize_EnableMultiplexedExternalParameters();
            Initialize_MultiplexedExternalDataBitStart();
            Initialize_MultiplexedExternalDataBitLength();
            Initialize_MultiplexedExternalDataByteOrder();
            Initialize_MultiplexedExternalValue();
            Initialize_EnableFD();
            Initialize_EnableFDBitrateSwitch();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableRemoteTransmissionRequest (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableRemoteTransmissionRequest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRemoteTransmissionRequest()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableRemoteTransmissionRequest(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    Construct_EnableRemoteTransmissionRequest();
                }
                if ((*Value()).hasMember(ItemName_EnableRemoteTransmissionRequest()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableRemoteTransmissionRequest()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableRemoteTransmissionRequest(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableRemoteTransmissionRequest()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableRemoteTransmissionRequest(void) const
        {
            return (*Value())[ItemName_EnableRemoteTransmissionRequest()];
        }
        bool Get_EnableRemoteTransmissionRequest(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableRemoteTransmissionRequest()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableRemoteTransmissionRequest()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConditionVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ConditionVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ConditionVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConditionVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionVariable()))
                {
                    Construct_ConditionVariable();
                }
                if ((*Value()).hasMember(ItemName_ConditionVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ConditionVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConditionVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConditionVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ConditionVariable(void) const
        {
            return (*Value())[ItemName_ConditionVariable()];
        }
        bool Get_ConditionVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConditionVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConditionVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ActionControlType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    Construct_ActionControlType();
                }
                if ((*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActionControlType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActionControlType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ActionControlType(void) const
        {
            return (*Value())[ItemName_ActionControlType()];
        }
        bool Get_ActionControlType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActionControlType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActionControlType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    Construct_CycleTime();
                }
                if ((*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_CycleTime(void) const
        {
            return (*Value())[ItemName_CycleTime()];
        }
        bool Get_CycleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableExtendedExternalID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableExtendedExternalID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableExtendedExternalID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableExtendedExternalID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableExtendedExternalID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableExtendedExternalID()))
                {
                    Construct_EnableExtendedExternalID();
                }
                if ((*Value()).hasMember(ItemName_EnableExtendedExternalID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableExtendedExternalID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableExtendedExternalID(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableExtendedExternalID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableExtendedExternalID(void) const
        {
            return (*Value())[ItemName_EnableExtendedExternalID()];
        }
        bool Get_EnableExtendedExternalID(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableExtendedExternalID()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableExtendedExternalID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalID()))
                {
                    Construct_ExternalID();
                }
                if ((*Value()).hasMember(ItemName_ExternalID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalID(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalID(void) const
        {
            return (*Value())[ItemName_ExternalID()];
        }
        bool Get_ExternalID(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataByteOrder (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ExternalDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalDataByteOrder()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataByteOrder()))
                {
                    Construct_ExternalDataByteOrder();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalDataByteOrder()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataByteOrder(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataByteOrder()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ExternalDataByteOrder(void) const
        {
            return (*Value())[ItemName_ExternalDataByteOrder()];
        }
        bool Get_ExternalDataByteOrder(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataByteOrder()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataByteOrder()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataFormat (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    Construct_ExternalDataFormat();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataFormat()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_ExternalDataFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataFormat(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_ExternalDataFormat(void) const
        {
            return (*Value())[ItemName_ExternalDataFormat()];
        }
        bool Get_ExternalDataFormat(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataBitStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    Construct_ExternalDataBitStart();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataBitStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataBitStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalDataBitStart(void) const
        {
            return (*Value())[ItemName_ExternalDataBitStart()];
        }
        bool Get_ExternalDataBitStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataBitStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataBitStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalDataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    Construct_ExternalDataBitLength();
                }
                if ((*Value()).hasMember(ItemName_ExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalDataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalDataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalDataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalDataBitLength(void) const
        {
            return (*Value())[ItemName_ExternalDataBitLength()];
        }
        bool Get_ExternalDataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalDataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalDataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableMultiplexedExternalParameters (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableMultiplexedExternalParameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableMultiplexedExternalParameters()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableMultiplexedExternalParameters()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableMultiplexedExternalParameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableMultiplexedExternalParameters()))
                {
                    Construct_EnableMultiplexedExternalParameters();
                }
                if ((*Value()).hasMember(ItemName_EnableMultiplexedExternalParameters()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableMultiplexedExternalParameters()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableMultiplexedExternalParameters(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableMultiplexedExternalParameters()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableMultiplexedExternalParameters(void) const
        {
            return (*Value())[ItemName_EnableMultiplexedExternalParameters()];
        }
        bool Get_EnableMultiplexedExternalParameters(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableMultiplexedExternalParameters()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableMultiplexedExternalParameters()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedExternalDataBitStart (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataBitStart()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedExternalDataBitStart(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataBitStart()))
                {
                    Construct_MultiplexedExternalDataBitStart();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedExternalDataBitStart()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataBitStart()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedExternalDataBitStart(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedExternalDataBitStart()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedExternalDataBitStart(void) const
        {
            return (*Value())[ItemName_MultiplexedExternalDataBitStart()];
        }
        bool Get_MultiplexedExternalDataBitStart(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedExternalDataBitStart()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedExternalDataBitStart()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedExternalDataBitLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataBitLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedExternalDataBitLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataBitLength()))
                {
                    Construct_MultiplexedExternalDataBitLength();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedExternalDataBitLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataBitLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedExternalDataBitLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedExternalDataBitLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedExternalDataBitLength(void) const
        {
            return (*Value())[ItemName_MultiplexedExternalDataBitLength()];
        }
        bool Get_MultiplexedExternalDataBitLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedExternalDataBitLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedExternalDataBitLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedExternalDataByteOrder (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_MultiplexedExternalDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataByteOrder()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedExternalDataByteOrder(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalDataByteOrder()))
                {
                    Construct_MultiplexedExternalDataByteOrder();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedExternalDataByteOrder()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_MultiplexedExternalDataByteOrder()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedExternalDataByteOrder(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedExternalDataByteOrder()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_MultiplexedExternalDataByteOrder(void) const
        {
            return (*Value())[ItemName_MultiplexedExternalDataByteOrder()];
        }
        bool Get_MultiplexedExternalDataByteOrder(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedExternalDataByteOrder()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedExternalDataByteOrder()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MultiplexedExternalValue (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MultiplexedExternalValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalValue()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MultiplexedExternalValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MultiplexedExternalValue()))
                {
                    Construct_MultiplexedExternalValue();
                }
                if ((*Value()).hasMember(ItemName_MultiplexedExternalValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MultiplexedExternalValue()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MultiplexedExternalValue(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MultiplexedExternalValue()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MultiplexedExternalValue(void) const
        {
            return (*Value())[ItemName_MultiplexedExternalValue()];
        }
        bool Get_MultiplexedExternalValue(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MultiplexedExternalValue()]).valid())
                {
                    GetValue = (*Value())[ItemName_MultiplexedExternalValue()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableFD (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableFD(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFD()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFD()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableFD(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFD()))
                {
                    Construct_EnableFD();
                }
                if ((*Value()).hasMember(ItemName_EnableFD()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFD()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableFD(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableFD()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableFD(void) const
        {
            return (*Value())[ItemName_EnableFD()];
        }
        bool Get_EnableFD(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableFD()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableFD()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableFDBitrateSwitch (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableFDBitrateSwitch(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFDBitrateSwitch()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableFDBitrateSwitch(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    Construct_EnableFDBitrateSwitch();
                }
                if ((*Value()).hasMember(ItemName_EnableFDBitrateSwitch()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableFDBitrateSwitch()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableFDBitrateSwitch(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableFDBitrateSwitch()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableFDBitrateSwitch(void) const
        {
            return (*Value())[ItemName_EnableFDBitrateSwitch()];
        }
        bool Get_EnableFDBitrateSwitch(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableFDBitrateSwitch()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableFDBitrateSwitch()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote_CAN


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote_SDI12
//------------------------------------------------------------------------
class CType_Config_Variable_Remote_SDI12 : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Command(void)
        {
            static std::string str("Command");
            return str;
        }
    public:
        static std::string const& ItemName_ActionControlType(void)
        {
            static std::string str("ActionControlType");
            return str;
        }
    public:
        static std::string const& ItemName_CycleTime(void)
        {
            static std::string str("CycleTime");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalAddress(void)
        {
            static std::string str("ExternalAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ExternalChannelNumber(void)
        {
            static std::string str("ExternalChannelNumber");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote_SDI12");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.330");
        return str;
    }
public:
    CType_Config_Variable_Remote_SDI12(void)
    {
        try
        {
            Construct_Port();
            Construct_Command();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_ExternalAddress();
            Construct_ExternalChannelNumber();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote_SDI12(const CType_Config_Variable_Remote_SDI12& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote_SDI12(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Command();
            Construct_ActionControlType();
            Construct_CycleTime();
            Construct_ExternalAddress();
            Construct_ExternalChannelNumber();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote_SDI12(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Command();
            Initialize_ActionControlType();
            Initialize_CycleTime();
            Initialize_ExternalAddress();
            Initialize_ExternalChannelNumber();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ActionControlType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ActionControlType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ActionControlType()))
                {
                    Construct_ActionControlType();
                }
                if ((*Value()).hasMember(ItemName_ActionControlType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ActionControlType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ActionControlType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ActionControlType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ActionControlType(void) const
        {
            return (*Value())[ItemName_ActionControlType()];
        }
        bool Get_ActionControlType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ActionControlType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ActionControlType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleTime()))
                {
                    Construct_CycleTime();
                }
                if ((*Value()).hasMember(ItemName_CycleTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_CycleTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_CycleTime(void) const
        {
            return (*Value())[ItemName_CycleTime()];
        }
        bool Get_CycleTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    Construct_ExternalAddress();
                }
                if ((*Value()).hasMember(ItemName_ExternalAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ExternalAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalAddress(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ExternalAddress(void) const
        {
            return (*Value())[ItemName_ExternalAddress()];
        }
        bool Get_ExternalAddress(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ExternalChannelNumber (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ExternalChannelNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalChannelNumber()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalChannelNumber()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ExternalChannelNumber(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ExternalChannelNumber()))
                {
                    Construct_ExternalChannelNumber();
                }
                if ((*Value()).hasMember(ItemName_ExternalChannelNumber()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ExternalChannelNumber()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ExternalChannelNumber(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ExternalChannelNumber()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ExternalChannelNumber(void) const
        {
            return (*Value())[ItemName_ExternalChannelNumber()];
        }
        bool Get_ExternalChannelNumber(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ExternalChannelNumber()]).valid())
                {
                    GetValue = (*Value())[ItemName_ExternalChannelNumber()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote_SDI12


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote_StreamProcessor
//------------------------------------------------------------------------
class CType_Config_Variable_Remote_StreamProcessor : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_ValueType(void)
        {
            static std::string str("ValueType");
            return str;
        }
    public:
        static std::string const& ItemName_ValueStateType(void)
        {
            static std::string str("ValueStateType");
            return str;
        }
    public:
        static std::string const& ItemName_ValueVariable(void)
        {
            static std::string str("ValueVariable");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote_StreamProcessor");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.331");
        return str;
    }
public:
    CType_Config_Variable_Remote_StreamProcessor(void)
    {
        try
        {
            Construct_StreamProcessor();
            Construct_ValueType();
            Construct_ValueStateType();
            Construct_ValueVariable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote_StreamProcessor(const CType_Config_Variable_Remote_StreamProcessor& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote_StreamProcessor(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StreamProcessor();
            Construct_ValueType();
            Construct_ValueStateType();
            Construct_ValueVariable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote_StreamProcessor(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StreamProcessor();
            Initialize_ValueType();
            Initialize_ValueStateType();
            Initialize_ValueVariable();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueType()))
                {
                    Construct_ValueType();
                }
                if ((*Value()).hasMember(ItemName_ValueType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ValueType(void) const
        {
            return (*Value())[ItemName_ValueType()];
        }
        bool Get_ValueType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueStateType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ValueStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueStateType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueStateType()))
                {
                    Construct_ValueStateType();
                }
                if ((*Value()).hasMember(ItemName_ValueStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueStateType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueStateType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueStateType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ValueStateType(void) const
        {
            return (*Value())[ItemName_ValueStateType()];
        }
        bool Get_ValueStateType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueStateType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueStateType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ValueVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ValueVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ValueVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ValueVariable()))
                {
                    Construct_ValueVariable();
                }
                if ((*Value()).hasMember(ItemName_ValueVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ValueVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ValueVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ValueVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ValueVariable(void) const
        {
            return (*Value())[ItemName_ValueVariable()];
        }
        bool Get_ValueVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ValueVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_ValueVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote_StreamProcessor


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Remote
//------------------------------------------------------------------------
class CType_Config_Variable_Remote : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_SSI(void)
        {
            static std::string str("SSI");
            return str;
        }
    public:
        static std::string const& ItemName_Modbus(void)
        {
            static std::string str("Modbus");
            return str;
        }
    public:
        static std::string const& ItemName_CAN(void)
        {
            static std::string str("CAN");
            return str;
        }
    public:
        static std::string const& ItemName_SDI12(void)
        {
            static std::string str("SDI12");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Remote");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.332");
        return str;
    }
public:
    CType_Config_Variable_Remote(void)
    {
        try
        {
            Construct_Type();
            Construct_SSI();
            Construct_Modbus();
            Construct_CAN();
            Construct_SDI12();
            Construct_StreamProcessor();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Remote(const CType_Config_Variable_Remote& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Remote(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_SSI();
            Construct_Modbus();
            Construct_CAN();
            Construct_SDI12();
            Construct_StreamProcessor();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Remote(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_SSI();
            Initialize_Modbus();
            Initialize_CAN();
            Initialize_SDI12();
            Initialize_StreamProcessor();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SSI (Type: "CType_Config_Variable_Remote_SSI")
    protected:
        void Construct_SSI(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SSI()))
                {
                    CType_Config_Variable_Remote_SSI InitValue;
                    (*Value())[ItemName_SSI()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SSI(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SSI()))
                {
                    Construct_SSI();
                }
                if ((*Value()).hasMember(ItemName_SSI()))
                {
                    CType_Config_Variable_Remote_SSI InitValue;
                    (*Value())[ItemName_SSI()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SSI(const CType_Config_Variable_Remote_SSI& SetValue)
        {
            try
            {
                (*Value())[ItemName_SSI()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote_SSI Get_SSI(void) const
        {
            return (*Value())[ItemName_SSI()];
        }
        bool Get_SSI(CType_Config_Variable_Remote_SSI& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SSI()]).valid())
                {
                    GetValue = (*Value())[ItemName_SSI()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Modbus (Type: "CType_Config_Variable_Remote_Modbus")
    protected:
        void Construct_Modbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Modbus()))
                {
                    CType_Config_Variable_Remote_Modbus InitValue;
                    (*Value())[ItemName_Modbus()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Modbus(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Modbus()))
                {
                    Construct_Modbus();
                }
                if ((*Value()).hasMember(ItemName_Modbus()))
                {
                    CType_Config_Variable_Remote_Modbus InitValue;
                    (*Value())[ItemName_Modbus()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Modbus(const CType_Config_Variable_Remote_Modbus& SetValue)
        {
            try
            {
                (*Value())[ItemName_Modbus()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote_Modbus Get_Modbus(void) const
        {
            return (*Value())[ItemName_Modbus()];
        }
        bool Get_Modbus(CType_Config_Variable_Remote_Modbus& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Modbus()]).valid())
                {
                    GetValue = (*Value())[ItemName_Modbus()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CAN (Type: "CType_Config_Variable_Remote_CAN")
    protected:
        void Construct_CAN(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CAN()))
                {
                    CType_Config_Variable_Remote_CAN InitValue;
                    (*Value())[ItemName_CAN()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CAN(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CAN()))
                {
                    Construct_CAN();
                }
                if ((*Value()).hasMember(ItemName_CAN()))
                {
                    CType_Config_Variable_Remote_CAN InitValue;
                    (*Value())[ItemName_CAN()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CAN(const CType_Config_Variable_Remote_CAN& SetValue)
        {
            try
            {
                (*Value())[ItemName_CAN()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote_CAN Get_CAN(void) const
        {
            return (*Value())[ItemName_CAN()];
        }
        bool Get_CAN(CType_Config_Variable_Remote_CAN& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CAN()]).valid())
                {
                    GetValue = (*Value())[ItemName_CAN()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SDI12 (Type: "CType_Config_Variable_Remote_SDI12")
    protected:
        void Construct_SDI12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12()))
                {
                    CType_Config_Variable_Remote_SDI12 InitValue;
                    (*Value())[ItemName_SDI12()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SDI12(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SDI12()))
                {
                    Construct_SDI12();
                }
                if ((*Value()).hasMember(ItemName_SDI12()))
                {
                    CType_Config_Variable_Remote_SDI12 InitValue;
                    (*Value())[ItemName_SDI12()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SDI12(const CType_Config_Variable_Remote_SDI12& SetValue)
        {
            try
            {
                (*Value())[ItemName_SDI12()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote_SDI12 Get_SDI12(void) const
        {
            return (*Value())[ItemName_SDI12()];
        }
        bool Get_SDI12(CType_Config_Variable_Remote_SDI12& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SDI12()]).valid())
                {
                    GetValue = (*Value())[ItemName_SDI12()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "CType_Config_Variable_Remote_StreamProcessor")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    CType_Config_Variable_Remote_StreamProcessor InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    CType_Config_Variable_Remote_StreamProcessor InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const CType_Config_Variable_Remote_StreamProcessor& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote_StreamProcessor Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(CType_Config_Variable_Remote_StreamProcessor& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Remote


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_SetPoint
//------------------------------------------------------------------------
class CType_Config_Variable_SetPoint : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_SetPoint");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.333");
        return str;
    }
public:
    CType_Config_Variable_SetPoint(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_SetPoint(const CType_Config_Variable_SetPoint& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_SetPoint(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_SetPoint(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_SetPoint


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Alarm
//------------------------------------------------------------------------
class CType_Config_Variable_Alarm : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Alarm");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.334");
        return str;
    }
public:
    CType_Config_Variable_Alarm(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Alarm(const CType_Config_Variable_Alarm& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Alarm(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Alarm(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Alarm


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Arithmetic
//------------------------------------------------------------------------
class CType_Config_Variable_Arithmetic : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Arithmetic");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.335");
        return str;
    }
public:
    CType_Config_Variable_Arithmetic(void)
    {
        try
        {
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Arithmetic(const CType_Config_Variable_Arithmetic& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Arithmetic(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Arithmetic(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Arithmetic


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable_Reference
//------------------------------------------------------------------------
class CType_Config_Variable_Reference : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_VariableLinkID(void)
        {
            static std::string str("VariableLinkID");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable_Reference");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.336");
        return str;
    }
public:
    CType_Config_Variable_Reference(void)
    {
        try
        {
            Construct_Type();
            Construct_Variable();
            Construct_VariableLinkID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable_Reference(const CType_Config_Variable_Reference& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable_Reference(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_Variable();
            Construct_VariableLinkID();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable_Reference(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_Variable();
            Initialize_VariableLinkID();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VariableLinkID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_VariableLinkID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableLinkID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_VariableLinkID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VariableLinkID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariableLinkID()))
                {
                    Construct_VariableLinkID();
                }
                if ((*Value()).hasMember(ItemName_VariableLinkID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_VariableLinkID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VariableLinkID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_VariableLinkID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_VariableLinkID(void) const
        {
            return (*Value())[ItemName_VariableLinkID()];
        }
        bool Get_VariableLinkID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VariableLinkID()]).valid())
                {
                    GetValue = (*Value())[ItemName_VariableLinkID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable_Reference


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Variable
//------------------------------------------------------------------------
class CType_Config_Variable : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_AnalogInput(void)
        {
            static std::string str("AnalogInput");
            return str;
        }
    public:
        static std::string const& ItemName_AnalogOutput(void)
        {
            static std::string str("AnalogOutput");
            return str;
        }
    public:
        static std::string const& ItemName_DigitalInput(void)
        {
            static std::string str("DigitalInput");
            return str;
        }
    public:
        static std::string const& ItemName_DigitalOutput(void)
        {
            static std::string str("DigitalOutput");
            return str;
        }
    public:
        static std::string const& ItemName_Remote(void)
        {
            static std::string str("Remote");
            return str;
        }
    public:
        static std::string const& ItemName_SetPoint(void)
        {
            static std::string str("SetPoint");
            return str;
        }
    public:
        static std::string const& ItemName_Alarm(void)
        {
            static std::string str("Alarm");
            return str;
        }
    public:
        static std::string const& ItemName_Arithmetic(void)
        {
            static std::string str("Arithmetic");
            return str;
        }
    public:
        static std::string const& ItemName_Reference(void)
        {
            static std::string str("Reference");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Variable");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.300");
        return str;
    }
public:
    CType_Config_Variable(void)
    {
        try
        {
            Construct_General();
            Construct_AnalogInput();
            Construct_AnalogOutput();
            Construct_DigitalInput();
            Construct_DigitalOutput();
            Construct_Remote();
            Construct_SetPoint();
            Construct_Alarm();
            Construct_Arithmetic();
            Construct_Reference();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Variable(const CType_Config_Variable& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Variable(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_AnalogInput();
            Construct_AnalogOutput();
            Construct_DigitalInput();
            Construct_DigitalOutput();
            Construct_Remote();
            Construct_SetPoint();
            Construct_Alarm();
            Construct_Arithmetic();
            Construct_Reference();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Variable(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_AnalogInput();
            Initialize_AnalogOutput();
            Initialize_DigitalInput();
            Initialize_DigitalOutput();
            Initialize_Remote();
            Initialize_SetPoint();
            Initialize_Alarm();
            Initialize_Arithmetic();
            Initialize_Reference();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Variable_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Variable_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Variable_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Variable_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Variable_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnalogInput (Type: "CType_Config_Variable_AnalogInput")
    protected:
        void Construct_AnalogInput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnalogInput()))
                {
                    CType_Config_Variable_AnalogInput InitValue;
                    (*Value())[ItemName_AnalogInput()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnalogInput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnalogInput()))
                {
                    Construct_AnalogInput();
                }
                if ((*Value()).hasMember(ItemName_AnalogInput()))
                {
                    CType_Config_Variable_AnalogInput InitValue;
                    (*Value())[ItemName_AnalogInput()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnalogInput(const CType_Config_Variable_AnalogInput& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnalogInput()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_AnalogInput Get_AnalogInput(void) const
        {
            return (*Value())[ItemName_AnalogInput()];
        }
        bool Get_AnalogInput(CType_Config_Variable_AnalogInput& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnalogInput()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnalogInput()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnalogOutput (Type: "CType_Config_Variable_AnalogOutput")
    protected:
        void Construct_AnalogOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnalogOutput()))
                {
                    CType_Config_Variable_AnalogOutput InitValue;
                    (*Value())[ItemName_AnalogOutput()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnalogOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnalogOutput()))
                {
                    Construct_AnalogOutput();
                }
                if ((*Value()).hasMember(ItemName_AnalogOutput()))
                {
                    CType_Config_Variable_AnalogOutput InitValue;
                    (*Value())[ItemName_AnalogOutput()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnalogOutput(const CType_Config_Variable_AnalogOutput& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnalogOutput()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_AnalogOutput Get_AnalogOutput(void) const
        {
            return (*Value())[ItemName_AnalogOutput()];
        }
        bool Get_AnalogOutput(CType_Config_Variable_AnalogOutput& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnalogOutput()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnalogOutput()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DigitalInput (Type: "CType_Config_Variable_DigitalInput")
    protected:
        void Construct_DigitalInput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInput()))
                {
                    CType_Config_Variable_DigitalInput InitValue;
                    (*Value())[ItemName_DigitalInput()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalInput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInput()))
                {
                    Construct_DigitalInput();
                }
                if ((*Value()).hasMember(ItemName_DigitalInput()))
                {
                    CType_Config_Variable_DigitalInput InitValue;
                    (*Value())[ItemName_DigitalInput()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalInput(const CType_Config_Variable_DigitalInput& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalInput()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_DigitalInput Get_DigitalInput(void) const
        {
            return (*Value())[ItemName_DigitalInput()];
        }
        bool Get_DigitalInput(CType_Config_Variable_DigitalInput& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalInput()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalInput()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DigitalOutput (Type: "CType_Config_Variable_DigitalOutput")
    protected:
        void Construct_DigitalOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalOutput()))
                {
                    CType_Config_Variable_DigitalOutput InitValue;
                    (*Value())[ItemName_DigitalOutput()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalOutput(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalOutput()))
                {
                    Construct_DigitalOutput();
                }
                if ((*Value()).hasMember(ItemName_DigitalOutput()))
                {
                    CType_Config_Variable_DigitalOutput InitValue;
                    (*Value())[ItemName_DigitalOutput()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalOutput(const CType_Config_Variable_DigitalOutput& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalOutput()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_DigitalOutput Get_DigitalOutput(void) const
        {
            return (*Value())[ItemName_DigitalOutput()];
        }
        bool Get_DigitalOutput(CType_Config_Variable_DigitalOutput& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalOutput()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalOutput()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Remote (Type: "CType_Config_Variable_Remote")
    protected:
        void Construct_Remote(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Remote()))
                {
                    CType_Config_Variable_Remote InitValue;
                    (*Value())[ItemName_Remote()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Remote(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Remote()))
                {
                    Construct_Remote();
                }
                if ((*Value()).hasMember(ItemName_Remote()))
                {
                    CType_Config_Variable_Remote InitValue;
                    (*Value())[ItemName_Remote()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Remote(const CType_Config_Variable_Remote& SetValue)
        {
            try
            {
                (*Value())[ItemName_Remote()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Remote Get_Remote(void) const
        {
            return (*Value())[ItemName_Remote()];
        }
        bool Get_Remote(CType_Config_Variable_Remote& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Remote()]).valid())
                {
                    GetValue = (*Value())[ItemName_Remote()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SetPoint (Type: "CType_Config_Variable_SetPoint")
    protected:
        void Construct_SetPoint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SetPoint()))
                {
                    CType_Config_Variable_SetPoint InitValue;
                    (*Value())[ItemName_SetPoint()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SetPoint(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SetPoint()))
                {
                    Construct_SetPoint();
                }
                if ((*Value()).hasMember(ItemName_SetPoint()))
                {
                    CType_Config_Variable_SetPoint InitValue;
                    (*Value())[ItemName_SetPoint()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SetPoint(const CType_Config_Variable_SetPoint& SetValue)
        {
            try
            {
                (*Value())[ItemName_SetPoint()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_SetPoint Get_SetPoint(void) const
        {
            return (*Value())[ItemName_SetPoint()];
        }
        bool Get_SetPoint(CType_Config_Variable_SetPoint& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SetPoint()]).valid())
                {
                    GetValue = (*Value())[ItemName_SetPoint()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Alarm (Type: "CType_Config_Variable_Alarm")
    protected:
        void Construct_Alarm(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Alarm()))
                {
                    CType_Config_Variable_Alarm InitValue;
                    (*Value())[ItemName_Alarm()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Alarm(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Alarm()))
                {
                    Construct_Alarm();
                }
                if ((*Value()).hasMember(ItemName_Alarm()))
                {
                    CType_Config_Variable_Alarm InitValue;
                    (*Value())[ItemName_Alarm()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Alarm(const CType_Config_Variable_Alarm& SetValue)
        {
            try
            {
                (*Value())[ItemName_Alarm()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Alarm Get_Alarm(void) const
        {
            return (*Value())[ItemName_Alarm()];
        }
        bool Get_Alarm(CType_Config_Variable_Alarm& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Alarm()]).valid())
                {
                    GetValue = (*Value())[ItemName_Alarm()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Arithmetic (Type: "CType_Config_Variable_Arithmetic")
    protected:
        void Construct_Arithmetic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Arithmetic()))
                {
                    CType_Config_Variable_Arithmetic InitValue;
                    (*Value())[ItemName_Arithmetic()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Arithmetic(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Arithmetic()))
                {
                    Construct_Arithmetic();
                }
                if ((*Value()).hasMember(ItemName_Arithmetic()))
                {
                    CType_Config_Variable_Arithmetic InitValue;
                    (*Value())[ItemName_Arithmetic()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Arithmetic(const CType_Config_Variable_Arithmetic& SetValue)
        {
            try
            {
                (*Value())[ItemName_Arithmetic()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Arithmetic Get_Arithmetic(void) const
        {
            return (*Value())[ItemName_Arithmetic()];
        }
        bool Get_Arithmetic(CType_Config_Variable_Arithmetic& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Arithmetic()]).valid())
                {
                    GetValue = (*Value())[ItemName_Arithmetic()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Reference (Type: "CType_Config_Variable_Reference")
    protected:
        void Construct_Reference(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reference()))
                {
                    CType_Config_Variable_Reference InitValue;
                    (*Value())[ItemName_Reference()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Reference(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Reference()))
                {
                    Construct_Reference();
                }
                if ((*Value()).hasMember(ItemName_Reference()))
                {
                    CType_Config_Variable_Reference InitValue;
                    (*Value())[ItemName_Reference()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Reference(const CType_Config_Variable_Reference& SetValue)
        {
            try
            {
                (*Value())[ItemName_Reference()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Variable_Reference Get_Reference(void) const
        {
            return (*Value())[ItemName_Reference()];
        }
        bool Get_Reference(CType_Config_Variable_Reference& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Reference()]).valid())
                {
                    GetValue = (*Value())[ItemName_Reference()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Variable


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_InternalModule_General_Additional_Hardware
//------------------------------------------------------------------------
class CType_Config_InternalModule_General_Additional_Hardware : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            static std::string str("DigitalInputSwitchingLevelTypeConnector0");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_InternalModule_General_Additional_Hardware");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.401");
        return str;
    }
public:
    CType_Config_InternalModule_General_Additional_Hardware(void)
    {
        try
        {
            Construct_DigitalInputSwitchingLevelTypeConnector0();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_InternalModule_General_Additional_Hardware(const CType_Config_InternalModule_General_Additional_Hardware& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_InternalModule_General_Additional_Hardware(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DigitalInputSwitchingLevelTypeConnector0();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_InternalModule_General_Additional_Hardware(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DigitalInputSwitchingLevelTypeConnector0();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DigitalInputSwitchingLevelTypeConnector0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    Construct_DigitalInputSwitchingLevelTypeConnector0();
                }
                if ((*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalInputSwitchingLevelTypeConnector0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DigitalInputSwitchingLevelTypeConnector0(void) const
        {
            return (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()];
        }
        bool Get_DigitalInputSwitchingLevelTypeConnector0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_InternalModule_General_Additional_Hardware


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_InternalModule_General_Additional
//------------------------------------------------------------------------
class CType_Config_InternalModule_General_Additional : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Hardware(void)
        {
            static std::string str("Hardware");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_InternalModule_General_Additional");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.402");
        return str;
    }
public:
    CType_Config_InternalModule_General_Additional(void)
    {
        try
        {
            Construct_Hardware();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_InternalModule_General_Additional(const CType_Config_InternalModule_General_Additional& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_InternalModule_General_Additional(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Hardware();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_InternalModule_General_Additional(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Hardware();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Hardware (Type: "CType_Config_InternalModule_General_Additional_Hardware")
    protected:
        void Construct_Hardware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hardware()))
                {
                    CType_Config_InternalModule_General_Additional_Hardware InitValue;
                    (*Value())[ItemName_Hardware()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hardware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hardware()))
                {
                    Construct_Hardware();
                }
                if ((*Value()).hasMember(ItemName_Hardware()))
                {
                    CType_Config_InternalModule_General_Additional_Hardware InitValue;
                    (*Value())[ItemName_Hardware()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hardware(const CType_Config_InternalModule_General_Additional_Hardware& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hardware()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_InternalModule_General_Additional_Hardware Get_Hardware(void) const
        {
            return (*Value())[ItemName_Hardware()];
        }
        bool Get_Hardware(CType_Config_InternalModule_General_Additional_Hardware& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hardware()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hardware()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_InternalModule_General_Additional


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_InternalModule_General
//------------------------------------------------------------------------
class CType_Config_InternalModule_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsVariable(void)
        {
            static std::string str("OwnedIDsVariable");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_InternalModule_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.403");
        return str;
    }
public:
    CType_Config_InternalModule_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Description();
            Construct_Type();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_InternalModule_General(const CType_Config_InternalModule_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_InternalModule_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Description();
            Construct_Type();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_InternalModule_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsVariable();
            Initialize_Description();
            Initialize_Type();
            Initialize_Additional();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsVariable (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    Construct_OwnedIDsVariable();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsVariable(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsVariable(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    return (*Value())[ItemName_OwnedIDsVariable()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsVariable(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsVariable(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsVariable(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsVariable(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
        }
        bool Get_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    if (((*Value())[ItemName_OwnedIDsVariable()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_InternalModule_General_Additional")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_InternalModule_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_InternalModule_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_InternalModule_General_Additional& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_InternalModule_General_Additional Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_InternalModule_General_Additional& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_InternalModule_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_InternalModule
//------------------------------------------------------------------------
class CType_Config_InternalModule : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_InternalModule");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.400");
        return str;
    }
public:
    CType_Config_InternalModule(void)
    {
        try
        {
            Construct_General();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_InternalModule(const CType_Config_InternalModule& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_InternalModule(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_InternalModule(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_InternalModule_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_InternalModule_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_InternalModule_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_InternalModule_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_InternalModule_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_InternalModule_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_InternalModule


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_General_Additional_Hardware
//------------------------------------------------------------------------
class CType_Config_Module_General_Additional_Hardware : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            static std::string str("DigitalInputSwitchingLevelTypeConnector0");
            return str;
        }
    public:
        static std::string const& ItemName_DigitalInputSwitchingLevelTypeConnector1(void)
        {
            static std::string str("DigitalInputSwitchingLevelTypeConnector1");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_General_Additional_Hardware");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.501");
        return str;
    }
public:
    CType_Config_Module_General_Additional_Hardware(void)
    {
        try
        {
            Construct_DigitalInputSwitchingLevelTypeConnector0();
            Construct_DigitalInputSwitchingLevelTypeConnector1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_General_Additional_Hardware(const CType_Config_Module_General_Additional_Hardware& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_General_Additional_Hardware(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DigitalInputSwitchingLevelTypeConnector0();
            Construct_DigitalInputSwitchingLevelTypeConnector1();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_General_Additional_Hardware(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DigitalInputSwitchingLevelTypeConnector0();
            Initialize_DigitalInputSwitchingLevelTypeConnector1();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DigitalInputSwitchingLevelTypeConnector0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalInputSwitchingLevelTypeConnector0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    Construct_DigitalInputSwitchingLevelTypeConnector0();
                }
                if ((*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalInputSwitchingLevelTypeConnector0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DigitalInputSwitchingLevelTypeConnector0(void) const
        {
            return (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()];
        }
        bool Get_DigitalInputSwitchingLevelTypeConnector0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DigitalInputSwitchingLevelTypeConnector1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DigitalInputSwitchingLevelTypeConnector1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DigitalInputSwitchingLevelTypeConnector1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector1()))
                {
                    Construct_DigitalInputSwitchingLevelTypeConnector1();
                }
                if ((*Value()).hasMember(ItemName_DigitalInputSwitchingLevelTypeConnector1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DigitalInputSwitchingLevelTypeConnector1(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DigitalInputSwitchingLevelTypeConnector1(void) const
        {
            return (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()];
        }
        bool Get_DigitalInputSwitchingLevelTypeConnector1(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()]).valid())
                {
                    GetValue = (*Value())[ItemName_DigitalInputSwitchingLevelTypeConnector1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_General_Additional_Hardware


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_General_Additional_SampleRate
//------------------------------------------------------------------------
class CType_Config_Module_General_Additional_SampleRate : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Mode(void)
        {
            static std::string str("Mode");
            return str;
        }
    public:
        static std::string const& ItemName_AsADCFilterFrequency(void)
        {
            static std::string str("AsADCFilterFrequency");
            return str;
        }
    public:
        static std::string const& ItemName_AsIs(void)
        {
            static std::string str("AsIs");
            return str;
        }
    public:
        static std::string const& ItemName_AsSwitchingPeriod(void)
        {
            static std::string str("AsSwitchingPeriod");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_General_Additional_SampleRate");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.508");
        return str;
    }
public:
    CType_Config_Module_General_Additional_SampleRate(void)
    {
        try
        {
            Construct_Mode();
            Construct_AsADCFilterFrequency();
            Construct_AsIs();
            Construct_AsSwitchingPeriod();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_General_Additional_SampleRate(const CType_Config_Module_General_Additional_SampleRate& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_General_Additional_SampleRate(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Mode();
            Construct_AsADCFilterFrequency();
            Construct_AsIs();
            Construct_AsSwitchingPeriod();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_General_Additional_SampleRate(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Mode();
            Initialize_AsADCFilterFrequency();
            Initialize_AsIs();
            Initialize_AsSwitchingPeriod();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Mode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    Construct_Mode();
                }
                if ((*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Mode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Mode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Mode(void) const
        {
            return (*Value())[ItemName_Mode()];
        }
        bool Get_Mode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Mode()]).valid())
                {
                    GetValue = (*Value())[ItemName_Mode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AsADCFilterFrequency (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AsADCFilterFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsADCFilterFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsADCFilterFrequency()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AsADCFilterFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsADCFilterFrequency()))
                {
                    Construct_AsADCFilterFrequency();
                }
                if ((*Value()).hasMember(ItemName_AsADCFilterFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsADCFilterFrequency()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AsADCFilterFrequency(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AsADCFilterFrequency()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AsADCFilterFrequency(void) const
        {
            return (*Value())[ItemName_AsADCFilterFrequency()];
        }
        bool Get_AsADCFilterFrequency(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AsADCFilterFrequency()]).valid())
                {
                    GetValue = (*Value())[ItemName_AsADCFilterFrequency()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AsIs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AsIs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsIs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsIs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AsIs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsIs()))
                {
                    Construct_AsIs();
                }
                if ((*Value()).hasMember(ItemName_AsIs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsIs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AsIs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AsIs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AsIs(void) const
        {
            return (*Value())[ItemName_AsIs()];
        }
        bool Get_AsIs(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AsIs()]).valid())
                {
                    GetValue = (*Value())[ItemName_AsIs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AsSwitchingPeriod (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AsSwitchingPeriod(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsSwitchingPeriod()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsSwitchingPeriod()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AsSwitchingPeriod(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AsSwitchingPeriod()))
                {
                    Construct_AsSwitchingPeriod();
                }
                if ((*Value()).hasMember(ItemName_AsSwitchingPeriod()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AsSwitchingPeriod()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AsSwitchingPeriod(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AsSwitchingPeriod()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AsSwitchingPeriod(void) const
        {
            return (*Value())[ItemName_AsSwitchingPeriod()];
        }
        bool Get_AsSwitchingPeriod(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AsSwitchingPeriod()]).valid())
                {
                    GetValue = (*Value())[ItemName_AsSwitchingPeriod()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_General_Additional_SampleRate


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_General_Additional
//------------------------------------------------------------------------
class CType_Config_Module_General_Additional : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_DisableDataTransfer(void)
        {
            static std::string str("DisableDataTransfer");
            return str;
        }
    public:
        static std::string const& ItemName_Hardware(void)
        {
            static std::string str("Hardware");
            return str;
        }
    public:
        static std::string const& ItemName_SampleRate(void)
        {
            static std::string str("SampleRate");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_General_Additional");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.502");
        return str;
    }
public:
    CType_Config_Module_General_Additional(void)
    {
        try
        {
            Construct_DisableDataTransfer();
            Construct_Hardware();
            Construct_SampleRate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_General_Additional(const CType_Config_Module_General_Additional& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_General_Additional(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_DisableDataTransfer();
            Construct_Hardware();
            Construct_SampleRate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_General_Additional(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_DisableDataTransfer();
            Initialize_Hardware();
            Initialize_SampleRate();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item DisableDataTransfer (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DisableDataTransfer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDataTransfer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableDataTransfer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DisableDataTransfer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDataTransfer()))
                {
                    Construct_DisableDataTransfer();
                }
                if ((*Value()).hasMember(ItemName_DisableDataTransfer()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableDataTransfer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDataTransfer(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDataTransfer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DisableDataTransfer(void) const
        {
            return (*Value())[ItemName_DisableDataTransfer()];
        }
        bool Get_DisableDataTransfer(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDataTransfer()]).valid())
                {
                    GetValue = (*Value())[ItemName_DisableDataTransfer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Hardware (Type: "CType_Config_Module_General_Additional_Hardware")
    protected:
        void Construct_Hardware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hardware()))
                {
                    CType_Config_Module_General_Additional_Hardware InitValue;
                    (*Value())[ItemName_Hardware()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Hardware(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Hardware()))
                {
                    Construct_Hardware();
                }
                if ((*Value()).hasMember(ItemName_Hardware()))
                {
                    CType_Config_Module_General_Additional_Hardware InitValue;
                    (*Value())[ItemName_Hardware()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Hardware(const CType_Config_Module_General_Additional_Hardware& SetValue)
        {
            try
            {
                (*Value())[ItemName_Hardware()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_General_Additional_Hardware Get_Hardware(void) const
        {
            return (*Value())[ItemName_Hardware()];
        }
        bool Get_Hardware(CType_Config_Module_General_Additional_Hardware& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Hardware()]).valid())
                {
                    GetValue = (*Value())[ItemName_Hardware()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SampleRate (Type: "CType_Config_Module_General_Additional_SampleRate")
    protected:
        void Construct_SampleRate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleRate()))
                {
                    CType_Config_Module_General_Additional_SampleRate InitValue;
                    (*Value())[ItemName_SampleRate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SampleRate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SampleRate()))
                {
                    Construct_SampleRate();
                }
                if ((*Value()).hasMember(ItemName_SampleRate()))
                {
                    CType_Config_Module_General_Additional_SampleRate InitValue;
                    (*Value())[ItemName_SampleRate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SampleRate(const CType_Config_Module_General_Additional_SampleRate& SetValue)
        {
            try
            {
                (*Value())[ItemName_SampleRate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_General_Additional_SampleRate Get_SampleRate(void) const
        {
            return (*Value())[ItemName_SampleRate()];
        }
        bool Get_SampleRate(CType_Config_Module_General_Additional_SampleRate& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SampleRate()]).valid())
                {
                    GetValue = (*Value())[ItemName_SampleRate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_General_Additional


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_General_Special
//------------------------------------------------------------------------
class CType_Config_Module_General_Special : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Datas(void)
        {
            static std::string str("Datas");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_General_Special");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.503");
        return str;
    }
public:
    CType_Config_Module_General_Special(void)
    {
        try
        {
            Construct_Datas();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_General_Special(const CType_Config_Module_General_Special& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_General_Special(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Datas();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_General_Special(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Datas();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Datas (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer")
    protected:
        void Construct_Datas(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Datas()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer InitValue;
                    (*Value())[ItemName_Datas()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Datas(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Datas()))
                {
                    Construct_Datas();
                }
                if ((*Value()).hasMember(ItemName_Datas()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer InitValue;
                    (*Value())[ItemName_Datas()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Datas(const GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Datas()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer Get_Datas(void) const
        {
            return (*Value())[ItemName_Datas()];
        }
        bool Get_Datas(GInsXmlRpcStdAPI::CGIns_Edit_ValueList_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Datas()]).valid())
                {
                    GetValue = (*Value())[ItemName_Datas()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_General_Special


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_General
//------------------------------------------------------------------------
class CType_Config_Module_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsVariable(void)
        {
            static std::string str("OwnedIDsVariable");
            return str;
        }
    public:
        static std::string const& ItemName_Location(void)
        {
            static std::string str("Location");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_UserSection(void)
        {
            static std::string str("UserSection");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_TypeDetails(void)
        {
            static std::string str("TypeDetails");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceTuning(void)
        {
            static std::string str("DeviceTuning");
            return str;
        }
    public:
        static std::string const& ItemName_Image(void)
        {
            static std::string str("Image");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
    public:
        static std::string const& ItemName_Special(void)
        {
            static std::string str("Special");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.504");
        return str;
    }
public:
    CType_Config_Module_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Location();
            Construct_UserName();
            Construct_UserSection();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceTuning();
            Construct_Image();
            Construct_Additional();
            Construct_Special();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_General(const CType_Config_Module_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Location();
            Construct_UserName();
            Construct_UserSection();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceTuning();
            Construct_Image();
            Construct_Additional();
            Construct_Special();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsVariable();
            Initialize_Location();
            Initialize_UserName();
            Initialize_UserSection();
            Initialize_Type();
            Initialize_TypeDetails();
            Initialize_DeviceTuning();
            Initialize_Image();
            Initialize_Additional();
            Initialize_Special();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsVariable (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    Construct_OwnedIDsVariable();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsVariable(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsVariable(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    return (*Value())[ItemName_OwnedIDsVariable()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsVariable(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsVariable(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsVariable(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsVariable(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
        }
        bool Get_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    if (((*Value())[ItemName_OwnedIDsVariable()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Location (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    Construct_Location();
                }
                if ((*Value()).hasMember(ItemName_Location()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Location(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Location()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Location(void) const
        {
            return (*Value())[ItemName_Location()];
        }
        bool Get_Location(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Location()]).valid())
                {
                    GetValue = (*Value())[ItemName_Location()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserSection (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_UserSection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserSection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_UserSection()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserSection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserSection()))
                {
                    Construct_UserSection();
                }
                if ((*Value()).hasMember(ItemName_UserSection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_UserSection()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserSection(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserSection()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_UserSection(void) const
        {
            return (*Value())[ItemName_UserSection()];
        }
        bool Get_UserSection(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserSection()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserSection()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_DeviceType")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_DeviceType Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeDetails (Type: "CType_Info_DeviceTypeDetails")
    protected:
        void Construct_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    Construct_TypeDetails();
                }
                if ((*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeDetails(const CType_Info_DeviceTypeDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_DeviceTypeDetails Get_TypeDetails(void) const
        {
            return (*Value())[ItemName_TypeDetails()];
        }
        bool Get_TypeDetails(CType_Info_DeviceTypeDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceTuning (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DeviceTuning(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DeviceTuning()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceTuning(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    Construct_DeviceTuning();
                }
                if ((*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DeviceTuning()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceTuning(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceTuning()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DeviceTuning(void) const
        {
            return (*Value())[ItemName_DeviceTuning()];
        }
        bool Get_DeviceTuning(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceTuning()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeviceTuning()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Image (Type: "GInsXmlRpcStdAPI::CGIns_Base_Image")
    protected:
        void Construct_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    Construct_Image();
                }
                if ((*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Image(const GInsXmlRpcStdAPI::CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_Image()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_Image Get_Image(void) const
        {
            return (*Value())[ItemName_Image()];
        }
        bool Get_Image(GInsXmlRpcStdAPI::CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Image()]).valid())
                {
                    GetValue = (*Value())[ItemName_Image()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_Module_General_Additional")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Module_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Module_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_Module_General_Additional& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_General_Additional Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_Module_General_Additional& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Special (Type: "CType_Config_Module_General_Special")
    protected:
        void Construct_Special(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Special()))
                {
                    CType_Config_Module_General_Special InitValue;
                    (*Value())[ItemName_Special()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Special(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Special()))
                {
                    Construct_Special();
                }
                if ((*Value()).hasMember(ItemName_Special()))
                {
                    CType_Config_Module_General_Special InitValue;
                    (*Value())[ItemName_Special()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Special(const CType_Config_Module_General_Special& SetValue)
        {
            try
            {
                (*Value())[ItemName_Special()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_General_Special Get_Special(void) const
        {
            return (*Value())[ItemName_Special()];
        }
        bool Get_Special(CType_Config_Module_General_Special& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Special()]).valid())
                {
                    GetValue = (*Value())[ItemName_Special()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_Adapter_RealtimeRS485
//------------------------------------------------------------------------
class CType_Config_Module_Adapter_RealtimeRS485 : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
    public:
        static std::string const& ItemName_AnswerDelay(void)
        {
            static std::string str("AnswerDelay");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_Adapter_RealtimeRS485");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.505");
        return str;
    }
public:
    CType_Config_Module_Adapter_RealtimeRS485(void)
    {
        try
        {
            Construct_Address();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_Adapter_RealtimeRS485(const CType_Config_Module_Adapter_RealtimeRS485& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_Adapter_RealtimeRS485(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Address();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_AnswerDelay();
            Construct_WatchdogTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_Adapter_RealtimeRS485(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Address();
            Initialize_Protocol();
            Initialize_Baudrate();
            Initialize_CharFormat();
            Initialize_AnswerDelay();
            Initialize_WatchdogTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Address (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Address(void) const
        {
            return (*Value())[ItemName_Address()];
        }
        bool Get_Address(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (*Value())[ItemName_Address()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnswerDelay (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    Construct_AnswerDelay();
                }
                if ((*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnswerDelay(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnswerDelay()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_AnswerDelay(void) const
        {
            return (*Value())[ItemName_AnswerDelay()];
        }
        bool Get_AnswerDelay(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnswerDelay()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnswerDelay()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_Adapter_RealtimeRS485


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_Adapter_File
//------------------------------------------------------------------------
class CType_Config_Module_Adapter_File : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_BaseFileName(void)
        {
            static std::string str("BaseFileName");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_Adapter_File");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.506");
        return str;
    }
public:
    CType_Config_Module_Adapter_File(void)
    {
        try
        {
            Construct_BaseFileName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_Adapter_File(const CType_Config_Module_Adapter_File& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_Adapter_File(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_BaseFileName();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_Adapter_File(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_BaseFileName();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item BaseFileName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_BaseFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BaseFileName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_BaseFileName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BaseFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BaseFileName()))
                {
                    Construct_BaseFileName();
                }
                if ((*Value()).hasMember(ItemName_BaseFileName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_BaseFileName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BaseFileName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_BaseFileName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_BaseFileName(void) const
        {
            return (*Value())[ItemName_BaseFileName()];
        }
        bool Get_BaseFileName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BaseFileName()]).valid())
                {
                    GetValue = (*Value())[ItemName_BaseFileName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_Adapter_File


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_Adapter_FieldbusEthercat
//------------------------------------------------------------------------
class CType_Config_Module_Adapter_FieldbusEthercat : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Revision(void)
        {
            static std::string str("Revision");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_Adapter_FieldbusEthercat");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.509");
        return str;
    }
public:
    CType_Config_Module_Adapter_FieldbusEthercat(void)
    {
        try
        {
            Construct_Revision();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_Adapter_FieldbusEthercat(const CType_Config_Module_Adapter_FieldbusEthercat& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_Adapter_FieldbusEthercat(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Revision();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_Adapter_FieldbusEthercat(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Revision();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Revision (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Revision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Revision()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Revision()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Revision(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Revision()))
                {
                    Construct_Revision();
                }
                if ((*Value()).hasMember(ItemName_Revision()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Revision()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Revision(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Revision()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_Revision(void) const
        {
            return (*Value())[ItemName_Revision()];
        }
        bool Get_Revision(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Revision()]).valid())
                {
                    GetValue = (*Value())[ItemName_Revision()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_Adapter_FieldbusEthercat


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module_Adapter
//------------------------------------------------------------------------
class CType_Config_Module_Adapter : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_RealtimeRS485(void)
        {
            static std::string str("RealtimeRS485");
            return str;
        }
    public:
        static std::string const& ItemName_File(void)
        {
            static std::string str("File");
            return str;
        }
    public:
        static std::string const& ItemName_FieldbusEthercat(void)
        {
            static std::string str("FieldbusEthercat");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module_Adapter");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.507");
        return str;
    }
public:
    CType_Config_Module_Adapter(void)
    {
        try
        {
            Construct_RealtimeRS485();
            Construct_File();
            Construct_FieldbusEthercat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module_Adapter(const CType_Config_Module_Adapter& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module_Adapter(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_RealtimeRS485();
            Construct_File();
            Construct_FieldbusEthercat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module_Adapter(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_RealtimeRS485();
            Initialize_File();
            Initialize_FieldbusEthercat();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item RealtimeRS485 (Type: "CType_Config_Module_Adapter_RealtimeRS485")
    protected:
        void Construct_RealtimeRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RealtimeRS485()))
                {
                    CType_Config_Module_Adapter_RealtimeRS485 InitValue;
                    (*Value())[ItemName_RealtimeRS485()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RealtimeRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RealtimeRS485()))
                {
                    Construct_RealtimeRS485();
                }
                if ((*Value()).hasMember(ItemName_RealtimeRS485()))
                {
                    CType_Config_Module_Adapter_RealtimeRS485 InitValue;
                    (*Value())[ItemName_RealtimeRS485()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RealtimeRS485(const CType_Config_Module_Adapter_RealtimeRS485& SetValue)
        {
            try
            {
                (*Value())[ItemName_RealtimeRS485()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_Adapter_RealtimeRS485 Get_RealtimeRS485(void) const
        {
            return (*Value())[ItemName_RealtimeRS485()];
        }
        bool Get_RealtimeRS485(CType_Config_Module_Adapter_RealtimeRS485& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RealtimeRS485()]).valid())
                {
                    GetValue = (*Value())[ItemName_RealtimeRS485()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item File (Type: "CType_Config_Module_Adapter_File")
    protected:
        void Construct_File(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_File()))
                {
                    CType_Config_Module_Adapter_File InitValue;
                    (*Value())[ItemName_File()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_File(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_File()))
                {
                    Construct_File();
                }
                if ((*Value()).hasMember(ItemName_File()))
                {
                    CType_Config_Module_Adapter_File InitValue;
                    (*Value())[ItemName_File()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_File(const CType_Config_Module_Adapter_File& SetValue)
        {
            try
            {
                (*Value())[ItemName_File()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_Adapter_File Get_File(void) const
        {
            return (*Value())[ItemName_File()];
        }
        bool Get_File(CType_Config_Module_Adapter_File& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_File()]).valid())
                {
                    GetValue = (*Value())[ItemName_File()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FieldbusEthercat (Type: "CType_Config_Module_Adapter_FieldbusEthercat")
    protected:
        void Construct_FieldbusEthercat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FieldbusEthercat()))
                {
                    CType_Config_Module_Adapter_FieldbusEthercat InitValue;
                    (*Value())[ItemName_FieldbusEthercat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FieldbusEthercat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FieldbusEthercat()))
                {
                    Construct_FieldbusEthercat();
                }
                if ((*Value()).hasMember(ItemName_FieldbusEthercat()))
                {
                    CType_Config_Module_Adapter_FieldbusEthercat InitValue;
                    (*Value())[ItemName_FieldbusEthercat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FieldbusEthercat(const CType_Config_Module_Adapter_FieldbusEthercat& SetValue)
        {
            try
            {
                (*Value())[ItemName_FieldbusEthercat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_Adapter_FieldbusEthercat Get_FieldbusEthercat(void) const
        {
            return (*Value())[ItemName_FieldbusEthercat()];
        }
        bool Get_FieldbusEthercat(CType_Config_Module_Adapter_FieldbusEthercat& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FieldbusEthercat()]).valid())
                {
                    GetValue = (*Value())[ItemName_FieldbusEthercat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module_Adapter


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Module
//------------------------------------------------------------------------
class CType_Config_Module : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_Adapter(void)
        {
            static std::string str("Adapter");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Module");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.500");
        return str;
    }
public:
    CType_Config_Module(void)
    {
        try
        {
            Construct_General();
            Construct_Adapter();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Module(const CType_Config_Module& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Module(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_Adapter();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Module(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_Adapter();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Module_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Module_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Module_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Module_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Module_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Adapter (Type: "CType_Config_Module_Adapter")
    protected:
        void Construct_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Module_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    Construct_Adapter();
                }
                if ((*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Module_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Adapter(const CType_Config_Module_Adapter& SetValue)
        {
            try
            {
                (*Value())[ItemName_Adapter()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Module_Adapter Get_Adapter(void) const
        {
            return (*Value())[ItemName_Adapter()];
        }
        bool Get_Adapter(CType_Config_Module_Adapter& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Adapter()]).valid())
                {
                    GetValue = (*Value())[ItemName_Adapter()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Module


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_General
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsVariable(void)
        {
            static std::string str("OwnedIDsVariable");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(void)
        {
            static std::string str("EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance");
            return str;
        }
    public:
        static std::string const& ItemName_AvailableReferencedVariables(void)
        {
            static std::string str("AvailableReferencedVariables");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.601");
        return str;
    }
public:
    CType_Config_StreamProcessor_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Description();
            Construct_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance();
            Construct_AvailableReferencedVariables();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_General(const CType_Config_StreamProcessor_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsVariable();
            Construct_Description();
            Construct_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance();
            Construct_AvailableReferencedVariables();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsVariable();
            Initialize_Description();
            Initialize_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance();
            Initialize_AvailableReferencedVariables();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsVariable (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    Construct_OwnedIDsVariable();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsVariable(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsVariable()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsVariable(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    return (*Value())[ItemName_OwnedIDsVariable()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsVariable(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsVariable(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    (*Value())[ItemName_OwnedIDsVariable()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsVariable(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsVariable()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsVariable(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
        }
        bool Get_OwnedIDsVariable(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsVariable()))
                {
                    if (((*Value())[ItemName_OwnedIDsVariable()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsVariable()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()))
                {
                    Construct_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance();
                }
                if ((*Value()).hasMember(ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(void) const
        {
            return (*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()];
        }
        bool Get_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableAllAvailableReferenceVariablesWithoutConfigurationAppearance()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AvailableReferencedVariables (Type: "GInsXmlRpcStdAPI::CGIns_Info_OptionList")
    protected:
        void Construct_AvailableReferencedVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableReferencedVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableReferencedVariables()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AvailableReferencedVariables(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AvailableReferencedVariables()))
                {
                    Construct_AvailableReferencedVariables();
                }
                if ((*Value()).hasMember(ItemName_AvailableReferencedVariables()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_OptionList InitValue;
                    (*Value())[ItemName_AvailableReferencedVariables()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AvailableReferencedVariables(const GInsXmlRpcStdAPI::CGIns_Info_OptionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AvailableReferencedVariables()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_OptionList Get_AvailableReferencedVariables(void) const
        {
            return (*Value())[ItemName_AvailableReferencedVariables()];
        }
        bool Get_AvailableReferencedVariables(GInsXmlRpcStdAPI::CGIns_Info_OptionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AvailableReferencedVariables()]).valid())
                {
                    GetValue = (*Value())[ItemName_AvailableReferencedVariables()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Base
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Base : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Size(void)
        {
            static std::string str("Size");
            return str;
        }
    public:
        static std::string const& ItemName_RetentionTime(void)
        {
            static std::string str("RetentionTime");
            return str;
        }
    public:
        static std::string const& ItemName_HandlingInterval(void)
        {
            static std::string str("HandlingInterval");
            return str;
        }
    public:
        static std::string const& ItemName_Timeout(void)
        {
            static std::string str("Timeout");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_TimestampType(void)
        {
            static std::string str("TimestampType");
            return str;
        }
    public:
        static std::string const& ItemName_TimestampResetType(void)
        {
            static std::string str("TimestampResetType");
            return str;
        }
    public:
        static std::string const& ItemName_TimestampResetDigitalInputTerminal(void)
        {
            static std::string str("TimestampResetDigitalInputTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_ForceEquidistantData(void)
        {
            static std::string str("ForceEquidistantData");
            return str;
        }
    public:
        static std::string const& ItemName_InitStateType(void)
        {
            static std::string str("InitStateType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Base");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.602");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Base(void)
    {
        try
        {
            Construct_Size();
            Construct_RetentionTime();
            Construct_HandlingInterval();
            Construct_Timeout();
            Construct_WatchdogTimeout();
            Construct_TimestampType();
            Construct_TimestampResetType();
            Construct_TimestampResetDigitalInputTerminal();
            Construct_ForceEquidistantData();
            Construct_InitStateType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Base(const CType_Config_StreamProcessor_DataBuffer_Base& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Base(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Size();
            Construct_RetentionTime();
            Construct_HandlingInterval();
            Construct_Timeout();
            Construct_WatchdogTimeout();
            Construct_TimestampType();
            Construct_TimestampResetType();
            Construct_TimestampResetDigitalInputTerminal();
            Construct_ForceEquidistantData();
            Construct_InitStateType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Base(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Size();
            Initialize_RetentionTime();
            Initialize_HandlingInterval();
            Initialize_Timeout();
            Initialize_WatchdogTimeout();
            Initialize_TimestampType();
            Initialize_TimestampResetType();
            Initialize_TimestampResetDigitalInputTerminal();
            Initialize_ForceEquidistantData();
            Initialize_InitStateType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Size (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_Size(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Size()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Size()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Size(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Size()))
                {
                    Construct_Size();
                }
                if ((*Value()).hasMember(ItemName_Size()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_Size()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Size(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_Size()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_Size(void) const
        {
            return (*Value())[ItemName_Size()];
        }
        bool Get_Size(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Size()]).valid())
                {
                    GetValue = (*Value())[ItemName_Size()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item RetentionTime (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_RetentionTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RetentionTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_RetentionTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_RetentionTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_RetentionTime()))
                {
                    Construct_RetentionTime();
                }
                if ((*Value()).hasMember(ItemName_RetentionTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_RetentionTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_RetentionTime(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_RetentionTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_RetentionTime(void) const
        {
            return (*Value())[ItemName_RetentionTime()];
        }
        bool Get_RetentionTime(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_RetentionTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_RetentionTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HandlingInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandlingInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    Construct_HandlingInterval();
                }
                if ((*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandlingInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandlingInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandlingInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandlingInterval(void) const
        {
            return (*Value())[ItemName_HandlingInterval()];
        }
        bool Get_HandlingInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandlingInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandlingInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Timeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Timeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Timeout()))
                {
                    Construct_Timeout();
                }
                if ((*Value()).hasMember(ItemName_Timeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_Timeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Timeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Timeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_Timeout(void) const
        {
            return (*Value())[ItemName_Timeout()];
        }
        bool Get_Timeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Timeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_Timeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimestampType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimestampType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimestampType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampType()))
                {
                    Construct_TimestampType();
                }
                if ((*Value()).hasMember(ItemName_TimestampType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimestampType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimestampType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimestampType(void) const
        {
            return (*Value())[ItemName_TimestampType()];
        }
        bool Get_TimestampType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimestampType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimestampType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimestampResetType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimestampResetType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampResetType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampResetType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimestampResetType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampResetType()))
                {
                    Construct_TimestampResetType();
                }
                if ((*Value()).hasMember(ItemName_TimestampResetType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampResetType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimestampResetType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimestampResetType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimestampResetType(void) const
        {
            return (*Value())[ItemName_TimestampResetType()];
        }
        bool Get_TimestampResetType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimestampResetType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimestampResetType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TimestampResetDigitalInputTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TimestampResetDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampResetDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampResetDigitalInputTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TimestampResetDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TimestampResetDigitalInputTerminal()))
                {
                    Construct_TimestampResetDigitalInputTerminal();
                }
                if ((*Value()).hasMember(ItemName_TimestampResetDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TimestampResetDigitalInputTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TimestampResetDigitalInputTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TimestampResetDigitalInputTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TimestampResetDigitalInputTerminal(void) const
        {
            return (*Value())[ItemName_TimestampResetDigitalInputTerminal()];
        }
        bool Get_TimestampResetDigitalInputTerminal(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TimestampResetDigitalInputTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_TimestampResetDigitalInputTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ForceEquidistantData (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_ForceEquidistantData(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ForceEquidistantData()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ForceEquidistantData()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ForceEquidistantData(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ForceEquidistantData()))
                {
                    Construct_ForceEquidistantData();
                }
                if ((*Value()).hasMember(ItemName_ForceEquidistantData()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ForceEquidistantData()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ForceEquidistantData(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ForceEquidistantData()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_ForceEquidistantData(void) const
        {
            return (*Value())[ItemName_ForceEquidistantData()];
        }
        bool Get_ForceEquidistantData(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ForceEquidistantData()]).valid())
                {
                    GetValue = (*Value())[ItemName_ForceEquidistantData()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InitStateType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_InitStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitStateType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InitStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitStateType()))
                {
                    Construct_InitStateType();
                }
                if ((*Value()).hasMember(ItemName_InitStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitStateType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InitStateType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_InitStateType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_InitStateType(void) const
        {
            return (*Value())[ItemName_InitStateType()];
        }
        bool Get_InitStateType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InitStateType()]).valid())
                {
                    GetValue = (*Value())[ItemName_InitStateType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Base


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Process
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Process : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SynchronizationSourceType(void)
        {
            static std::string str("SynchronizationSourceType");
            return str;
        }
    public:
        static std::string const& ItemName_SynchronizationDigitalInputTerminal(void)
        {
            static std::string str("SynchronizationDigitalInputTerminal");
            return str;
        }
    public:
        static std::string const& ItemName_SynchronizationDigitalInputSlopeType(void)
        {
            static std::string str("SynchronizationDigitalInputSlopeType");
            return str;
        }
    public:
        static std::string const& ItemName_SynchronizationDigitalInputDebouncingCount(void)
        {
            static std::string str("SynchronizationDigitalInputDebouncingCount");
            return str;
        }
    public:
        static std::string const& ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(void)
        {
            static std::string str("SynchronizationDigitalInputMinimumTimeBetweenTwoPulses");
            return str;
        }
    public:
        static std::string const& ItemName_CycleFrequencyDivider(void)
        {
            static std::string str("CycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_Legend0(void)
        {
            static std::string str("Legend0");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Process");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.603");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Process(void)
    {
        try
        {
            Construct_SynchronizationSourceType();
            Construct_SynchronizationDigitalInputTerminal();
            Construct_SynchronizationDigitalInputSlopeType();
            Construct_SynchronizationDigitalInputDebouncingCount();
            Construct_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses();
            Construct_CycleFrequencyDivider();
            Construct_Legend0();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Process(const CType_Config_StreamProcessor_DataBuffer_Process& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Process(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SynchronizationSourceType();
            Construct_SynchronizationDigitalInputTerminal();
            Construct_SynchronizationDigitalInputSlopeType();
            Construct_SynchronizationDigitalInputDebouncingCount();
            Construct_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses();
            Construct_CycleFrequencyDivider();
            Construct_Legend0();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Process(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SynchronizationSourceType();
            Initialize_SynchronizationDigitalInputTerminal();
            Initialize_SynchronizationDigitalInputSlopeType();
            Initialize_SynchronizationDigitalInputDebouncingCount();
            Initialize_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses();
            Initialize_CycleFrequencyDivider();
            Initialize_Legend0();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SynchronizationSourceType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SynchronizationSourceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationSourceType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationSourceType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationSourceType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationSourceType()))
                {
                    Construct_SynchronizationSourceType();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationSourceType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationSourceType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationSourceType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationSourceType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SynchronizationSourceType(void) const
        {
            return (*Value())[ItemName_SynchronizationSourceType()];
        }
        bool Get_SynchronizationSourceType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationSourceType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationSourceType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SynchronizationDigitalInputTerminal (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SynchronizationDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputTerminal()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationDigitalInputTerminal(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputTerminal()))
                {
                    Construct_SynchronizationDigitalInputTerminal();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationDigitalInputTerminal()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputTerminal()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationDigitalInputTerminal(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationDigitalInputTerminal()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SynchronizationDigitalInputTerminal(void) const
        {
            return (*Value())[ItemName_SynchronizationDigitalInputTerminal()];
        }
        bool Get_SynchronizationDigitalInputTerminal(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationDigitalInputTerminal()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationDigitalInputTerminal()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SynchronizationDigitalInputSlopeType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SynchronizationDigitalInputSlopeType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputSlopeType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputSlopeType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationDigitalInputSlopeType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputSlopeType()))
                {
                    Construct_SynchronizationDigitalInputSlopeType();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationDigitalInputSlopeType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputSlopeType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationDigitalInputSlopeType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationDigitalInputSlopeType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SynchronizationDigitalInputSlopeType(void) const
        {
            return (*Value())[ItemName_SynchronizationDigitalInputSlopeType()];
        }
        bool Get_SynchronizationDigitalInputSlopeType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationDigitalInputSlopeType()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationDigitalInputSlopeType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SynchronizationDigitalInputDebouncingCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_SynchronizationDigitalInputDebouncingCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputDebouncingCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationDigitalInputDebouncingCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputDebouncingCount()))
                {
                    Construct_SynchronizationDigitalInputDebouncingCount();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationDigitalInputDebouncingCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationDigitalInputDebouncingCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_SynchronizationDigitalInputDebouncingCount(void) const
        {
            return (*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()];
        }
        bool Get_SynchronizationDigitalInputDebouncingCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationDigitalInputDebouncingCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SynchronizationDigitalInputMinimumTimeBetweenTwoPulses (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()))
                {
                    Construct_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(void) const
        {
            return (*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()];
        }
        bool Get_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationDigitalInputMinimumTimeBetweenTwoPulses()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    Construct_CycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_CycleFrequencyDivider()];
        }
        bool Get_CycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Legend0 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    Construct_Legend0();
                }
                if ((*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Legend0(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Legend0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Legend0(void) const
        {
            return (*Value())[ItemName_Legend0()];
        }
        bool Get_Legend0(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Legend0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Legend0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Process


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_VoltageVariable(void)
        {
            static std::string str("VoltageVariable");
            return str;
        }
    public:
        static std::string const& ItemName_CurrentVariable(void)
        {
            static std::string str("CurrentVariable");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.621");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase(void)
    {
        try
        {
            Construct_Enabled();
            Construct_VoltageVariable();
            Construct_CurrentVariable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_VoltageVariable();
            Construct_CurrentVariable();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_VoltageVariable();
            Initialize_CurrentVariable();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VoltageVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_VoltageVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VoltageVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_VoltageVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VoltageVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VoltageVariable()))
                {
                    Construct_VoltageVariable();
                }
                if ((*Value()).hasMember(ItemName_VoltageVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_VoltageVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VoltageVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_VoltageVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_VoltageVariable(void) const
        {
            return (*Value())[ItemName_VoltageVariable()];
        }
        bool Get_VoltageVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VoltageVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_VoltageVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CurrentVariable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CurrentVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CurrentVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CurrentVariable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CurrentVariable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CurrentVariable()))
                {
                    Construct_CurrentVariable();
                }
                if ((*Value()).hasMember(ItemName_CurrentVariable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CurrentVariable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CurrentVariable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CurrentVariable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CurrentVariable(void) const
        {
            return (*Value())[ItemName_CurrentVariable()];
        }
        bool Get_CurrentVariable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CurrentVariable()]).valid())
                {
                    GetValue = (*Value())[ItemName_CurrentVariable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Phase0(void)
        {
            static std::string str("Phase0");
            return str;
        }
    public:
        static std::string const& ItemName_Phase1(void)
        {
            static std::string str("Phase1");
            return str;
        }
    public:
        static std::string const& ItemName_Phase2(void)
        {
            static std::string str("Phase2");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.622");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer(void)
    {
        try
        {
            Construct_Phase0();
            Construct_Phase1();
            Construct_Phase2();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Phase0();
            Construct_Phase1();
            Construct_Phase2();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Phase0();
            Initialize_Phase1();
            Initialize_Phase2();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Phase0 (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase")
    protected:
        void Construct_Phase0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase0()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Phase0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase0()))
                {
                    Construct_Phase0();
                }
                if ((*Value()).hasMember(ItemName_Phase0()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Phase0(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& SetValue)
        {
            try
            {
                (*Value())[ItemName_Phase0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase Get_Phase0(void) const
        {
            return (*Value())[ItemName_Phase0()];
        }
        bool Get_Phase0(CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Phase0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Phase0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Phase1 (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase")
    protected:
        void Construct_Phase1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase1()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Phase1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase1()))
                {
                    Construct_Phase1();
                }
                if ((*Value()).hasMember(ItemName_Phase1()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Phase1(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& SetValue)
        {
            try
            {
                (*Value())[ItemName_Phase1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase Get_Phase1(void) const
        {
            return (*Value())[ItemName_Phase1()];
        }
        bool Get_Phase1(CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Phase1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Phase1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Phase2 (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase")
    protected:
        void Construct_Phase2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase2()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Phase2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Phase2()))
                {
                    Construct_Phase2();
                }
                if ((*Value()).hasMember(ItemName_Phase2()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase InitValue;
                    (*Value())[ItemName_Phase2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Phase2(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& SetValue)
        {
            try
            {
                (*Value())[ItemName_Phase2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase Get_Phase2(void) const
        {
            return (*Value())[ItemName_Phase2()];
        }
        bool Get_Phase2(CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer_Phase& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Phase2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Phase2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_PowerAnalyzer(void)
        {
            static std::string str("PowerAnalyzer");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_PostProcess_Additional");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.623");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional(void)
    {
        try
        {
            Construct_Type();
            Construct_PowerAnalyzer();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_PowerAnalyzer();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_PowerAnalyzer();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PowerAnalyzer (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer")
    protected:
        void Construct_PowerAnalyzer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PowerAnalyzer()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer InitValue;
                    (*Value())[ItemName_PowerAnalyzer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PowerAnalyzer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PowerAnalyzer()))
                {
                    Construct_PowerAnalyzer();
                }
                if ((*Value()).hasMember(ItemName_PowerAnalyzer()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer InitValue;
                    (*Value())[ItemName_PowerAnalyzer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PowerAnalyzer(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer& SetValue)
        {
            try
            {
                (*Value())[ItemName_PowerAnalyzer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer Get_PowerAnalyzer(void) const
        {
            return (*Value())[ItemName_PowerAnalyzer()];
        }
        bool Get_PowerAnalyzer(CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional_PowerAnalyzer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PowerAnalyzer()]).valid())
                {
                    GetValue = (*Value())[ItemName_PowerAnalyzer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_PostProcess
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_PostProcess : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_PreCycleFrequencyDivider(void)
        {
            static std::string str("PreCycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_CycleFrequencyDivider(void)
        {
            static std::string str("CycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_PostProcess");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.604");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_PostProcess(void)
    {
        try
        {
            Construct_StreamProcessor();
            Construct_PreCycleFrequencyDivider();
            Construct_CycleFrequencyDivider();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_PostProcess(const CType_Config_StreamProcessor_DataBuffer_PostProcess& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_PostProcess(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StreamProcessor();
            Construct_PreCycleFrequencyDivider();
            Construct_CycleFrequencyDivider();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_PostProcess(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StreamProcessor();
            Initialize_PreCycleFrequencyDivider();
            Initialize_CycleFrequencyDivider();
            Initialize_Additional();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PreCycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_PreCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PreCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PreCycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PreCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PreCycleFrequencyDivider()))
                {
                    Construct_PreCycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_PreCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_PreCycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PreCycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_PreCycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_PreCycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_PreCycleFrequencyDivider()];
        }
        bool Get_PreCycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PreCycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_PreCycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    Construct_CycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_CycleFrequencyDivider()];
        }
        bool Get_CycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_StreamProcessor_DataBuffer_PostProcess_Additional& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_PostProcess


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_System
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_System : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_AccessType(void)
        {
            static std::string str("AccessType");
            return str;
        }
    public:
        static std::string const& ItemName_Controller(void)
        {
            static std::string str("Controller");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_EnableTransferCompleteFilesOnly(void)
        {
            static std::string str("EnableTransferCompleteFilesOnly");
            return str;
        }
    public:
        static std::string const& ItemName_EnableEraseFromSourceAfterwards(void)
        {
            static std::string str("EnableEraseFromSourceAfterwards");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_System");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.605");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_System(void)
    {
        try
        {
            Construct_AccessType();
            Construct_Controller();
            Construct_StreamProcessor();
            Construct_EnableTransferCompleteFilesOnly();
            Construct_EnableEraseFromSourceAfterwards();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_System(const CType_Config_StreamProcessor_DataBuffer_System& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_System(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_AccessType();
            Construct_Controller();
            Construct_StreamProcessor();
            Construct_EnableTransferCompleteFilesOnly();
            Construct_EnableEraseFromSourceAfterwards();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_System(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_AccessType();
            Initialize_Controller();
            Initialize_StreamProcessor();
            Initialize_EnableTransferCompleteFilesOnly();
            Initialize_EnableEraseFromSourceAfterwards();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item AccessType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AccessType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AccessType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AccessType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessType()))
                {
                    Construct_AccessType();
                }
                if ((*Value()).hasMember(ItemName_AccessType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AccessType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AccessType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AccessType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AccessType(void) const
        {
            return (*Value())[ItemName_AccessType()];
        }
        bool Get_AccessType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AccessType()]).valid())
                {
                    GetValue = (*Value())[ItemName_AccessType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Controller (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Controller(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Controller()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Controller()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Controller(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Controller()))
                {
                    Construct_Controller();
                }
                if ((*Value()).hasMember(ItemName_Controller()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Controller()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Controller(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Controller()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Controller(void) const
        {
            return (*Value())[ItemName_Controller()];
        }
        bool Get_Controller(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Controller()]).valid())
                {
                    GetValue = (*Value())[ItemName_Controller()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableTransferCompleteFilesOnly (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableTransferCompleteFilesOnly(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableTransferCompleteFilesOnly()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableTransferCompleteFilesOnly()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableTransferCompleteFilesOnly(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableTransferCompleteFilesOnly()))
                {
                    Construct_EnableTransferCompleteFilesOnly();
                }
                if ((*Value()).hasMember(ItemName_EnableTransferCompleteFilesOnly()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableTransferCompleteFilesOnly()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableTransferCompleteFilesOnly(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableTransferCompleteFilesOnly()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableTransferCompleteFilesOnly(void) const
        {
            return (*Value())[ItemName_EnableTransferCompleteFilesOnly()];
        }
        bool Get_EnableTransferCompleteFilesOnly(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableTransferCompleteFilesOnly()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableTransferCompleteFilesOnly()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableEraseFromSourceAfterwards (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableEraseFromSourceAfterwards(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEraseFromSourceAfterwards()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableEraseFromSourceAfterwards()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableEraseFromSourceAfterwards(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableEraseFromSourceAfterwards()))
                {
                    Construct_EnableEraseFromSourceAfterwards();
                }
                if ((*Value()).hasMember(ItemName_EnableEraseFromSourceAfterwards()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableEraseFromSourceAfterwards()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableEraseFromSourceAfterwards(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableEraseFromSourceAfterwards()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableEraseFromSourceAfterwards(void) const
        {
            return (*Value())[ItemName_EnableEraseFromSourceAfterwards()];
        }
        bool Get_EnableEraseFromSourceAfterwards(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableEraseFromSourceAfterwards()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableEraseFromSourceAfterwards()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_System


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ServerAddress(void)
        {
            static std::string str("ServerAddress");
            return str;
        }
    public:
        static std::string const& ItemName_ServerPort(void)
        {
            static std::string str("ServerPort");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAccessThemeType(void)
        {
            static std::string str("ServerAccessThemeType");
            return str;
        }
    public:
        static std::string const& ItemName_ServerAccessThemeIndex(void)
        {
            static std::string str("ServerAccessThemeIndex");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.607");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort(void)
    {
        try
        {
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_ServerAccessThemeType();
            Construct_ServerAccessThemeIndex();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ServerAddress();
            Construct_ServerPort();
            Construct_ServerAccessThemeType();
            Construct_ServerAccessThemeIndex();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ServerAddress();
            Initialize_ServerPort();
            Initialize_ServerAccessThemeType();
            Initialize_ServerAccessThemeIndex();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ServerAddress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAddress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAddress()))
                {
                    Construct_ServerAddress();
                }
                if ((*Value()).hasMember(ItemName_ServerAddress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_ServerAddress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAddress(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAddress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_ServerAddress(void) const
        {
            return (*Value())[ItemName_ServerAddress()];
        }
        bool Get_ServerAddress(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAddress()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAddress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerPort (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerPort()))
                {
                    Construct_ServerPort();
                }
                if ((*Value()).hasMember(ItemName_ServerPort()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerPort(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ServerPort(void) const
        {
            return (*Value())[ItemName_ServerPort()];
        }
        bool Get_ServerPort(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAccessThemeType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ServerAccessThemeType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAccessThemeType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ServerAccessThemeType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAccessThemeType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAccessThemeType()))
                {
                    Construct_ServerAccessThemeType();
                }
                if ((*Value()).hasMember(ItemName_ServerAccessThemeType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ServerAccessThemeType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAccessThemeType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAccessThemeType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ServerAccessThemeType(void) const
        {
            return (*Value())[ItemName_ServerAccessThemeType()];
        }
        bool Get_ServerAccessThemeType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAccessThemeType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAccessThemeType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ServerAccessThemeIndex (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ServerAccessThemeIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAccessThemeIndex()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerAccessThemeIndex()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ServerAccessThemeIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ServerAccessThemeIndex()))
                {
                    Construct_ServerAccessThemeIndex();
                }
                if ((*Value()).hasMember(ItemName_ServerAccessThemeIndex()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ServerAccessThemeIndex()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ServerAccessThemeIndex(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ServerAccessThemeIndex()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ServerAccessThemeIndex(void) const
        {
            return (*Value())[ItemName_ServerAccessThemeIndex()];
        }
        bool Get_ServerAccessThemeIndex(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ServerAccessThemeIndex()]).valid())
                {
                    GetValue = (*Value())[ItemName_ServerAccessThemeIndex()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_TypeDetails(void)
        {
            static std::string str("TypeDetails");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceSerialNumbers(void)
        {
            static std::string str("DeviceSerialNumbers");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.619");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost(void)
    {
        try
        {
            Construct_Port();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceSerialNumbers();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceSerialNumbers();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Type();
            Initialize_TypeDetails();
            Initialize_DeviceSerialNumbers();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_DeviceType")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_DeviceType Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeDetails (Type: "CType_Info_DeviceTypeDetails")
    protected:
        void Construct_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    Construct_TypeDetails();
                }
                if ((*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeDetails(const CType_Info_DeviceTypeDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_DeviceTypeDetails Get_TypeDetails(void) const
        {
            return (*Value())[ItemName_TypeDetails()];
        }
        bool Get_TypeDetails(CType_Info_DeviceTypeDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceSerialNumbers (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_DeviceSerialNumbers(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceSerialNumbers()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_DeviceSerialNumbers()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceSerialNumbers(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceSerialNumbers()))
                {
                    Construct_DeviceSerialNumbers();
                }
                if ((*Value()).hasMember(ItemName_DeviceSerialNumbers()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_DeviceSerialNumbers()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceSerialNumbers(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceSerialNumbers()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_DeviceSerialNumbers(void) const
        {
            return (*Value())[ItemName_DeviceSerialNumbers()];
        }
        bool Get_DeviceSerialNumbers(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceSerialNumbers()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeviceSerialNumbers()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Miscellaneous
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Miscellaneous : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_AccessType(void)
        {
            static std::string str("AccessType");
            return str;
        }
    public:
        static std::string const& ItemName_SourceCycleFrequencyList(void)
        {
            static std::string str("SourceCycleFrequencyList");
            return str;
        }
    public:
        static std::string const& ItemName_SourceCycleFrequencyRange(void)
        {
            static std::string str("SourceCycleFrequencyRange");
            return str;
        }
    public:
        static std::string const& ItemName_HighSpeedPort(void)
        {
            static std::string str("HighSpeedPort");
            return str;
        }
    public:
        static std::string const& ItemName_Boost(void)
        {
            static std::string str("Boost");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Miscellaneous");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.606");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous(void)
    {
        try
        {
            Construct_AccessType();
            Construct_SourceCycleFrequencyList();
            Construct_SourceCycleFrequencyRange();
            Construct_HighSpeedPort();
            Construct_Boost();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Miscellaneous(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_AccessType();
            Construct_SourceCycleFrequencyList();
            Construct_SourceCycleFrequencyRange();
            Construct_HighSpeedPort();
            Construct_Boost();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Miscellaneous(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_AccessType();
            Initialize_SourceCycleFrequencyList();
            Initialize_SourceCycleFrequencyRange();
            Initialize_HighSpeedPort();
            Initialize_Boost();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item AccessType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_AccessType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AccessType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AccessType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AccessType()))
                {
                    Construct_AccessType();
                }
                if ((*Value()).hasMember(ItemName_AccessType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_AccessType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AccessType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_AccessType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_AccessType(void) const
        {
            return (*Value())[ItemName_AccessType()];
        }
        bool Get_AccessType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AccessType()]).valid())
                {
                    GetValue = (*Value())[ItemName_AccessType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SourceCycleFrequencyList (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SourceCycleFrequencyList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceCycleFrequencyList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SourceCycleFrequencyList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceCycleFrequencyList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceCycleFrequencyList()))
                {
                    Construct_SourceCycleFrequencyList();
                }
                if ((*Value()).hasMember(ItemName_SourceCycleFrequencyList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SourceCycleFrequencyList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceCycleFrequencyList(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceCycleFrequencyList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SourceCycleFrequencyList(void) const
        {
            return (*Value())[ItemName_SourceCycleFrequencyList()];
        }
        bool Get_SourceCycleFrequencyList(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceCycleFrequencyList()]).valid())
                {
                    GetValue = (*Value())[ItemName_SourceCycleFrequencyList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SourceCycleFrequencyRange (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SourceCycleFrequencyRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceCycleFrequencyRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SourceCycleFrequencyRange()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceCycleFrequencyRange(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceCycleFrequencyRange()))
                {
                    Construct_SourceCycleFrequencyRange();
                }
                if ((*Value()).hasMember(ItemName_SourceCycleFrequencyRange()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SourceCycleFrequencyRange()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceCycleFrequencyRange(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceCycleFrequencyRange()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SourceCycleFrequencyRange(void) const
        {
            return (*Value())[ItemName_SourceCycleFrequencyRange()];
        }
        bool Get_SourceCycleFrequencyRange(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceCycleFrequencyRange()]).valid())
                {
                    GetValue = (*Value())[ItemName_SourceCycleFrequencyRange()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HighSpeedPort (Type: "CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort")
    protected:
        void Construct_HighSpeedPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HighSpeedPort()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort InitValue;
                    (*Value())[ItemName_HighSpeedPort()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HighSpeedPort(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HighSpeedPort()))
                {
                    Construct_HighSpeedPort();
                }
                if ((*Value()).hasMember(ItemName_HighSpeedPort()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort InitValue;
                    (*Value())[ItemName_HighSpeedPort()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HighSpeedPort(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort& SetValue)
        {
            try
            {
                (*Value())[ItemName_HighSpeedPort()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort Get_HighSpeedPort(void) const
        {
            return (*Value())[ItemName_HighSpeedPort()];
        }
        bool Get_HighSpeedPort(CType_Config_StreamProcessor_DataBuffer_Miscellaneous_HighSpeedPort& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HighSpeedPort()]).valid())
                {
                    GetValue = (*Value())[ItemName_HighSpeedPort()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Boost (Type: "CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost")
    protected:
        void Construct_Boost(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Boost()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost InitValue;
                    (*Value())[ItemName_Boost()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Boost(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Boost()))
                {
                    Construct_Boost();
                }
                if ((*Value()).hasMember(ItemName_Boost()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost InitValue;
                    (*Value())[ItemName_Boost()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Boost(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost& SetValue)
        {
            try
            {
                (*Value())[ItemName_Boost()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost Get_Boost(void) const
        {
            return (*Value())[ItemName_Boost()];
        }
        bool Get_Boost(CType_Config_StreamProcessor_DataBuffer_Miscellaneous_Boost& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Boost()]).valid())
                {
                    GetValue = (*Value())[ItemName_Boost()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Miscellaneous


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer_Merger
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer_Merger : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StreamProcessorCount(void)
        {
            static std::string str("StreamProcessorCount");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor0(void)
        {
            static std::string str("StreamProcessor0");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor1(void)
        {
            static std::string str("StreamProcessor1");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor2(void)
        {
            static std::string str("StreamProcessor2");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor3(void)
        {
            static std::string str("StreamProcessor3");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor4(void)
        {
            static std::string str("StreamProcessor4");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor5(void)
        {
            static std::string str("StreamProcessor5");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor6(void)
        {
            static std::string str("StreamProcessor6");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor7(void)
        {
            static std::string str("StreamProcessor7");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor8(void)
        {
            static std::string str("StreamProcessor8");
            return str;
        }
    public:
        static std::string const& ItemName_StreamProcessor9(void)
        {
            static std::string str("StreamProcessor9");
            return str;
        }
    public:
        static std::string const& ItemName_CommonCycleFrequency(void)
        {
            static std::string str("CommonCycleFrequency");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer_Merger");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.608");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer_Merger(void)
    {
        try
        {
            Construct_StreamProcessorCount();
            Construct_StreamProcessor0();
            Construct_StreamProcessor1();
            Construct_StreamProcessor2();
            Construct_StreamProcessor3();
            Construct_StreamProcessor4();
            Construct_StreamProcessor5();
            Construct_StreamProcessor6();
            Construct_StreamProcessor7();
            Construct_StreamProcessor8();
            Construct_StreamProcessor9();
            Construct_CommonCycleFrequency();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer_Merger(const CType_Config_StreamProcessor_DataBuffer_Merger& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer_Merger(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StreamProcessorCount();
            Construct_StreamProcessor0();
            Construct_StreamProcessor1();
            Construct_StreamProcessor2();
            Construct_StreamProcessor3();
            Construct_StreamProcessor4();
            Construct_StreamProcessor5();
            Construct_StreamProcessor6();
            Construct_StreamProcessor7();
            Construct_StreamProcessor8();
            Construct_StreamProcessor9();
            Construct_CommonCycleFrequency();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer_Merger(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StreamProcessorCount();
            Initialize_StreamProcessor0();
            Initialize_StreamProcessor1();
            Initialize_StreamProcessor2();
            Initialize_StreamProcessor3();
            Initialize_StreamProcessor4();
            Initialize_StreamProcessor5();
            Initialize_StreamProcessor6();
            Initialize_StreamProcessor7();
            Initialize_StreamProcessor8();
            Initialize_StreamProcessor9();
            Initialize_CommonCycleFrequency();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StreamProcessorCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_StreamProcessorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_StreamProcessorCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessorCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessorCount()))
                {
                    Construct_StreamProcessorCount();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessorCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_StreamProcessorCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessorCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessorCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_StreamProcessorCount(void) const
        {
            return (*Value())[ItemName_StreamProcessorCount()];
        }
        bool Get_StreamProcessorCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessorCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessorCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor0()))
                {
                    Construct_StreamProcessor0();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor0(void) const
        {
            return (*Value())[ItemName_StreamProcessor0()];
        }
        bool Get_StreamProcessor0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor0()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor1()))
                {
                    Construct_StreamProcessor1();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor1(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor1(void) const
        {
            return (*Value())[ItemName_StreamProcessor1()];
        }
        bool Get_StreamProcessor1(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor1()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor2 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor2()))
                {
                    Construct_StreamProcessor2();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor2(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor2(void) const
        {
            return (*Value())[ItemName_StreamProcessor2()];
        }
        bool Get_StreamProcessor2(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor2()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor3 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor3()))
                {
                    Construct_StreamProcessor3();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor3(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor3(void) const
        {
            return (*Value())[ItemName_StreamProcessor3()];
        }
        bool Get_StreamProcessor3(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor3()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor4 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor4()))
                {
                    Construct_StreamProcessor4();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor4(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor4(void) const
        {
            return (*Value())[ItemName_StreamProcessor4()];
        }
        bool Get_StreamProcessor4(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor4()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor5 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor5()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor5()))
                {
                    Construct_StreamProcessor5();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor5()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor5(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor5(void) const
        {
            return (*Value())[ItemName_StreamProcessor5()];
        }
        bool Get_StreamProcessor5(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor5()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor6 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor6()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor6()))
                {
                    Construct_StreamProcessor6();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor6()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor6(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor6(void) const
        {
            return (*Value())[ItemName_StreamProcessor6()];
        }
        bool Get_StreamProcessor6(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor6()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor7 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor7()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor7()))
                {
                    Construct_StreamProcessor7();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor7()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor7(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor7(void) const
        {
            return (*Value())[ItemName_StreamProcessor7()];
        }
        bool Get_StreamProcessor7(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor7()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor8 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor8()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor8()))
                {
                    Construct_StreamProcessor8();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor8()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor8(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor8(void) const
        {
            return (*Value())[ItemName_StreamProcessor8()];
        }
        bool Get_StreamProcessor8(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor8()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StreamProcessor9 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor9()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor9()))
                {
                    Construct_StreamProcessor9();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor9()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor9(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor9(void) const
        {
            return (*Value())[ItemName_StreamProcessor9()];
        }
        bool Get_StreamProcessor9(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor9()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CommonCycleFrequency (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CommonCycleFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommonCycleFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CommonCycleFrequency()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CommonCycleFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommonCycleFrequency()))
                {
                    Construct_CommonCycleFrequency();
                }
                if ((*Value()).hasMember(ItemName_CommonCycleFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CommonCycleFrequency()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CommonCycleFrequency(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CommonCycleFrequency()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CommonCycleFrequency(void) const
        {
            return (*Value())[ItemName_CommonCycleFrequency()];
        }
        bool Get_CommonCycleFrequency(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CommonCycleFrequency()]).valid())
                {
                    GetValue = (*Value())[ItemName_CommonCycleFrequency()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer_Merger


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataBuffer
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataBuffer : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Base(void)
        {
            static std::string str("Base");
            return str;
        }
    public:
        static std::string const& ItemName_Process(void)
        {
            static std::string str("Process");
            return str;
        }
    public:
        static std::string const& ItemName_PostProcess(void)
        {
            static std::string str("PostProcess");
            return str;
        }
    public:
        static std::string const& ItemName_System(void)
        {
            static std::string str("System");
            return str;
        }
    public:
        static std::string const& ItemName_Miscellaneous(void)
        {
            static std::string str("Miscellaneous");
            return str;
        }
    public:
        static std::string const& ItemName_Merger(void)
        {
            static std::string str("Merger");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataBuffer");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.609");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataBuffer(void)
    {
        try
        {
            Construct_Base();
            Construct_Process();
            Construct_PostProcess();
            Construct_System();
            Construct_Miscellaneous();
            Construct_Merger();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataBuffer(const CType_Config_StreamProcessor_DataBuffer& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataBuffer(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Base();
            Construct_Process();
            Construct_PostProcess();
            Construct_System();
            Construct_Miscellaneous();
            Construct_Merger();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataBuffer(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Base();
            Initialize_Process();
            Initialize_PostProcess();
            Initialize_System();
            Initialize_Miscellaneous();
            Initialize_Merger();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Base (Type: "CType_Config_StreamProcessor_DataBuffer_Base")
    protected:
        void Construct_Base(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Base()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Base InitValue;
                    (*Value())[ItemName_Base()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Base(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Base()))
                {
                    Construct_Base();
                }
                if ((*Value()).hasMember(ItemName_Base()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Base InitValue;
                    (*Value())[ItemName_Base()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Base(const CType_Config_StreamProcessor_DataBuffer_Base& SetValue)
        {
            try
            {
                (*Value())[ItemName_Base()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Base Get_Base(void) const
        {
            return (*Value())[ItemName_Base()];
        }
        bool Get_Base(CType_Config_StreamProcessor_DataBuffer_Base& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Base()]).valid())
                {
                    GetValue = (*Value())[ItemName_Base()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Process (Type: "CType_Config_StreamProcessor_DataBuffer_Process")
    protected:
        void Construct_Process(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Process()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Process InitValue;
                    (*Value())[ItemName_Process()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Process(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Process()))
                {
                    Construct_Process();
                }
                if ((*Value()).hasMember(ItemName_Process()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Process InitValue;
                    (*Value())[ItemName_Process()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Process(const CType_Config_StreamProcessor_DataBuffer_Process& SetValue)
        {
            try
            {
                (*Value())[ItemName_Process()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Process Get_Process(void) const
        {
            return (*Value())[ItemName_Process()];
        }
        bool Get_Process(CType_Config_StreamProcessor_DataBuffer_Process& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Process()]).valid())
                {
                    GetValue = (*Value())[ItemName_Process()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PostProcess (Type: "CType_Config_StreamProcessor_DataBuffer_PostProcess")
    protected:
        void Construct_PostProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PostProcess()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess InitValue;
                    (*Value())[ItemName_PostProcess()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PostProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PostProcess()))
                {
                    Construct_PostProcess();
                }
                if ((*Value()).hasMember(ItemName_PostProcess()))
                {
                    CType_Config_StreamProcessor_DataBuffer_PostProcess InitValue;
                    (*Value())[ItemName_PostProcess()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PostProcess(const CType_Config_StreamProcessor_DataBuffer_PostProcess& SetValue)
        {
            try
            {
                (*Value())[ItemName_PostProcess()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_PostProcess Get_PostProcess(void) const
        {
            return (*Value())[ItemName_PostProcess()];
        }
        bool Get_PostProcess(CType_Config_StreamProcessor_DataBuffer_PostProcess& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PostProcess()]).valid())
                {
                    GetValue = (*Value())[ItemName_PostProcess()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item System (Type: "CType_Config_StreamProcessor_DataBuffer_System")
    protected:
        void Construct_System(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_System()))
                {
                    CType_Config_StreamProcessor_DataBuffer_System InitValue;
                    (*Value())[ItemName_System()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_System(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_System()))
                {
                    Construct_System();
                }
                if ((*Value()).hasMember(ItemName_System()))
                {
                    CType_Config_StreamProcessor_DataBuffer_System InitValue;
                    (*Value())[ItemName_System()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_System(const CType_Config_StreamProcessor_DataBuffer_System& SetValue)
        {
            try
            {
                (*Value())[ItemName_System()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_System Get_System(void) const
        {
            return (*Value())[ItemName_System()];
        }
        bool Get_System(CType_Config_StreamProcessor_DataBuffer_System& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_System()]).valid())
                {
                    GetValue = (*Value())[ItemName_System()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Miscellaneous (Type: "CType_Config_StreamProcessor_DataBuffer_Miscellaneous")
    protected:
        void Construct_Miscellaneous(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Miscellaneous()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous InitValue;
                    (*Value())[ItemName_Miscellaneous()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Miscellaneous(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Miscellaneous()))
                {
                    Construct_Miscellaneous();
                }
                if ((*Value()).hasMember(ItemName_Miscellaneous()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Miscellaneous InitValue;
                    (*Value())[ItemName_Miscellaneous()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Miscellaneous(const CType_Config_StreamProcessor_DataBuffer_Miscellaneous& SetValue)
        {
            try
            {
                (*Value())[ItemName_Miscellaneous()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Miscellaneous Get_Miscellaneous(void) const
        {
            return (*Value())[ItemName_Miscellaneous()];
        }
        bool Get_Miscellaneous(CType_Config_StreamProcessor_DataBuffer_Miscellaneous& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Miscellaneous()]).valid())
                {
                    GetValue = (*Value())[ItemName_Miscellaneous()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Merger (Type: "CType_Config_StreamProcessor_DataBuffer_Merger")
    protected:
        void Construct_Merger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Merger()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Merger InitValue;
                    (*Value())[ItemName_Merger()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Merger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Merger()))
                {
                    Construct_Merger();
                }
                if ((*Value()).hasMember(ItemName_Merger()))
                {
                    CType_Config_StreamProcessor_DataBuffer_Merger InitValue;
                    (*Value())[ItemName_Merger()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Merger(const CType_Config_StreamProcessor_DataBuffer_Merger& SetValue)
        {
            try
            {
                (*Value())[ItemName_Merger()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer_Merger Get_Merger(void) const
        {
            return (*Value())[ItemName_Merger()];
        }
        bool Get_Merger(CType_Config_StreamProcessor_DataBuffer_Merger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Merger()]).valid())
                {
                    GetValue = (*Value())[ItemName_Merger()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataBuffer


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Base
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Base : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_HandlingInterval(void)
        {
            static std::string str("HandlingInterval");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_InitStateType(void)
        {
            static std::string str("InitStateType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Base");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.610");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Base(void)
    {
        try
        {
            Construct_HandlingInterval();
            Construct_WatchdogTimeout();
            Construct_InitStateType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Base(const CType_Config_StreamProcessor_DataLogger_Base& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Base(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_HandlingInterval();
            Construct_WatchdogTimeout();
            Construct_InitStateType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Base(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_HandlingInterval();
            Initialize_WatchdogTimeout();
            Initialize_InitStateType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item HandlingInterval (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_HandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandlingInterval()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HandlingInterval(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    Construct_HandlingInterval();
                }
                if ((*Value()).hasMember(ItemName_HandlingInterval()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_HandlingInterval()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HandlingInterval(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_HandlingInterval()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_HandlingInterval(void) const
        {
            return (*Value())[ItemName_HandlingInterval()];
        }
        bool Get_HandlingInterval(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HandlingInterval()]).valid())
                {
                    GetValue = (*Value())[ItemName_HandlingInterval()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InitStateType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_InitStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitStateType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InitStateType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InitStateType()))
                {
                    Construct_InitStateType();
                }
                if ((*Value()).hasMember(ItemName_InitStateType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_InitStateType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InitStateType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_InitStateType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_InitStateType(void) const
        {
            return (*Value())[ItemName_InitStateType()];
        }
        bool Get_InitStateType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InitStateType()]).valid())
                {
                    GetValue = (*Value())[ItemName_InitStateType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Base


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_Trigger
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_Trigger : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_Variable(void)
        {
            static std::string str("Variable");
            return str;
        }
    public:
        static std::string const& ItemName_ConditionType(void)
        {
            static std::string str("ConditionType");
            return str;
        }
    public:
        static std::string const& ItemName_ConditionValue(void)
        {
            static std::string str("ConditionValue");
            return str;
        }
    public:
        static std::string const& ItemName_AdditionalLength(void)
        {
            static std::string str("AdditionalLength");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_Trigger");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.611");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_Trigger(void)
    {
        try
        {
            Construct_Enabled();
            Construct_Variable();
            Construct_ConditionType();
            Construct_ConditionValue();
            Construct_AdditionalLength();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_Trigger(const CType_Config_StreamProcessor_DataLogger_Values_Trigger& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_Trigger(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_Variable();
            Construct_ConditionType();
            Construct_ConditionValue();
            Construct_AdditionalLength();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_Trigger(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_Variable();
            Initialize_ConditionType();
            Initialize_ConditionValue();
            Initialize_AdditionalLength();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Variable (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variable(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variable()))
                {
                    Construct_Variable();
                }
                if ((*Value()).hasMember(ItemName_Variable()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Variable()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variable(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variable()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Variable(void) const
        {
            return (*Value())[ItemName_Variable()];
        }
        bool Get_Variable(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variable()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variable()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConditionType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ConditionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ConditionType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConditionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionType()))
                {
                    Construct_ConditionType();
                }
                if ((*Value()).hasMember(ItemName_ConditionType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ConditionType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConditionType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConditionType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ConditionType(void) const
        {
            return (*Value())[ItemName_ConditionType()];
        }
        bool Get_ConditionType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConditionType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConditionType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ConditionValue (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_ConditionValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConditionValue()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ConditionValue(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ConditionValue()))
                {
                    Construct_ConditionValue();
                }
                if ((*Value()).hasMember(ItemName_ConditionValue()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_ConditionValue()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ConditionValue(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_ConditionValue()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_ConditionValue(void) const
        {
            return (*Value())[ItemName_ConditionValue()];
        }
        bool Get_ConditionValue(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ConditionValue()]).valid())
                {
                    GetValue = (*Value())[ItemName_ConditionValue()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AdditionalLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float")
    protected:
        void Construct_AdditionalLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AdditionalLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_AdditionalLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AdditionalLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AdditionalLength()))
                {
                    Construct_AdditionalLength();
                }
                if ((*Value()).hasMember(ItemName_AdditionalLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_AdditionalLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AdditionalLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AdditionalLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float Get_AdditionalLength(void) const
        {
            return (*Value())[ItemName_AdditionalLength()];
        }
        bool Get_AdditionalLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AdditionalLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_AdditionalLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_Trigger


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_Connection(void)
        {
            static std::string str("Connection");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_SendFTPClient");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.612");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient(void)
    {
        try
        {
            Construct_Enabled();
            Construct_Connection();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient(const CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_Connection();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_Connection();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Connection (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Connection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Connection()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Connection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Connection()))
                {
                    Construct_Connection();
                }
                if ((*Value()).hasMember(ItemName_Connection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Connection()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Connection(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Connection()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Connection(void) const
        {
            return (*Value())[ItemName_Connection()];
        }
        bool Get_Connection(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Connection()]).valid())
                {
                    GetValue = (*Value())[ItemName_Connection()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_SendMailClient
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_SendMailClient : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Enabled(void)
        {
            static std::string str("Enabled");
            return str;
        }
    public:
        static std::string const& ItemName_Address(void)
        {
            static std::string str("Address");
            return str;
        }
    public:
        static std::string const& ItemName_Subject(void)
        {
            static std::string str("Subject");
            return str;
        }
    public:
        static std::string const& ItemName_Body(void)
        {
            static std::string str("Body");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_SendMailClient");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.613");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_SendMailClient(void)
    {
        try
        {
            Construct_Enabled();
            Construct_Address();
            Construct_Subject();
            Construct_Body();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_SendMailClient(const CType_Config_StreamProcessor_DataLogger_Values_SendMailClient& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_SendMailClient(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Enabled();
            Construct_Address();
            Construct_Subject();
            Construct_Body();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_SendMailClient(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Enabled();
            Initialize_Address();
            Initialize_Subject();
            Initialize_Body();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Enabled (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Enabled(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Enabled()))
                {
                    Construct_Enabled();
                }
                if ((*Value()).hasMember(ItemName_Enabled()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Enabled()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Enabled(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Enabled()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Enabled(void) const
        {
            return (*Value())[ItemName_Enabled()];
        }
        bool Get_Enabled(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Enabled()]).valid())
                {
                    GetValue = (*Value())[ItemName_Enabled()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Address (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Address(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Address()))
                {
                    Construct_Address();
                }
                if ((*Value()).hasMember(ItemName_Address()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Address()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Address(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Address()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Address(void) const
        {
            return (*Value())[ItemName_Address()];
        }
        bool Get_Address(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Address()]).valid())
                {
                    GetValue = (*Value())[ItemName_Address()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Subject (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Subject(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Subject()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Subject()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Subject(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Subject()))
                {
                    Construct_Subject();
                }
                if ((*Value()).hasMember(ItemName_Subject()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Subject()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Subject(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Subject()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Subject(void) const
        {
            return (*Value())[ItemName_Subject()];
        }
        bool Get_Subject(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Subject()]).valid())
                {
                    GetValue = (*Value())[ItemName_Subject()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Body (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Body(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Body()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Body()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Body(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Body()))
                {
                    Construct_Body();
                }
                if ((*Value()).hasMember(ItemName_Body()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Body()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Body(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Body()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Body(void) const
        {
            return (*Value())[ItemName_Body()];
        }
        bool Get_Body(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Body()]).valid())
                {
                    GetValue = (*Value())[ItemName_Body()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_SendMailClient


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_EventBased
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_EventBased : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_EventTrigger(void)
        {
            static std::string str("EventTrigger");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_EventBased");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.614");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_EventBased(void)
    {
        try
        {
            Construct_EventTrigger();
            Construct_Length();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_EventBased(const CType_Config_StreamProcessor_DataLogger_Values_EventBased& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_EventBased(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_EventTrigger();
            Construct_Length();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_EventBased(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_EventTrigger();
            Initialize_Length();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item EventTrigger (Type: "CType_Config_StreamProcessor_DataLogger_Values_Trigger")
    protected:
        void Construct_EventTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_EventTrigger()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EventTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventTrigger()))
                {
                    Construct_EventTrigger();
                }
                if ((*Value()).hasMember(ItemName_EventTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_EventTrigger()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EventTrigger(const CType_Config_StreamProcessor_DataLogger_Values_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_EventTrigger()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Trigger Get_EventTrigger(void) const
        {
            return (*Value())[ItemName_EventTrigger()];
        }
        bool Get_EventTrigger(CType_Config_StreamProcessor_DataLogger_Values_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EventTrigger()]).valid())
                {
                    GetValue = (*Value())[ItemName_EventTrigger()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Length (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float")
    protected:
        void Construct_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_Length()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_Length()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float Get_Length(void) const
        {
            return (*Value())[ItemName_Length()];
        }
        bool Get_Length(GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (*Value())[ItemName_Length()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_EventBased


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_Triggered
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_Triggered : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StartTrigger(void)
        {
            static std::string str("StartTrigger");
            return str;
        }
    public:
        static std::string const& ItemName_StopTrigger(void)
        {
            static std::string str("StopTrigger");
            return str;
        }
    public:
        static std::string const& ItemName_Length(void)
        {
            static std::string str("Length");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_Triggered");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.615");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_Triggered(void)
    {
        try
        {
            Construct_StartTrigger();
            Construct_StopTrigger();
            Construct_Length();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_Triggered(const CType_Config_StreamProcessor_DataLogger_Values_Triggered& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_Triggered(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StartTrigger();
            Construct_StopTrigger();
            Construct_Length();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_Triggered(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StartTrigger();
            Initialize_StopTrigger();
            Initialize_Length();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StartTrigger (Type: "CType_Config_StreamProcessor_DataLogger_Values_Trigger")
    protected:
        void Construct_StartTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_StartTrigger()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StartTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartTrigger()))
                {
                    Construct_StartTrigger();
                }
                if ((*Value()).hasMember(ItemName_StartTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_StartTrigger()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartTrigger(const CType_Config_StreamProcessor_DataLogger_Values_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_StartTrigger()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Trigger Get_StartTrigger(void) const
        {
            return (*Value())[ItemName_StartTrigger()];
        }
        bool Get_StartTrigger(CType_Config_StreamProcessor_DataLogger_Values_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartTrigger()]).valid())
                {
                    GetValue = (*Value())[ItemName_StartTrigger()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item StopTrigger (Type: "CType_Config_StreamProcessor_DataLogger_Values_Trigger")
    protected:
        void Construct_StopTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_StopTrigger()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StopTrigger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StopTrigger()))
                {
                    Construct_StopTrigger();
                }
                if ((*Value()).hasMember(ItemName_StopTrigger()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Trigger InitValue;
                    (*Value())[ItemName_StopTrigger()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StopTrigger(const CType_Config_StreamProcessor_DataLogger_Values_Trigger& SetValue)
        {
            try
            {
                (*Value())[ItemName_StopTrigger()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Trigger Get_StopTrigger(void) const
        {
            return (*Value())[ItemName_StopTrigger()];
        }
        bool Get_StopTrigger(CType_Config_StreamProcessor_DataLogger_Values_Trigger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StopTrigger()]).valid())
                {
                    GetValue = (*Value())[ItemName_StopTrigger()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Length (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float")
    protected:
        void Construct_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_Length()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Length(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Length()))
                {
                    Construct_Length();
                }
                if ((*Value()).hasMember(ItemName_Length()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_Length()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Length(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_Length()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float Get_Length(void) const
        {
            return (*Value())[ItemName_Length()];
        }
        bool Get_Length(GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Length()]).valid())
                {
                    GetValue = (*Value())[ItemName_Length()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_Triggered


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_AddHeader(void)
        {
            static std::string str("AddHeader");
            return str;
        }
    public:
        static std::string const& ItemName_HeaderText(void)
        {
            static std::string str("HeaderText");
            return str;
        }
    public:
        static std::string const& ItemName_DateTimeHeader(void)
        {
            static std::string str("DateTimeHeader");
            return str;
        }
    public:
        static std::string const& ItemName_DateTimeFormat(void)
        {
            static std::string str("DateTimeFormat");
            return str;
        }
    public:
        static std::string const& ItemName_ColumnSeparator(void)
        {
            static std::string str("ColumnSeparator");
            return str;
        }
    public:
        static std::string const& ItemName_DecimalSeparator(void)
        {
            static std::string str("DecimalSeparator");
            return str;
        }
    public:
        static std::string const& ItemName_LineSeparator(void)
        {
            static std::string str("LineSeparator");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.616");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV(void)
    {
        try
        {
            Construct_AddHeader();
            Construct_HeaderText();
            Construct_DateTimeHeader();
            Construct_DateTimeFormat();
            Construct_ColumnSeparator();
            Construct_DecimalSeparator();
            Construct_LineSeparator();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV(const CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_AddHeader();
            Construct_HeaderText();
            Construct_DateTimeHeader();
            Construct_DateTimeFormat();
            Construct_ColumnSeparator();
            Construct_DecimalSeparator();
            Construct_LineSeparator();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_AddHeader();
            Initialize_HeaderText();
            Initialize_DateTimeHeader();
            Initialize_DateTimeFormat();
            Initialize_ColumnSeparator();
            Initialize_DecimalSeparator();
            Initialize_LineSeparator();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item AddHeader (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AddHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddHeader()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AddHeader()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AddHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AddHeader()))
                {
                    Construct_AddHeader();
                }
                if ((*Value()).hasMember(ItemName_AddHeader()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AddHeader()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AddHeader(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AddHeader()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AddHeader(void) const
        {
            return (*Value())[ItemName_AddHeader()];
        }
        bool Get_AddHeader(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AddHeader()]).valid())
                {
                    GetValue = (*Value())[ItemName_AddHeader()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HeaderText (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_HeaderText(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HeaderText()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HeaderText()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HeaderText(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HeaderText()))
                {
                    Construct_HeaderText();
                }
                if ((*Value()).hasMember(ItemName_HeaderText()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_HeaderText()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HeaderText(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_HeaderText()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_HeaderText(void) const
        {
            return (*Value())[ItemName_HeaderText()];
        }
        bool Get_HeaderText(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HeaderText()]).valid())
                {
                    GetValue = (*Value())[ItemName_HeaderText()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DateTimeHeader (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_DateTimeHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeHeader()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DateTimeHeader(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    Construct_DateTimeHeader();
                }
                if ((*Value()).hasMember(ItemName_DateTimeHeader()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_DateTimeHeader()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DateTimeHeader(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DateTimeHeader()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_DateTimeHeader(void) const
        {
            return (*Value())[ItemName_DateTimeHeader()];
        }
        bool Get_DateTimeHeader(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DateTimeHeader()]).valid())
                {
                    GetValue = (*Value())[ItemName_DateTimeHeader()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DateTimeFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_DateTimeFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DateTimeFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DateTimeFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    Construct_DateTimeFormat();
                }
                if ((*Value()).hasMember(ItemName_DateTimeFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DateTimeFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DateTimeFormat(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_DateTimeFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_DateTimeFormat(void) const
        {
            return (*Value())[ItemName_DateTimeFormat()];
        }
        bool Get_DateTimeFormat(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DateTimeFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_DateTimeFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ColumnSeparator (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_ColumnSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_ColumnSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ColumnSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    Construct_ColumnSeparator();
                }
                if ((*Value()).hasMember(ItemName_ColumnSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_ColumnSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ColumnSeparator(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_ColumnSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_ColumnSeparator(void) const
        {
            return (*Value())[ItemName_ColumnSeparator()];
        }
        bool Get_ColumnSeparator(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ColumnSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_ColumnSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DecimalSeparator (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_DecimalSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecimalSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DecimalSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DecimalSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DecimalSeparator()))
                {
                    Construct_DecimalSeparator();
                }
                if ((*Value()).hasMember(ItemName_DecimalSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_DecimalSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DecimalSeparator(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_DecimalSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_DecimalSeparator(void) const
        {
            return (*Value())[ItemName_DecimalSeparator()];
        }
        bool Get_DecimalSeparator(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DecimalSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_DecimalSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LineSeparator (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_LineSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LineSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_LineSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LineSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LineSeparator()))
                {
                    Construct_LineSeparator();
                }
                if ((*Value()).hasMember(ItemName_LineSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_LineSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LineSeparator(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_LineSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_LineSeparator(void) const
        {
            return (*Value())[ItemName_LineSeparator()];
        }
        bool Get_LineSeparator(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LineSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_LineSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values_Storage
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values_Storage : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Mode(void)
        {
            static std::string str("Mode");
            return str;
        }
    public:
        static std::string const& ItemName_DestinationCount(void)
        {
            static std::string str("DestinationCount");
            return str;
        }
    public:
        static std::string const& ItemName_Destination0(void)
        {
            static std::string str("Destination0");
            return str;
        }
    public:
        static std::string const& ItemName_Destination1(void)
        {
            static std::string str("Destination1");
            return str;
        }
    public:
        static std::string const& ItemName_Destination2(void)
        {
            static std::string str("Destination2");
            return str;
        }
    public:
        static std::string const& ItemName_Destination3(void)
        {
            static std::string str("Destination3");
            return str;
        }
    public:
        static std::string const& ItemName_SubDirectory(void)
        {
            static std::string str("SubDirectory");
            return str;
        }
    public:
        static std::string const& ItemName_FileSaveMode(void)
        {
            static std::string str("FileSaveMode");
            return str;
        }
    public:
        static std::string const& ItemName_MaximumFilesCount(void)
        {
            static std::string str("MaximumFilesCount");
            return str;
        }
    public:
        static std::string const& ItemName_MaximumFilesCountInDirectory(void)
        {
            static std::string str("MaximumFilesCountInDirectory");
            return str;
        }
    public:
        static std::string const& ItemName_MaximumBytesCount(void)
        {
            static std::string str("MaximumBytesCount");
            return str;
        }
    public:
        static std::string const& ItemName_AutoDeleteFiles(void)
        {
            static std::string str("AutoDeleteFiles");
            return str;
        }
    public:
        static std::string const& ItemName_Compress(void)
        {
            static std::string str("Compress");
            return str;
        }
    public:
        static std::string const& ItemName_FileNameExtension(void)
        {
            static std::string str("FileNameExtension");
            return str;
        }
    public:
        static std::string const& ItemName_FileFormat(void)
        {
            static std::string str("FileFormat");
            return str;
        }
    public:
        static std::string const& ItemName_FileFormatSettingsCSV(void)
        {
            static std::string str("FileFormatSettingsCSV");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values_Storage");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.617");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values_Storage(void)
    {
        try
        {
            Construct_Mode();
            Construct_DestinationCount();
            Construct_Destination0();
            Construct_Destination1();
            Construct_Destination2();
            Construct_Destination3();
            Construct_SubDirectory();
            Construct_FileSaveMode();
            Construct_MaximumFilesCount();
            Construct_MaximumFilesCountInDirectory();
            Construct_MaximumBytesCount();
            Construct_AutoDeleteFiles();
            Construct_Compress();
            Construct_FileNameExtension();
            Construct_FileFormat();
            Construct_FileFormatSettingsCSV();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values_Storage(const CType_Config_StreamProcessor_DataLogger_Values_Storage& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values_Storage(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Mode();
            Construct_DestinationCount();
            Construct_Destination0();
            Construct_Destination1();
            Construct_Destination2();
            Construct_Destination3();
            Construct_SubDirectory();
            Construct_FileSaveMode();
            Construct_MaximumFilesCount();
            Construct_MaximumFilesCountInDirectory();
            Construct_MaximumBytesCount();
            Construct_AutoDeleteFiles();
            Construct_Compress();
            Construct_FileNameExtension();
            Construct_FileFormat();
            Construct_FileFormatSettingsCSV();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values_Storage(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Mode();
            Initialize_DestinationCount();
            Initialize_Destination0();
            Initialize_Destination1();
            Initialize_Destination2();
            Initialize_Destination3();
            Initialize_SubDirectory();
            Initialize_FileSaveMode();
            Initialize_MaximumFilesCount();
            Initialize_MaximumFilesCountInDirectory();
            Initialize_MaximumBytesCount();
            Initialize_AutoDeleteFiles();
            Initialize_Compress();
            Initialize_FileNameExtension();
            Initialize_FileFormat();
            Initialize_FileFormatSettingsCSV();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Mode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Mode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Mode()))
                {
                    Construct_Mode();
                }
                if ((*Value()).hasMember(ItemName_Mode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Mode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Mode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Mode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Mode(void) const
        {
            return (*Value())[ItemName_Mode()];
        }
        bool Get_Mode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Mode()]).valid())
                {
                    GetValue = (*Value())[ItemName_Mode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DestinationCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_DestinationCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DestinationCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DestinationCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DestinationCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DestinationCount()))
                {
                    Construct_DestinationCount();
                }
                if ((*Value()).hasMember(ItemName_DestinationCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_DestinationCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DestinationCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DestinationCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_DestinationCount(void) const
        {
            return (*Value())[ItemName_DestinationCount()];
        }
        bool Get_DestinationCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DestinationCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_DestinationCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Destination0 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Destination0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Destination0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination0()))
                {
                    Construct_Destination0();
                }
                if ((*Value()).hasMember(ItemName_Destination0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Destination0(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Destination0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Destination0(void) const
        {
            return (*Value())[ItemName_Destination0()];
        }
        bool Get_Destination0(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Destination0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Destination0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Destination1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Destination1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Destination1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination1()))
                {
                    Construct_Destination1();
                }
                if ((*Value()).hasMember(ItemName_Destination1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Destination1(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Destination1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Destination1(void) const
        {
            return (*Value())[ItemName_Destination1()];
        }
        bool Get_Destination1(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Destination1()]).valid())
                {
                    GetValue = (*Value())[ItemName_Destination1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Destination2 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Destination2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Destination2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination2()))
                {
                    Construct_Destination2();
                }
                if ((*Value()).hasMember(ItemName_Destination2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Destination2(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Destination2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Destination2(void) const
        {
            return (*Value())[ItemName_Destination2()];
        }
        bool Get_Destination2(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Destination2()]).valid())
                {
                    GetValue = (*Value())[ItemName_Destination2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Destination3 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Destination3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Destination3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Destination3()))
                {
                    Construct_Destination3();
                }
                if ((*Value()).hasMember(ItemName_Destination3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Destination3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Destination3(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Destination3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Destination3(void) const
        {
            return (*Value())[ItemName_Destination3()];
        }
        bool Get_Destination3(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Destination3()]).valid())
                {
                    GetValue = (*Value())[ItemName_Destination3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SubDirectory (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_SubDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubDirectory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SubDirectory()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SubDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SubDirectory()))
                {
                    Construct_SubDirectory();
                }
                if ((*Value()).hasMember(ItemName_SubDirectory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_SubDirectory()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SubDirectory(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_SubDirectory()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_SubDirectory(void) const
        {
            return (*Value())[ItemName_SubDirectory()];
        }
        bool Get_SubDirectory(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SubDirectory()]).valid())
                {
                    GetValue = (*Value())[ItemName_SubDirectory()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileSaveMode (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_FileSaveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileSaveMode()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileSaveMode(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    Construct_FileSaveMode();
                }
                if ((*Value()).hasMember(ItemName_FileSaveMode()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileSaveMode()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileSaveMode(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileSaveMode()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_FileSaveMode(void) const
        {
            return (*Value())[ItemName_FileSaveMode()];
        }
        bool Get_FileSaveMode(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileSaveMode()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileSaveMode()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaximumFilesCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaximumFilesCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumFilesCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumFilesCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaximumFilesCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumFilesCount()))
                {
                    Construct_MaximumFilesCount();
                }
                if ((*Value()).hasMember(ItemName_MaximumFilesCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumFilesCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaximumFilesCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaximumFilesCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MaximumFilesCount(void) const
        {
            return (*Value())[ItemName_MaximumFilesCount()];
        }
        bool Get_MaximumFilesCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaximumFilesCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaximumFilesCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaximumFilesCountInDirectory (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaximumFilesCountInDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumFilesCountInDirectory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumFilesCountInDirectory()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaximumFilesCountInDirectory(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumFilesCountInDirectory()))
                {
                    Construct_MaximumFilesCountInDirectory();
                }
                if ((*Value()).hasMember(ItemName_MaximumFilesCountInDirectory()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumFilesCountInDirectory()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaximumFilesCountInDirectory(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaximumFilesCountInDirectory()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MaximumFilesCountInDirectory(void) const
        {
            return (*Value())[ItemName_MaximumFilesCountInDirectory()];
        }
        bool Get_MaximumFilesCountInDirectory(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaximumFilesCountInDirectory()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaximumFilesCountInDirectory()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MaximumBytesCount (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_MaximumBytesCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumBytesCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumBytesCount()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MaximumBytesCount(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MaximumBytesCount()))
                {
                    Construct_MaximumBytesCount();
                }
                if ((*Value()).hasMember(ItemName_MaximumBytesCount()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_MaximumBytesCount()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MaximumBytesCount(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_MaximumBytesCount()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_MaximumBytesCount(void) const
        {
            return (*Value())[ItemName_MaximumBytesCount()];
        }
        bool Get_MaximumBytesCount(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MaximumBytesCount()]).valid())
                {
                    GetValue = (*Value())[ItemName_MaximumBytesCount()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AutoDeleteFiles (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_AutoDeleteFiles(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AutoDeleteFiles()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AutoDeleteFiles(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    Construct_AutoDeleteFiles();
                }
                if ((*Value()).hasMember(ItemName_AutoDeleteFiles()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_AutoDeleteFiles()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AutoDeleteFiles(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_AutoDeleteFiles()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_AutoDeleteFiles(void) const
        {
            return (*Value())[ItemName_AutoDeleteFiles()];
        }
        bool Get_AutoDeleteFiles(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AutoDeleteFiles()]).valid())
                {
                    GetValue = (*Value())[ItemName_AutoDeleteFiles()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Compress (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_Compress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Compress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Compress()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Compress(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Compress()))
                {
                    Construct_Compress();
                }
                if ((*Value()).hasMember(ItemName_Compress()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_Compress()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Compress(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Compress()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_Compress(void) const
        {
            return (*Value())[ItemName_Compress()];
        }
        bool Get_Compress(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Compress()]).valid())
                {
                    GetValue = (*Value())[ItemName_Compress()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileNameExtension (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_FileNameExtension(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileNameExtension()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FileNameExtension()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileNameExtension(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileNameExtension()))
                {
                    Construct_FileNameExtension();
                }
                if ((*Value()).hasMember(ItemName_FileNameExtension()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FileNameExtension()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileNameExtension(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileNameExtension()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_FileNameExtension(void) const
        {
            return (*Value())[ItemName_FileNameExtension()];
        }
        bool Get_FileNameExtension(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileNameExtension()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileNameExtension()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_FileFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormat()))
                {
                    Construct_FileFormat();
                }
                if ((*Value()).hasMember(ItemName_FileFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_FileFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_FileFormat(void) const
        {
            return (*Value())[ItemName_FileFormat()];
        }
        bool Get_FileFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileFormatSettingsCSV (Type: "CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV")
    protected:
        void Construct_FileFormatSettingsCSV(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormatSettingsCSV()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV InitValue;
                    (*Value())[ItemName_FileFormatSettingsCSV()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileFormatSettingsCSV(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileFormatSettingsCSV()))
                {
                    Construct_FileFormatSettingsCSV();
                }
                if ((*Value()).hasMember(ItemName_FileFormatSettingsCSV()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV InitValue;
                    (*Value())[ItemName_FileFormatSettingsCSV()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileFormatSettingsCSV(const CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileFormatSettingsCSV()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV Get_FileFormatSettingsCSV(void) const
        {
            return (*Value())[ItemName_FileFormatSettingsCSV()];
        }
        bool Get_FileFormatSettingsCSV(CType_Config_StreamProcessor_DataLogger_Values_Storage_FileFormatSettingsCSV& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileFormatSettingsCSV()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileFormatSettingsCSV()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values_Storage


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger_Values
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger_Values : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_StreamProcessor(void)
        {
            static std::string str("StreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_CycleFrequencyDivider(void)
        {
            static std::string str("CycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionType(void)
        {
            static std::string str("DataCollectionType");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImage(void)
        {
            static std::string str("DataCollectionTypeImage");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend0(void)
        {
            static std::string str("DataCollectionTypeImageLegend0");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend1(void)
        {
            static std::string str("DataCollectionTypeImageLegend1");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend2(void)
        {
            static std::string str("DataCollectionTypeImageLegend2");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend3(void)
        {
            static std::string str("DataCollectionTypeImageLegend3");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend4(void)
        {
            static std::string str("DataCollectionTypeImageLegend4");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend5(void)
        {
            static std::string str("DataCollectionTypeImageLegend5");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend6(void)
        {
            static std::string str("DataCollectionTypeImageLegend6");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend7(void)
        {
            static std::string str("DataCollectionTypeImageLegend7");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend8(void)
        {
            static std::string str("DataCollectionTypeImageLegend8");
            return str;
        }
    public:
        static std::string const& ItemName_DataCollectionTypeImageLegend9(void)
        {
            static std::string str("DataCollectionTypeImageLegend9");
            return str;
        }
    public:
        static std::string const& ItemName_FileLength(void)
        {
            static std::string str("FileLength");
            return str;
        }
    public:
        static std::string const& ItemName_SendFTPClient(void)
        {
            static std::string str("SendFTPClient");
            return str;
        }
    public:
        static std::string const& ItemName_SendMailClient(void)
        {
            static std::string str("SendMailClient");
            return str;
        }
    public:
        static std::string const& ItemName_DeleteAfterSend(void)
        {
            static std::string str("DeleteAfterSend");
            return str;
        }
    public:
        static std::string const& ItemName_EventBased(void)
        {
            static std::string str("EventBased");
            return str;
        }
    public:
        static std::string const& ItemName_Triggered(void)
        {
            static std::string str("Triggered");
            return str;
        }
    public:
        static std::string const& ItemName_Storage(void)
        {
            static std::string str("Storage");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger_Values");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.618");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger_Values(void)
    {
        try
        {
            Construct_StreamProcessor();
            Construct_CycleFrequencyDivider();
            Construct_DataCollectionType();
            Construct_DataCollectionTypeImage();
            Construct_DataCollectionTypeImageLegend0();
            Construct_DataCollectionTypeImageLegend1();
            Construct_DataCollectionTypeImageLegend2();
            Construct_DataCollectionTypeImageLegend3();
            Construct_DataCollectionTypeImageLegend4();
            Construct_DataCollectionTypeImageLegend5();
            Construct_DataCollectionTypeImageLegend6();
            Construct_DataCollectionTypeImageLegend7();
            Construct_DataCollectionTypeImageLegend8();
            Construct_DataCollectionTypeImageLegend9();
            Construct_FileLength();
            Construct_SendFTPClient();
            Construct_SendMailClient();
            Construct_DeleteAfterSend();
            Construct_EventBased();
            Construct_Triggered();
            Construct_Storage();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger_Values(const CType_Config_StreamProcessor_DataLogger_Values& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger_Values(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_StreamProcessor();
            Construct_CycleFrequencyDivider();
            Construct_DataCollectionType();
            Construct_DataCollectionTypeImage();
            Construct_DataCollectionTypeImageLegend0();
            Construct_DataCollectionTypeImageLegend1();
            Construct_DataCollectionTypeImageLegend2();
            Construct_DataCollectionTypeImageLegend3();
            Construct_DataCollectionTypeImageLegend4();
            Construct_DataCollectionTypeImageLegend5();
            Construct_DataCollectionTypeImageLegend6();
            Construct_DataCollectionTypeImageLegend7();
            Construct_DataCollectionTypeImageLegend8();
            Construct_DataCollectionTypeImageLegend9();
            Construct_FileLength();
            Construct_SendFTPClient();
            Construct_SendMailClient();
            Construct_DeleteAfterSend();
            Construct_EventBased();
            Construct_Triggered();
            Construct_Storage();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger_Values(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_StreamProcessor();
            Initialize_CycleFrequencyDivider();
            Initialize_DataCollectionType();
            Initialize_DataCollectionTypeImage();
            Initialize_DataCollectionTypeImageLegend0();
            Initialize_DataCollectionTypeImageLegend1();
            Initialize_DataCollectionTypeImageLegend2();
            Initialize_DataCollectionTypeImageLegend3();
            Initialize_DataCollectionTypeImageLegend4();
            Initialize_DataCollectionTypeImageLegend5();
            Initialize_DataCollectionTypeImageLegend6();
            Initialize_DataCollectionTypeImageLegend7();
            Initialize_DataCollectionTypeImageLegend8();
            Initialize_DataCollectionTypeImageLegend9();
            Initialize_FileLength();
            Initialize_SendFTPClient();
            Initialize_SendMailClient();
            Initialize_DeleteAfterSend();
            Initialize_EventBased();
            Initialize_Triggered();
            Initialize_Storage();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item StreamProcessor (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_StreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    Construct_StreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_StreamProcessor()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_StreamProcessor()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StreamProcessor(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_StreamProcessor()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_StreamProcessor(void) const
        {
            return (*Value())[ItemName_StreamProcessor()];
        }
        bool Get_StreamProcessor(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StreamProcessor()]).valid())
                {
                    GetValue = (*Value())[ItemName_StreamProcessor()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    Construct_CycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_CycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_CycleFrequencyDivider()];
        }
        bool Get_CycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_CycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DataCollectionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataCollectionType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionType()))
                {
                    Construct_DataCollectionType();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DataCollectionType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DataCollectionType(void) const
        {
            return (*Value())[ItemName_DataCollectionType()];
        }
        bool Get_DataCollectionType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionType()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImage (Type: "GInsXmlRpcStdAPI::CGIns_Base_Image")
    protected:
        void Construct_DataCollectionTypeImage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_DataCollectionTypeImage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImage()))
                {
                    Construct_DataCollectionTypeImage();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_DataCollectionTypeImage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImage(const GInsXmlRpcStdAPI::CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_Image Get_DataCollectionTypeImage(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImage()];
        }
        bool Get_DataCollectionTypeImage(GInsXmlRpcStdAPI::CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImage()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend0 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend0()))
                {
                    Construct_DataCollectionTypeImageLegend0();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend0(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend0(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend0()];
        }
        bool Get_DataCollectionTypeImageLegend0(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend0()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend1 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend1()))
                {
                    Construct_DataCollectionTypeImageLegend1();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend1(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend1(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend1()];
        }
        bool Get_DataCollectionTypeImageLegend1(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend1()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend2 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend2()))
                {
                    Construct_DataCollectionTypeImageLegend2();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend2(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend2(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend2()];
        }
        bool Get_DataCollectionTypeImageLegend2(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend2()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend3 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend3()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend3(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend3()))
                {
                    Construct_DataCollectionTypeImageLegend3();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend3()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend3()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend3(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend3()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend3(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend3()];
        }
        bool Get_DataCollectionTypeImageLegend3(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend3()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend3()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend4 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend4()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend4(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend4()))
                {
                    Construct_DataCollectionTypeImageLegend4();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend4()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend4()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend4(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend4()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend4(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend4()];
        }
        bool Get_DataCollectionTypeImageLegend4(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend4()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend4()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend5 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend5()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend5()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend5(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend5()))
                {
                    Construct_DataCollectionTypeImageLegend5();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend5()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend5()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend5(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend5()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend5(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend5()];
        }
        bool Get_DataCollectionTypeImageLegend5(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend5()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend5()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend6 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend6()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend6()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend6(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend6()))
                {
                    Construct_DataCollectionTypeImageLegend6();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend6()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend6()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend6(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend6()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend6(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend6()];
        }
        bool Get_DataCollectionTypeImageLegend6(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend6()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend6()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend7 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend7()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend7()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend7(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend7()))
                {
                    Construct_DataCollectionTypeImageLegend7();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend7()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend7()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend7(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend7()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend7(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend7()];
        }
        bool Get_DataCollectionTypeImageLegend7(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend7()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend7()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend8 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend8()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend8()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend8(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend8()))
                {
                    Construct_DataCollectionTypeImageLegend8();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend8()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend8()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend8(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend8()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend8(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend8()];
        }
        bool Get_DataCollectionTypeImageLegend8(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend8()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend8()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataCollectionTypeImageLegend9 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DataCollectionTypeImageLegend9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend9()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend9()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataCollectionTypeImageLegend9(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataCollectionTypeImageLegend9()))
                {
                    Construct_DataCollectionTypeImageLegend9();
                }
                if ((*Value()).hasMember(ItemName_DataCollectionTypeImageLegend9()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DataCollectionTypeImageLegend9()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataCollectionTypeImageLegend9(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataCollectionTypeImageLegend9()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DataCollectionTypeImageLegend9(void) const
        {
            return (*Value())[ItemName_DataCollectionTypeImageLegend9()];
        }
        bool Get_DataCollectionTypeImageLegend9(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataCollectionTypeImageLegend9()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataCollectionTypeImageLegend9()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileLength (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float")
    protected:
        void Construct_FileLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_FileLength()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileLength(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileLength()))
                {
                    Construct_FileLength();
                }
                if ((*Value()).hasMember(ItemName_FileLength()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float InitValue;
                    (*Value())[ItemName_FileLength()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileLength(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileLength()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float Get_FileLength(void) const
        {
            return (*Value())[ItemName_FileLength()];
        }
        bool Get_FileLength(GInsXmlRpcStdAPI::CGIns_Edit_RangeValueSelectionList_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileLength()]).valid())
                {
                    GetValue = (*Value())[ItemName_FileLength()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SendFTPClient (Type: "CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient")
    protected:
        void Construct_SendFTPClient(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendFTPClient()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient InitValue;
                    (*Value())[ItemName_SendFTPClient()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SendFTPClient(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendFTPClient()))
                {
                    Construct_SendFTPClient();
                }
                if ((*Value()).hasMember(ItemName_SendFTPClient()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient InitValue;
                    (*Value())[ItemName_SendFTPClient()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SendFTPClient(const CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient& SetValue)
        {
            try
            {
                (*Value())[ItemName_SendFTPClient()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient Get_SendFTPClient(void) const
        {
            return (*Value())[ItemName_SendFTPClient()];
        }
        bool Get_SendFTPClient(CType_Config_StreamProcessor_DataLogger_Values_SendFTPClient& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SendFTPClient()]).valid())
                {
                    GetValue = (*Value())[ItemName_SendFTPClient()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SendMailClient (Type: "CType_Config_StreamProcessor_DataLogger_Values_SendMailClient")
    protected:
        void Construct_SendMailClient(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendMailClient()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_SendMailClient InitValue;
                    (*Value())[ItemName_SendMailClient()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SendMailClient(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SendMailClient()))
                {
                    Construct_SendMailClient();
                }
                if ((*Value()).hasMember(ItemName_SendMailClient()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_SendMailClient InitValue;
                    (*Value())[ItemName_SendMailClient()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SendMailClient(const CType_Config_StreamProcessor_DataLogger_Values_SendMailClient& SetValue)
        {
            try
            {
                (*Value())[ItemName_SendMailClient()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_SendMailClient Get_SendMailClient(void) const
        {
            return (*Value())[ItemName_SendMailClient()];
        }
        bool Get_SendMailClient(CType_Config_StreamProcessor_DataLogger_Values_SendMailClient& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SendMailClient()]).valid())
                {
                    GetValue = (*Value())[ItemName_SendMailClient()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeleteAfterSend (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DeleteAfterSend(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeleteAfterSend()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DeleteAfterSend()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeleteAfterSend(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeleteAfterSend()))
                {
                    Construct_DeleteAfterSend();
                }
                if ((*Value()).hasMember(ItemName_DeleteAfterSend()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DeleteAfterSend()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeleteAfterSend(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeleteAfterSend()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DeleteAfterSend(void) const
        {
            return (*Value())[ItemName_DeleteAfterSend()];
        }
        bool Get_DeleteAfterSend(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeleteAfterSend()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeleteAfterSend()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EventBased (Type: "CType_Config_StreamProcessor_DataLogger_Values_EventBased")
    protected:
        void Construct_EventBased(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventBased()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_EventBased InitValue;
                    (*Value())[ItemName_EventBased()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EventBased(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EventBased()))
                {
                    Construct_EventBased();
                }
                if ((*Value()).hasMember(ItemName_EventBased()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_EventBased InitValue;
                    (*Value())[ItemName_EventBased()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EventBased(const CType_Config_StreamProcessor_DataLogger_Values_EventBased& SetValue)
        {
            try
            {
                (*Value())[ItemName_EventBased()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_EventBased Get_EventBased(void) const
        {
            return (*Value())[ItemName_EventBased()];
        }
        bool Get_EventBased(CType_Config_StreamProcessor_DataLogger_Values_EventBased& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EventBased()]).valid())
                {
                    GetValue = (*Value())[ItemName_EventBased()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Triggered (Type: "CType_Config_StreamProcessor_DataLogger_Values_Triggered")
    protected:
        void Construct_Triggered(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Triggered()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Triggered InitValue;
                    (*Value())[ItemName_Triggered()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Triggered(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Triggered()))
                {
                    Construct_Triggered();
                }
                if ((*Value()).hasMember(ItemName_Triggered()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Triggered InitValue;
                    (*Value())[ItemName_Triggered()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Triggered(const CType_Config_StreamProcessor_DataLogger_Values_Triggered& SetValue)
        {
            try
            {
                (*Value())[ItemName_Triggered()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Triggered Get_Triggered(void) const
        {
            return (*Value())[ItemName_Triggered()];
        }
        bool Get_Triggered(CType_Config_StreamProcessor_DataLogger_Values_Triggered& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Triggered()]).valid())
                {
                    GetValue = (*Value())[ItemName_Triggered()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Storage (Type: "CType_Config_StreamProcessor_DataLogger_Values_Storage")
    protected:
        void Construct_Storage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Storage()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Storage InitValue;
                    (*Value())[ItemName_Storage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Storage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Storage()))
                {
                    Construct_Storage();
                }
                if ((*Value()).hasMember(ItemName_Storage()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values_Storage InitValue;
                    (*Value())[ItemName_Storage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Storage(const CType_Config_StreamProcessor_DataLogger_Values_Storage& SetValue)
        {
            try
            {
                (*Value())[ItemName_Storage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values_Storage Get_Storage(void) const
        {
            return (*Value())[ItemName_Storage()];
        }
        bool Get_Storage(CType_Config_StreamProcessor_DataLogger_Values_Storage& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Storage()]).valid())
                {
                    GetValue = (*Value())[ItemName_Storage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger_Values


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor_DataLogger
//------------------------------------------------------------------------
class CType_Config_StreamProcessor_DataLogger : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Base(void)
        {
            static std::string str("Base");
            return str;
        }
    public:
        static std::string const& ItemName_Values(void)
        {
            static std::string str("Values");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor_DataLogger");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.620");
        return str;
    }
public:
    CType_Config_StreamProcessor_DataLogger(void)
    {
        try
        {
            Construct_Base();
            Construct_Values();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor_DataLogger(const CType_Config_StreamProcessor_DataLogger& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor_DataLogger(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Base();
            Construct_Values();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor_DataLogger(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Base();
            Initialize_Values();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Base (Type: "CType_Config_StreamProcessor_DataLogger_Base")
    protected:
        void Construct_Base(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Base()))
                {
                    CType_Config_StreamProcessor_DataLogger_Base InitValue;
                    (*Value())[ItemName_Base()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Base(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Base()))
                {
                    Construct_Base();
                }
                if ((*Value()).hasMember(ItemName_Base()))
                {
                    CType_Config_StreamProcessor_DataLogger_Base InitValue;
                    (*Value())[ItemName_Base()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Base(const CType_Config_StreamProcessor_DataLogger_Base& SetValue)
        {
            try
            {
                (*Value())[ItemName_Base()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Base Get_Base(void) const
        {
            return (*Value())[ItemName_Base()];
        }
        bool Get_Base(CType_Config_StreamProcessor_DataLogger_Base& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Base()]).valid())
                {
                    GetValue = (*Value())[ItemName_Base()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Values (Type: "CType_Config_StreamProcessor_DataLogger_Values")
    protected:
        void Construct_Values(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Values()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values InitValue;
                    (*Value())[ItemName_Values()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Values(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Values()))
                {
                    Construct_Values();
                }
                if ((*Value()).hasMember(ItemName_Values()))
                {
                    CType_Config_StreamProcessor_DataLogger_Values InitValue;
                    (*Value())[ItemName_Values()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Values(const CType_Config_StreamProcessor_DataLogger_Values& SetValue)
        {
            try
            {
                (*Value())[ItemName_Values()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger_Values Get_Values(void) const
        {
            return (*Value())[ItemName_Values()];
        }
        bool Get_Values(CType_Config_StreamProcessor_DataLogger_Values& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Values()]).valid())
                {
                    GetValue = (*Value())[ItemName_Values()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor_DataLogger


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_StreamProcessor
//------------------------------------------------------------------------
class CType_Config_StreamProcessor : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_DataBuffer(void)
        {
            static std::string str("DataBuffer");
            return str;
        }
    public:
        static std::string const& ItemName_DataLogger(void)
        {
            static std::string str("DataLogger");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_StreamProcessor");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.600");
        return str;
    }
public:
    CType_Config_StreamProcessor(void)
    {
        try
        {
            Construct_General();
            Construct_DataBuffer();
            Construct_DataLogger();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_StreamProcessor(const CType_Config_StreamProcessor& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_StreamProcessor(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_DataBuffer();
            Construct_DataLogger();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_StreamProcessor(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_DataBuffer();
            Initialize_DataLogger();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_StreamProcessor_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_StreamProcessor_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_StreamProcessor_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_StreamProcessor_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_StreamProcessor_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataBuffer (Type: "CType_Config_StreamProcessor_DataBuffer")
    protected:
        void Construct_DataBuffer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBuffer()))
                {
                    CType_Config_StreamProcessor_DataBuffer InitValue;
                    (*Value())[ItemName_DataBuffer()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataBuffer(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataBuffer()))
                {
                    Construct_DataBuffer();
                }
                if ((*Value()).hasMember(ItemName_DataBuffer()))
                {
                    CType_Config_StreamProcessor_DataBuffer InitValue;
                    (*Value())[ItemName_DataBuffer()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataBuffer(const CType_Config_StreamProcessor_DataBuffer& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataBuffer()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataBuffer Get_DataBuffer(void) const
        {
            return (*Value())[ItemName_DataBuffer()];
        }
        bool Get_DataBuffer(CType_Config_StreamProcessor_DataBuffer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataBuffer()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataBuffer()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataLogger (Type: "CType_Config_StreamProcessor_DataLogger")
    protected:
        void Construct_DataLogger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataLogger()))
                {
                    CType_Config_StreamProcessor_DataLogger InitValue;
                    (*Value())[ItemName_DataLogger()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataLogger(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataLogger()))
                {
                    Construct_DataLogger();
                }
                if ((*Value()).hasMember(ItemName_DataLogger()))
                {
                    CType_Config_StreamProcessor_DataLogger InitValue;
                    (*Value())[ItemName_DataLogger()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataLogger(const CType_Config_StreamProcessor_DataLogger& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataLogger()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_StreamProcessor_DataLogger Get_DataLogger(void) const
        {
            return (*Value())[ItemName_DataLogger()];
        }
        bool Get_DataLogger(CType_Config_StreamProcessor_DataLogger& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataLogger()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataLogger()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_StreamProcessor


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Feature_General
//------------------------------------------------------------------------
class CType_Config_Feature_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsStreamProcessor(void)
        {
            static std::string str("OwnedIDsStreamProcessor");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Feature_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.701");
        return str;
    }
public:
    CType_Config_Feature_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsStreamProcessor();
            Construct_Description();
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Feature_General(const CType_Config_Feature_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Feature_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsStreamProcessor();
            Construct_Description();
            Construct_Type();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Feature_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsStreamProcessor();
            Initialize_Description();
            Initialize_Type();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsStreamProcessor (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsStreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsStreamProcessor()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsStreamProcessor(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    Construct_OwnedIDsStreamProcessor();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsStreamProcessor()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsStreamProcessor(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsStreamProcessor()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsStreamProcessor(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    return (*Value())[ItemName_OwnedIDsStreamProcessor()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsStreamProcessor(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    (*Value())[ItemName_OwnedIDsStreamProcessor()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsStreamProcessor(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsStreamProcessor()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsStreamProcessor(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    (*Value())[ItemName_OwnedIDsStreamProcessor()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsStreamProcessor(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsStreamProcessor()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsStreamProcessor()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsStreamProcessor(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsStreamProcessor()][ArrayIndex];
        }
        bool Get_OwnedIDsStreamProcessor(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsStreamProcessor()))
                {
                    if (((*Value())[ItemName_OwnedIDsStreamProcessor()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsStreamProcessor()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Feature_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Feature
//------------------------------------------------------------------------
class CType_Config_Feature : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Feature");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.700");
        return str;
    }
public:
    CType_Config_Feature(void)
    {
        try
        {
            Construct_General();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Feature(const CType_Config_Feature& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Feature(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Feature(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Feature_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Feature_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Feature_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Feature_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Feature_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Feature_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Feature


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter_General
//------------------------------------------------------------------------
class CType_Config_Adapter_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsModule(void)
        {
            static std::string str("OwnedIDsModule");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_WatchdogTimeout(void)
        {
            static std::string str("WatchdogTimeout");
            return str;
        }
    public:
        static std::string const& ItemName_AnswerDelay(void)
        {
            static std::string str("AnswerDelay");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.801");
        return str;
    }
public:
    CType_Config_Adapter_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsModule();
            Construct_Description();
            Construct_Type();
            Construct_WatchdogTimeout();
            Construct_AnswerDelay();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter_General(const CType_Config_Adapter_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsModule();
            Construct_Description();
            Construct_Type();
            Construct_WatchdogTimeout();
            Construct_AnswerDelay();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsModule();
            Initialize_Description();
            Initialize_Type();
            Initialize_WatchdogTimeout();
            Initialize_AnswerDelay();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsModule (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsModule()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    Construct_OwnedIDsModule();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsModule()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsModule(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsModule()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsModule(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    return (*Value())[ItemName_OwnedIDsModule()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsModule(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    (*Value())[ItemName_OwnedIDsModule()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsModule(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsModule()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsModule(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    (*Value())[ItemName_OwnedIDsModule()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsModule(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsModule()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsModule()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsModule(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsModule()][ArrayIndex];
        }
        bool Get_OwnedIDsModule(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsModule()))
                {
                    if (((*Value())[ItemName_OwnedIDsModule()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsModule()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "CType_Edit_MultipleParametersCombinedAndSplit")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    CType_Edit_MultipleParametersCombinedAndSplit InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const CType_Edit_MultipleParametersCombinedAndSplit& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_MultipleParametersCombinedAndSplit Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(CType_Edit_MultipleParametersCombinedAndSplit& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item WatchdogTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_WatchdogTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    Construct_WatchdogTimeout();
                }
                if ((*Value()).hasMember(ItemName_WatchdogTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_WatchdogTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WatchdogTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_WatchdogTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_WatchdogTimeout(void) const
        {
            return (*Value())[ItemName_WatchdogTimeout()];
        }
        bool Get_WatchdogTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WatchdogTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_WatchdogTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item AnswerDelay (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_AnswerDelay(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    Construct_AnswerDelay();
                }
                if ((*Value()).hasMember(ItemName_AnswerDelay()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_AnswerDelay()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_AnswerDelay(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_AnswerDelay()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_AnswerDelay(void) const
        {
            return (*Value())[ItemName_AnswerDelay()];
        }
        bool Get_AnswerDelay(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_AnswerDelay()]).valid())
                {
                    GetValue = (*Value())[ItemName_AnswerDelay()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter_SlaveRS485
//------------------------------------------------------------------------
class CType_Config_Adapter_SlaveRS485 : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter_SlaveRS485");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.802");
        return str;
    }
public:
    CType_Config_Adapter_SlaveRS485(void)
    {
        try
        {
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter_SlaveRS485(const CType_Config_Adapter_SlaveRS485& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter_SlaveRS485(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter_SlaveRS485(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Protocol();
            Initialize_Baudrate();
            Initialize_CharFormat();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter_SlaveRS485


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter_SlaveRealtimeRS485
//------------------------------------------------------------------------
class CType_Config_Adapter_SlaveRealtimeRS485 : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
    public:
        static std::string const& ItemName_CharFormat(void)
        {
            static std::string str("CharFormat");
            return str;
        }
    public:
        static std::string const& ItemName_SynchronizationSource(void)
        {
            static std::string str("SynchronizationSource");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter_SlaveRealtimeRS485");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.803");
        return str;
    }
public:
    CType_Config_Adapter_SlaveRealtimeRS485(void)
    {
        try
        {
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_SynchronizationSource();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter_SlaveRealtimeRS485(const CType_Config_Adapter_SlaveRealtimeRS485& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter_SlaveRealtimeRS485(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            Construct_CharFormat();
            Construct_SynchronizationSource();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter_SlaveRealtimeRS485(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Protocol();
            Initialize_Baudrate();
            Initialize_CharFormat();
            Initialize_SynchronizationSource();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CharFormat (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CharFormat(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CharFormat()))
                {
                    Construct_CharFormat();
                }
                if ((*Value()).hasMember(ItemName_CharFormat()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_CharFormat()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CharFormat(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_CharFormat()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_CharFormat(void) const
        {
            return (*Value())[ItemName_CharFormat()];
        }
        bool Get_CharFormat(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CharFormat()]).valid())
                {
                    GetValue = (*Value())[ItemName_CharFormat()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SynchronizationSource (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SynchronizationSource(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationSource()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationSource()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SynchronizationSource(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SynchronizationSource()))
                {
                    Construct_SynchronizationSource();
                }
                if ((*Value()).hasMember(ItemName_SynchronizationSource()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SynchronizationSource()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SynchronizationSource(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SynchronizationSource()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SynchronizationSource(void) const
        {
            return (*Value())[ItemName_SynchronizationSource()];
        }
        bool Get_SynchronizationSource(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SynchronizationSource()]).valid())
                {
                    GetValue = (*Value())[ItemName_SynchronizationSource()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter_SlaveRealtimeRS485


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter_SlaveRealtimeCAN
//------------------------------------------------------------------------
class CType_Config_Adapter_SlaveRealtimeCAN : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Port(void)
        {
            static std::string str("Port");
            return str;
        }
    public:
        static std::string const& ItemName_Protocol(void)
        {
            static std::string str("Protocol");
            return str;
        }
    public:
        static std::string const& ItemName_Baudrate(void)
        {
            static std::string str("Baudrate");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter_SlaveRealtimeCAN");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.804");
        return str;
    }
public:
    CType_Config_Adapter_SlaveRealtimeCAN(void)
    {
        try
        {
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter_SlaveRealtimeCAN(const CType_Config_Adapter_SlaveRealtimeCAN& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter_SlaveRealtimeCAN(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Port();
            Construct_Protocol();
            Construct_Baudrate();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter_SlaveRealtimeCAN(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Port();
            Initialize_Protocol();
            Initialize_Baudrate();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Port (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify")
    protected:
        void Construct_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Port(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Port()))
                {
                    Construct_Port();
                }
                if ((*Value()).hasMember(ItemName_Port()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify InitValue;
                    (*Value())[ItemName_Port()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Port(const GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& SetValue)
        {
            try
            {
                (*Value())[ItemName_Port()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify Get_Port(void) const
        {
            return (*Value())[ItemName_Port()];
        }
        bool Get_Port(GInsXmlRpcStdAPI::CGIns_Edit_StringSelectionListWithManualModify& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Port()]).valid())
                {
                    GetValue = (*Value())[ItemName_Port()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Protocol (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Protocol(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Protocol()))
                {
                    Construct_Protocol();
                }
                if ((*Value()).hasMember(ItemName_Protocol()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Protocol()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Protocol(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Protocol()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Protocol(void) const
        {
            return (*Value())[ItemName_Protocol()];
        }
        bool Get_Protocol(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Protocol()]).valid())
                {
                    GetValue = (*Value())[ItemName_Protocol()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Baudrate (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Baudrate(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Baudrate()))
                {
                    Construct_Baudrate();
                }
                if ((*Value()).hasMember(ItemName_Baudrate()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Baudrate()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Baudrate(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Baudrate()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Baudrate(void) const
        {
            return (*Value())[ItemName_Baudrate()];
        }
        bool Get_Baudrate(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Baudrate()]).valid())
                {
                    GetValue = (*Value())[ItemName_Baudrate()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter_SlaveRealtimeCAN


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter_SlaveFile
//------------------------------------------------------------------------
class CType_Config_Adapter_SlaveFile : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Dummy(void)
        {
            static std::string str("Dummy");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter_SlaveFile");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.805");
        return str;
    }
public:
    CType_Config_Adapter_SlaveFile(void)
    {
        try
        {
            Construct_Dummy();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter_SlaveFile(const CType_Config_Adapter_SlaveFile& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter_SlaveFile(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Dummy();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter_SlaveFile(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Dummy();
        }
        catch (...) {}
    }
//------------------------------------------------------------------------
// Item Dummy (Type: "bool")
protected:
    void Construct_Dummy(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_Dummy()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_Dummy()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_Dummy(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Dummy()))
                {
                    Construct_Dummy();
                }
                if ((*Value()).hasMember(ItemName_Dummy()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_Dummy()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Dummy(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_Dummy()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_Dummy(void) const
        {
            bool GetValue = (*Value())[ItemName_Dummy()];
            return (bool)GetValue;
        }
        bool Get_Dummy(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Dummy()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_Dummy()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter_SlaveFile


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Adapter
//------------------------------------------------------------------------
class CType_Config_Adapter : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_SlaveRS485(void)
        {
            static std::string str("SlaveRS485");
            return str;
        }
    public:
        static std::string const& ItemName_SlaveRealtimeRS485(void)
        {
            static std::string str("SlaveRealtimeRS485");
            return str;
        }
    public:
        static std::string const& ItemName_SlaveRealtimeCAN(void)
        {
            static std::string str("SlaveRealtimeCAN");
            return str;
        }
    public:
        static std::string const& ItemName_SlaveFile(void)
        {
            static std::string str("SlaveFile");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Adapter");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.800");
        return str;
    }
public:
    CType_Config_Adapter(void)
    {
        try
        {
            Construct_General();
            Construct_SlaveRS485();
            Construct_SlaveRealtimeRS485();
            Construct_SlaveRealtimeCAN();
            Construct_SlaveFile();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Adapter(const CType_Config_Adapter& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Adapter(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_SlaveRS485();
            Construct_SlaveRealtimeRS485();
            Construct_SlaveRealtimeCAN();
            Construct_SlaveFile();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Adapter(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_SlaveRS485();
            Initialize_SlaveRealtimeRS485();
            Initialize_SlaveRealtimeCAN();
            Initialize_SlaveFile();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Adapter_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Adapter_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Adapter_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Adapter_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Adapter_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Adapter_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SlaveRS485 (Type: "CType_Config_Adapter_SlaveRS485")
    protected:
        void Construct_SlaveRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRS485()))
                {
                    CType_Config_Adapter_SlaveRS485 InitValue;
                    (*Value())[ItemName_SlaveRS485()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SlaveRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRS485()))
                {
                    Construct_SlaveRS485();
                }
                if ((*Value()).hasMember(ItemName_SlaveRS485()))
                {
                    CType_Config_Adapter_SlaveRS485 InitValue;
                    (*Value())[ItemName_SlaveRS485()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SlaveRS485(const CType_Config_Adapter_SlaveRS485& SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveRS485()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Adapter_SlaveRS485 Get_SlaveRS485(void) const
        {
            return (*Value())[ItemName_SlaveRS485()];
        }
        bool Get_SlaveRS485(CType_Config_Adapter_SlaveRS485& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SlaveRS485()]).valid())
                {
                    GetValue = (*Value())[ItemName_SlaveRS485()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SlaveRealtimeRS485 (Type: "CType_Config_Adapter_SlaveRealtimeRS485")
    protected:
        void Construct_SlaveRealtimeRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRealtimeRS485()))
                {
                    CType_Config_Adapter_SlaveRealtimeRS485 InitValue;
                    (*Value())[ItemName_SlaveRealtimeRS485()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SlaveRealtimeRS485(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRealtimeRS485()))
                {
                    Construct_SlaveRealtimeRS485();
                }
                if ((*Value()).hasMember(ItemName_SlaveRealtimeRS485()))
                {
                    CType_Config_Adapter_SlaveRealtimeRS485 InitValue;
                    (*Value())[ItemName_SlaveRealtimeRS485()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SlaveRealtimeRS485(const CType_Config_Adapter_SlaveRealtimeRS485& SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveRealtimeRS485()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Adapter_SlaveRealtimeRS485 Get_SlaveRealtimeRS485(void) const
        {
            return (*Value())[ItemName_SlaveRealtimeRS485()];
        }
        bool Get_SlaveRealtimeRS485(CType_Config_Adapter_SlaveRealtimeRS485& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SlaveRealtimeRS485()]).valid())
                {
                    GetValue = (*Value())[ItemName_SlaveRealtimeRS485()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SlaveRealtimeCAN (Type: "CType_Config_Adapter_SlaveRealtimeCAN")
    protected:
        void Construct_SlaveRealtimeCAN(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRealtimeCAN()))
                {
                    CType_Config_Adapter_SlaveRealtimeCAN InitValue;
                    (*Value())[ItemName_SlaveRealtimeCAN()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SlaveRealtimeCAN(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveRealtimeCAN()))
                {
                    Construct_SlaveRealtimeCAN();
                }
                if ((*Value()).hasMember(ItemName_SlaveRealtimeCAN()))
                {
                    CType_Config_Adapter_SlaveRealtimeCAN InitValue;
                    (*Value())[ItemName_SlaveRealtimeCAN()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SlaveRealtimeCAN(const CType_Config_Adapter_SlaveRealtimeCAN& SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveRealtimeCAN()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Adapter_SlaveRealtimeCAN Get_SlaveRealtimeCAN(void) const
        {
            return (*Value())[ItemName_SlaveRealtimeCAN()];
        }
        bool Get_SlaveRealtimeCAN(CType_Config_Adapter_SlaveRealtimeCAN& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SlaveRealtimeCAN()]).valid())
                {
                    GetValue = (*Value())[ItemName_SlaveRealtimeCAN()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SlaveFile (Type: "CType_Config_Adapter_SlaveFile")
    protected:
        void Construct_SlaveFile(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveFile()))
                {
                    CType_Config_Adapter_SlaveFile InitValue;
                    (*Value())[ItemName_SlaveFile()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SlaveFile(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SlaveFile()))
                {
                    Construct_SlaveFile();
                }
                if ((*Value()).hasMember(ItemName_SlaveFile()))
                {
                    CType_Config_Adapter_SlaveFile InitValue;
                    (*Value())[ItemName_SlaveFile()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SlaveFile(const CType_Config_Adapter_SlaveFile& SetValue)
        {
            try
            {
                (*Value())[ItemName_SlaveFile()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Adapter_SlaveFile Get_SlaveFile(void) const
        {
            return (*Value())[ItemName_SlaveFile()];
        }
        bool Get_SlaveFile(CType_Config_Adapter_SlaveFile& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SlaveFile()]).valid())
                {
                    GetValue = (*Value())[ItemName_SlaveFile()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Adapter


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Controller_General
//------------------------------------------------------------------------
class CType_Config_Controller_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_OwnerID(void)
        {
            static std::string str("OwnerID");
            return str;
        }
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsAdapter(void)
        {
            static std::string str("OwnedIDsAdapter");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsInternalModule(void)
        {
            static std::string str("OwnedIDsInternalModule");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsFeature(void)
        {
            static std::string str("OwnedIDsFeature");
            return str;
        }
    public:
        static std::string const& ItemName_Location(void)
        {
            static std::string str("Location");
            return str;
        }
    public:
        static std::string const& ItemName_LocationDetails(void)
        {
            static std::string str("LocationDetails");
            return str;
        }
    public:
        static std::string const& ItemName_UserName(void)
        {
            static std::string str("UserName");
            return str;
        }
    public:
        static std::string const& ItemName_UserSection(void)
        {
            static std::string str("UserSection");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_TypeDetails(void)
        {
            static std::string str("TypeDetails");
            return str;
        }
    public:
        static std::string const& ItemName_DeviceTuning(void)
        {
            static std::string str("DeviceTuning");
            return str;
        }
    public:
        static std::string const& ItemName_Image(void)
        {
            static std::string str("Image");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Controller_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.909");
        return str;
    }
public:
    CType_Config_Controller_General(void)
    {
        try
        {
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsAdapter();
            Construct_OwnedIDsInternalModule();
            Construct_OwnedIDsFeature();
            Construct_Location();
            Construct_LocationDetails();
            Construct_UserName();
            Construct_UserSection();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceTuning();
            Construct_Image();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Controller_General(const CType_Config_Controller_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Controller_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_OwnerID();
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsAdapter();
            Construct_OwnedIDsInternalModule();
            Construct_OwnedIDsFeature();
            Construct_Location();
            Construct_LocationDetails();
            Construct_UserName();
            Construct_UserSection();
            Construct_Type();
            Construct_TypeDetails();
            Construct_DeviceTuning();
            Construct_Image();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Controller_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_OwnerID();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsAdapter();
            Initialize_OwnedIDsInternalModule();
            Initialize_OwnedIDsFeature();
            Initialize_Location();
            Initialize_LocationDetails();
            Initialize_UserName();
            Initialize_UserSection();
            Initialize_Type();
            Initialize_TypeDetails();
            Initialize_DeviceTuning();
            Initialize_Image();
            Initialize_Additional();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_OwnerID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnerID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsAdapter (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsAdapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsAdapter()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsAdapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    Construct_OwnedIDsAdapter();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsAdapter()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsAdapter(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsAdapter()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsAdapter(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    return (*Value())[ItemName_OwnedIDsAdapter()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsAdapter(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    (*Value())[ItemName_OwnedIDsAdapter()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsAdapter(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsAdapter()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsAdapter(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    (*Value())[ItemName_OwnedIDsAdapter()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsAdapter(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsAdapter()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsAdapter()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsAdapter(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsAdapter()][ArrayIndex];
        }
        bool Get_OwnedIDsAdapter(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsAdapter()))
                {
                    if (((*Value())[ItemName_OwnedIDsAdapter()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsAdapter()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsInternalModule (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsInternalModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsInternalModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    Construct_OwnedIDsInternalModule();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsInternalModule(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsInternalModule(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    return (*Value())[ItemName_OwnedIDsInternalModule()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsInternalModule(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsInternalModule(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsInternalModule()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsInternalModule(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    (*Value())[ItemName_OwnedIDsInternalModule()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsInternalModule(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsInternalModule()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsInternalModule(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex];
        }
        bool Get_OwnedIDsInternalModule(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    if (((*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsFeature (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsFeature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsFeature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    Construct_OwnedIDsFeature();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsFeature(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsFeature(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    return (*Value())[ItemName_OwnedIDsFeature()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsFeature(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsFeature(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsFeature()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsFeature(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    (*Value())[ItemName_OwnedIDsFeature()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsFeature(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsFeature()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsFeature(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex];
        }
        bool Get_OwnedIDsFeature(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    if (((*Value())[ItemName_OwnedIDsFeature()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Location (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Location(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Location()))
                {
                    Construct_Location();
                }
                if ((*Value()).hasMember(ItemName_Location()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Location()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Location(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Location()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Location(void) const
        {
            return (*Value())[ItemName_Location()];
        }
        bool Get_Location(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Location()]).valid())
                {
                    GetValue = (*Value())[ItemName_Location()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LocationDetails (Type: "CType_Config_Universal_General_LocationDetails")
    protected:
        void Construct_LocationDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LocationDetails()))
                {
                    CType_Config_Universal_General_LocationDetails InitValue;
                    (*Value())[ItemName_LocationDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LocationDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LocationDetails()))
                {
                    Construct_LocationDetails();
                }
                if ((*Value()).hasMember(ItemName_LocationDetails()))
                {
                    CType_Config_Universal_General_LocationDetails InitValue;
                    (*Value())[ItemName_LocationDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LocationDetails(const CType_Config_Universal_General_LocationDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_LocationDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_LocationDetails Get_LocationDetails(void) const
        {
            return (*Value())[ItemName_LocationDetails()];
        }
        bool Get_LocationDetails(CType_Config_Universal_General_LocationDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LocationDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_LocationDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserName (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserName()))
                {
                    Construct_UserName();
                }
                if ((*Value()).hasMember(ItemName_UserName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_UserName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserName(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_UserName(void) const
        {
            return (*Value())[ItemName_UserName()];
        }
        bool Get_UserName(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserName()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item UserSection (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringList")
    protected:
        void Construct_UserSection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserSection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_UserSection()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_UserSection(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_UserSection()))
                {
                    Construct_UserSection();
                }
                if ((*Value()).hasMember(ItemName_UserSection()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringList InitValue;
                    (*Value())[ItemName_UserSection()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_UserSection(const GInsXmlRpcStdAPI::CGIns_Edit_StringList& SetValue)
        {
            try
            {
                (*Value())[ItemName_UserSection()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringList Get_UserSection(void) const
        {
            return (*Value())[ItemName_UserSection()];
        }
        bool Get_UserSection(GInsXmlRpcStdAPI::CGIns_Edit_StringList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_UserSection()]).valid())
                {
                    GetValue = (*Value())[ItemName_UserSection()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_DeviceType")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_DeviceType Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeDetails (Type: "CType_Info_DeviceTypeDetails")
    protected:
        void Construct_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    Construct_TypeDetails();
                }
                if ((*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeDetails(const CType_Info_DeviceTypeDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_DeviceTypeDetails Get_TypeDetails(void) const
        {
            return (*Value())[ItemName_TypeDetails()];
        }
        bool Get_TypeDetails(CType_Info_DeviceTypeDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DeviceTuning (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_DeviceTuning(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DeviceTuning()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DeviceTuning(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    Construct_DeviceTuning();
                }
                if ((*Value()).hasMember(ItemName_DeviceTuning()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_DeviceTuning()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DeviceTuning(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DeviceTuning()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_DeviceTuning(void) const
        {
            return (*Value())[ItemName_DeviceTuning()];
        }
        bool Get_DeviceTuning(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DeviceTuning()]).valid())
                {
                    GetValue = (*Value())[ItemName_DeviceTuning()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Image (Type: "GInsXmlRpcStdAPI::CGIns_Base_Image")
    protected:
        void Construct_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    Construct_Image();
                }
                if ((*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Image(const GInsXmlRpcStdAPI::CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_Image()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_Image Get_Image(void) const
        {
            return (*Value())[ItemName_Image()];
        }
        bool Get_Image(GInsXmlRpcStdAPI::CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Image()]).valid())
                {
                    GetValue = (*Value())[ItemName_Image()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_Universal_General_Additional")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Universal_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Universal_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_Universal_General_Additional& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_Universal_General_Additional& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Controller_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Controller_Synchronization_PTP
//------------------------------------------------------------------------
class CType_Config_Controller_Synchronization_PTP : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ClockDomain(void)
        {
            static std::string str("ClockDomain");
            return str;
        }
    public:
        static std::string const& ItemName_ClockPriority1(void)
        {
            static std::string str("ClockPriority1");
            return str;
        }
    public:
        static std::string const& ItemName_ClockPriority2(void)
        {
            static std::string str("ClockPriority2");
            return str;
        }
    public:
        static std::string const& ItemName_DelayMechanismType(void)
        {
            static std::string str("DelayMechanismType");
            return str;
        }
    public:
        static std::string const& ItemName_TransportType(void)
        {
            static std::string str("TransportType");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Controller_Synchronization_PTP");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.939");
        return str;
    }
public:
    CType_Config_Controller_Synchronization_PTP(void)
    {
        try
        {
            Construct_ClockDomain();
            Construct_ClockPriority1();
            Construct_ClockPriority2();
            Construct_DelayMechanismType();
            Construct_TransportType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Controller_Synchronization_PTP(const CType_Config_Controller_Synchronization_PTP& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Controller_Synchronization_PTP(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ClockDomain();
            Construct_ClockPriority1();
            Construct_ClockPriority2();
            Construct_DelayMechanismType();
            Construct_TransportType();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Controller_Synchronization_PTP(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ClockDomain();
            Initialize_ClockPriority1();
            Initialize_ClockPriority2();
            Initialize_DelayMechanismType();
            Initialize_TransportType();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ClockDomain (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ClockDomain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockDomain()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockDomain()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClockDomain(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockDomain()))
                {
                    Construct_ClockDomain();
                }
                if ((*Value()).hasMember(ItemName_ClockDomain()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockDomain()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClockDomain(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClockDomain()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ClockDomain(void) const
        {
            return (*Value())[ItemName_ClockDomain()];
        }
        bool Get_ClockDomain(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClockDomain()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClockDomain()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ClockPriority1 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ClockPriority1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockPriority1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockPriority1()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClockPriority1(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockPriority1()))
                {
                    Construct_ClockPriority1();
                }
                if ((*Value()).hasMember(ItemName_ClockPriority1()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockPriority1()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClockPriority1(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClockPriority1()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ClockPriority1(void) const
        {
            return (*Value())[ItemName_ClockPriority1()];
        }
        bool Get_ClockPriority1(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClockPriority1()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClockPriority1()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ClockPriority2 (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer")
    protected:
        void Construct_ClockPriority2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockPriority2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockPriority2()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClockPriority2(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClockPriority2()))
                {
                    Construct_ClockPriority2();
                }
                if ((*Value()).hasMember(ItemName_ClockPriority2()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer InitValue;
                    (*Value())[ItemName_ClockPriority2()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClockPriority2(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClockPriority2()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer Get_ClockPriority2(void) const
        {
            return (*Value())[ItemName_ClockPriority2()];
        }
        bool Get_ClockPriority2(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Integer& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClockPriority2()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClockPriority2()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DelayMechanismType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_DelayMechanismType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DelayMechanismType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DelayMechanismType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DelayMechanismType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DelayMechanismType()))
                {
                    Construct_DelayMechanismType();
                }
                if ((*Value()).hasMember(ItemName_DelayMechanismType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_DelayMechanismType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DelayMechanismType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_DelayMechanismType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_DelayMechanismType(void) const
        {
            return (*Value())[ItemName_DelayMechanismType()];
        }
        bool Get_DelayMechanismType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DelayMechanismType()]).valid())
                {
                    GetValue = (*Value())[ItemName_DelayMechanismType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TransportType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TransportType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TransportType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TransportType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TransportType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TransportType()))
                {
                    Construct_TransportType();
                }
                if ((*Value()).hasMember(ItemName_TransportType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TransportType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TransportType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TransportType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TransportType(void) const
        {
            return (*Value())[ItemName_TransportType()];
        }
        bool Get_TransportType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TransportType()]).valid())
                {
                    GetValue = (*Value())[ItemName_TransportType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Controller_Synchronization_PTP


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Controller_Synchronization
//------------------------------------------------------------------------
class CType_Config_Controller_Synchronization : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_LeadFrequency(void)
        {
            static std::string str("LeadFrequency");
            return str;
        }
    public:
        static std::string const& ItemName_BaseCycleFrequencyDivider(void)
        {
            static std::string str("BaseCycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_SystemCycleFrequencyDivider(void)
        {
            static std::string str("SystemCycleFrequencyDivider");
            return str;
        }
    public:
        static std::string const& ItemName_Legend0(void)
        {
            static std::string str("Legend0");
            return str;
        }
    public:
        static std::string const& ItemName_PTP(void)
        {
            static std::string str("PTP");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Controller_Synchronization");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.910");
        return str;
    }
public:
    CType_Config_Controller_Synchronization(void)
    {
        try
        {
            Construct_Type();
            Construct_LeadFrequency();
            Construct_BaseCycleFrequencyDivider();
            Construct_SystemCycleFrequencyDivider();
            Construct_Legend0();
            Construct_PTP();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Controller_Synchronization(const CType_Config_Controller_Synchronization& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Controller_Synchronization(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_Type();
            Construct_LeadFrequency();
            Construct_BaseCycleFrequencyDivider();
            Construct_SystemCycleFrequencyDivider();
            Construct_Legend0();
            Construct_PTP();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Controller_Synchronization(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_Type();
            Initialize_LeadFrequency();
            Initialize_BaseCycleFrequencyDivider();
            Initialize_SystemCycleFrequencyDivider();
            Initialize_Legend0();
            Initialize_PTP();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LeadFrequency (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_LeadFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LeadFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LeadFrequency()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LeadFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LeadFrequency()))
                {
                    Construct_LeadFrequency();
                }
                if ((*Value()).hasMember(ItemName_LeadFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_LeadFrequency()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LeadFrequency(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_LeadFrequency()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_LeadFrequency(void) const
        {
            return (*Value())[ItemName_LeadFrequency()];
        }
        bool Get_LeadFrequency(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LeadFrequency()]).valid())
                {
                    GetValue = (*Value())[ItemName_LeadFrequency()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BaseCycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_BaseCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BaseCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BaseCycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BaseCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BaseCycleFrequencyDivider()))
                {
                    Construct_BaseCycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_BaseCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BaseCycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BaseCycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_BaseCycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_BaseCycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_BaseCycleFrequencyDivider()];
        }
        bool Get_BaseCycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BaseCycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_BaseCycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item SystemCycleFrequencyDivider (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_SystemCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SystemCycleFrequencyDivider()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SystemCycleFrequencyDivider(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemCycleFrequencyDivider()))
                {
                    Construct_SystemCycleFrequencyDivider();
                }
                if ((*Value()).hasMember(ItemName_SystemCycleFrequencyDivider()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_SystemCycleFrequencyDivider()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SystemCycleFrequencyDivider(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_SystemCycleFrequencyDivider()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_SystemCycleFrequencyDivider(void) const
        {
            return (*Value())[ItemName_SystemCycleFrequencyDivider()];
        }
        bool Get_SystemCycleFrequencyDivider(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SystemCycleFrequencyDivider()]).valid())
                {
                    GetValue = (*Value())[ItemName_SystemCycleFrequencyDivider()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Legend0 (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Legend0(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Legend0()))
                {
                    Construct_Legend0();
                }
                if ((*Value()).hasMember(ItemName_Legend0()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_Legend0()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Legend0(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Legend0()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_Legend0(void) const
        {
            return (*Value())[ItemName_Legend0()];
        }
        bool Get_Legend0(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Legend0()]).valid())
                {
                    GetValue = (*Value())[ItemName_Legend0()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PTP (Type: "CType_Config_Controller_Synchronization_PTP")
    protected:
        void Construct_PTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PTP()))
                {
                    CType_Config_Controller_Synchronization_PTP InitValue;
                    (*Value())[ItemName_PTP()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PTP(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PTP()))
                {
                    Construct_PTP();
                }
                if ((*Value()).hasMember(ItemName_PTP()))
                {
                    CType_Config_Controller_Synchronization_PTP InitValue;
                    (*Value())[ItemName_PTP()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PTP(const CType_Config_Controller_Synchronization_PTP& SetValue)
        {
            try
            {
                (*Value())[ItemName_PTP()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Controller_Synchronization_PTP Get_PTP(void) const
        {
            return (*Value())[ItemName_PTP()];
        }
        bool Get_PTP(CType_Config_Controller_Synchronization_PTP& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PTP()]).valid())
                {
                    GetValue = (*Value())[ItemName_PTP()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Controller_Synchronization


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Controller
//------------------------------------------------------------------------
class CType_Config_Controller : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_Synchronization(void)
        {
            static std::string str("Synchronization");
            return str;
        }
    public:
        static std::string const& ItemName_Adapter(void)
        {
            static std::string str("Adapter");
            return str;
        }
    public:
        static std::string const& ItemName_Function(void)
        {
            static std::string str("Function");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Controller");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.900");
        return str;
    }
public:
    CType_Config_Controller(void)
    {
        try
        {
            Construct_General();
            Construct_Synchronization();
            Construct_Adapter();
            Construct_Function();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Controller(const CType_Config_Controller& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Controller(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_Synchronization();
            Construct_Adapter();
            Construct_Function();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Controller(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_Synchronization();
            Initialize_Adapter();
            Initialize_Function();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Controller_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Controller_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Controller_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Controller_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Controller_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Controller_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Synchronization (Type: "CType_Config_Controller_Synchronization")
    protected:
        void Construct_Synchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Synchronization()))
                {
                    CType_Config_Controller_Synchronization InitValue;
                    (*Value())[ItemName_Synchronization()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Synchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Synchronization()))
                {
                    Construct_Synchronization();
                }
                if ((*Value()).hasMember(ItemName_Synchronization()))
                {
                    CType_Config_Controller_Synchronization InitValue;
                    (*Value())[ItemName_Synchronization()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Synchronization(const CType_Config_Controller_Synchronization& SetValue)
        {
            try
            {
                (*Value())[ItemName_Synchronization()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Controller_Synchronization Get_Synchronization(void) const
        {
            return (*Value())[ItemName_Synchronization()];
        }
        bool Get_Synchronization(CType_Config_Controller_Synchronization& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Synchronization()]).valid())
                {
                    GetValue = (*Value())[ItemName_Synchronization()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Adapter (Type: "CType_Config_Universal_Adapter")
    protected:
        void Construct_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Universal_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    Construct_Adapter();
                }
                if ((*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Universal_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Adapter(const CType_Config_Universal_Adapter& SetValue)
        {
            try
            {
                (*Value())[ItemName_Adapter()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter Get_Adapter(void) const
        {
            return (*Value())[ItemName_Adapter()];
        }
        bool Get_Adapter(CType_Config_Universal_Adapter& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Adapter()]).valid())
                {
                    GetValue = (*Value())[ItemName_Adapter()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Function (Type: "CType_Config_Universal_Function")
    protected:
        void Construct_Function(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Function()))
                {
                    CType_Config_Universal_Function InitValue;
                    (*Value())[ItemName_Function()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Function(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Function()))
                {
                    Construct_Function();
                }
                if ((*Value()).hasMember(ItemName_Function()))
                {
                    CType_Config_Universal_Function InitValue;
                    (*Value())[ItemName_Function()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Function(const CType_Config_Universal_Function& SetValue)
        {
            try
            {
                (*Value())[ItemName_Function()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function Get_Function(void) const
        {
            return (*Value())[ItemName_Function()];
        }
        bool Get_Function(CType_Config_Universal_Function& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Function()]).valid())
                {
                    GetValue = (*Value())[ItemName_Function()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Controller


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Project_General
//------------------------------------------------------------------------
class CType_Config_Project_General : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_ID(void)
        {
            static std::string str("ID");
            return str;
        }
    public:
        static std::string const& ItemName_ChangeDateTime(void)
        {
            static std::string str("ChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToStorage(void)
        {
            static std::string str("ChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_ChangedWithRespectToDevice(void)
        {
            static std::string str("ChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangeDateTime(void)
        {
            static std::string str("OwnedChangeDateTime");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToStorage(void)
        {
            static std::string str("OwnedChangedWithRespectToStorage");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedChangedWithRespectToDevice(void)
        {
            static std::string str("OwnedChangedWithRespectToDevice");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsController(void)
        {
            static std::string str("OwnedIDsController");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsInternalModule(void)
        {
            static std::string str("OwnedIDsInternalModule");
            return str;
        }
    public:
        static std::string const& ItemName_OwnedIDsFeature(void)
        {
            static std::string str("OwnedIDsFeature");
            return str;
        }
    public:
        static std::string const& ItemName_Description(void)
        {
            static std::string str("Description");
            return str;
        }
    public:
        static std::string const& ItemName_LocationDetails(void)
        {
            static std::string str("LocationDetails");
            return str;
        }
    public:
        static std::string const& ItemName_LinkFileName(void)
        {
            static std::string str("LinkFileName");
            return str;
        }
    public:
        static std::string const& ItemName_Type(void)
        {
            static std::string str("Type");
            return str;
        }
    public:
        static std::string const& ItemName_TypeDetails(void)
        {
            static std::string str("TypeDetails");
            return str;
        }
    public:
        static std::string const& ItemName_Image(void)
        {
            static std::string str("Image");
            return str;
        }
    public:
        static std::string const& ItemName_Additional(void)
        {
            static std::string str("Additional");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Project_General");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.1001");
        return str;
    }
public:
    CType_Config_Project_General(void)
    {
        try
        {
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsController();
            Construct_OwnedIDsInternalModule();
            Construct_OwnedIDsFeature();
            Construct_Description();
            Construct_LocationDetails();
            Construct_LinkFileName();
            Construct_Type();
            Construct_TypeDetails();
            Construct_Image();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Project_General(const CType_Config_Project_General& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Project_General(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_ID();
            Construct_ChangeDateTime();
            Construct_ChangedWithRespectToStorage();
            Construct_ChangedWithRespectToDevice();
            Construct_OwnedChangeDateTime();
            Construct_OwnedChangedWithRespectToStorage();
            Construct_OwnedChangedWithRespectToDevice();
            Construct_OwnedIDsController();
            Construct_OwnedIDsInternalModule();
            Construct_OwnedIDsFeature();
            Construct_Description();
            Construct_LocationDetails();
            Construct_LinkFileName();
            Construct_Type();
            Construct_TypeDetails();
            Construct_Image();
            Construct_Additional();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Project_General(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_ID();
            Initialize_ChangeDateTime();
            Initialize_ChangedWithRespectToStorage();
            Initialize_ChangedWithRespectToDevice();
            Initialize_OwnedChangeDateTime();
            Initialize_OwnedChangedWithRespectToStorage();
            Initialize_OwnedChangedWithRespectToDevice();
            Initialize_OwnedIDsController();
            Initialize_OwnedIDsInternalModule();
            Initialize_OwnedIDsFeature();
            Initialize_Description();
            Initialize_LocationDetails();
            Initialize_LinkFileName();
            Initialize_Type();
            Initialize_TypeDetails();
            Initialize_Image();
            Initialize_Additional();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    Construct_ChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_ChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_ChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_ChangeDateTime(void) const
        {
            return (*Value())[ItemName_ChangeDateTime()];
        }
        bool Get_ChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    Construct_ChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToStorage()];
        }
        bool Get_ChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    Construct_ChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_ChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_ChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_ChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_ChangedWithRespectToDevice()];
        }
        bool Get_ChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangeDateTime (Type: "GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue")
    protected:
        void Construct_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangeDateTime(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    Construct_OwnedChangeDateTime();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangeDateTime()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue InitValue;
                    (*Value())[ItemName_OwnedChangeDateTime()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangeDateTime(const GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangeDateTime()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue Get_OwnedChangeDateTime(void) const
        {
            return (*Value())[ItemName_OwnedChangeDateTime()];
        }
        bool Get_OwnedChangeDateTime(GInsXmlRpcStdAPI::CGIns_Info_DateTimeValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangeDateTime()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangeDateTime()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToStorage (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToStorage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    Construct_OwnedChangedWithRespectToStorage();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToStorage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToStorage(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToStorage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToStorage(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
        }
        bool Get_OwnedChangedWithRespectToStorage(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToStorage()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToStorage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedChangedWithRespectToDevice (Type: "GInsXmlRpcStdAPI::CGIns_Info_StateValue")
    protected:
        void Construct_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnedChangedWithRespectToDevice(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    Construct_OwnedChangedWithRespectToDevice();
                }
                if ((*Value()).hasMember(ItemName_OwnedChangedWithRespectToDevice()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StateValue InitValue;
                    (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedChangedWithRespectToDevice(const GInsXmlRpcStdAPI::CGIns_Info_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedChangedWithRespectToDevice()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StateValue Get_OwnedChangedWithRespectToDevice(void) const
        {
            return (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
        }
        bool Get_OwnedChangedWithRespectToDevice(GInsXmlRpcStdAPI::CGIns_Info_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedChangedWithRespectToDevice()]).valid())
                {
                    GetValue = (*Value())[ItemName_OwnedChangedWithRespectToDevice()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsController (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsController(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsController()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsController(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    Construct_OwnedIDsController();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsController()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsController(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsController()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsController(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    return (*Value())[ItemName_OwnedIDsController()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsController(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    (*Value())[ItemName_OwnedIDsController()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsController(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsController()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsController(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    (*Value())[ItemName_OwnedIDsController()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsController(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsController()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsController()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsController(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsController()][ArrayIndex];
        }
        bool Get_OwnedIDsController(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsController()))
                {
                    if (((*Value())[ItemName_OwnedIDsController()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsController()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsInternalModule (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsInternalModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsInternalModule(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    Construct_OwnedIDsInternalModule();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsInternalModule(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsInternalModule()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsInternalModule(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    return (*Value())[ItemName_OwnedIDsInternalModule()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsInternalModule(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    (*Value())[ItemName_OwnedIDsInternalModule()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsInternalModule(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsInternalModule()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsInternalModule(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    (*Value())[ItemName_OwnedIDsInternalModule()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsInternalModule(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsInternalModule()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsInternalModule(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex];
        }
        bool Get_OwnedIDsInternalModule(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsInternalModule()))
                {
                    if (((*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsInternalModule()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnedIDsFeature (Type: "CType_Base_ObjectRef[0]")
    protected:
        void Construct_OwnedIDsFeature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_OwnedIDsFeature(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    Construct_OwnedIDsFeature();
                }
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    CType_Base_ObjectRef InitValue;
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_OwnedIDsFeature(int NewSize)
        {
            try
            {
                CType_Base_ObjectRef InitValue;
                (*Value())[ItemName_OwnedIDsFeature()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_OwnedIDsFeature(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    return (*Value())[ItemName_OwnedIDsFeature()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_OwnedIDsFeature(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    (*Value())[ItemName_OwnedIDsFeature()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_OwnedIDsFeature(int ArrayIndex, CType_Base_ObjectRef SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsFeature()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_OwnedIDsFeature(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    (*Value())[ItemName_OwnedIDsFeature()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIDsFeature(int ArrayIndex, const CType_Base_ObjectRef& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIDsFeature()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ObjectRef Get_OwnedIDsFeature(int ArrayIndex) const
        {
            return (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex];
        }
        bool Get_OwnedIDsFeature(int ArrayIndex, CType_Base_ObjectRef& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_OwnedIDsFeature()))
                {
                    if (((*Value())[ItemName_OwnedIDsFeature()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_OwnedIDsFeature()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Description (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Description(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Description()))
                {
                    Construct_Description();
                }
                if ((*Value()).hasMember(ItemName_Description()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_Description()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Description(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Description()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_Description(void) const
        {
            return (*Value())[ItemName_Description()];
        }
        bool Get_Description(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Description()]).valid())
                {
                    GetValue = (*Value())[ItemName_Description()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LocationDetails (Type: "CType_Config_Universal_General_LocationDetails")
    protected:
        void Construct_LocationDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LocationDetails()))
                {
                    CType_Config_Universal_General_LocationDetails InitValue;
                    (*Value())[ItemName_LocationDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LocationDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LocationDetails()))
                {
                    Construct_LocationDetails();
                }
                if ((*Value()).hasMember(ItemName_LocationDetails()))
                {
                    CType_Config_Universal_General_LocationDetails InitValue;
                    (*Value())[ItemName_LocationDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LocationDetails(const CType_Config_Universal_General_LocationDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_LocationDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_LocationDetails Get_LocationDetails(void) const
        {
            return (*Value())[ItemName_LocationDetails()];
        }
        bool Get_LocationDetails(CType_Config_Universal_General_LocationDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LocationDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_LocationDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item LinkFileName (Type: "GInsXmlRpcStdAPI::CGIns_Info_StringValue")
    protected:
        void Construct_LinkFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LinkFileName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_LinkFileName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_LinkFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_LinkFileName()))
                {
                    Construct_LinkFileName();
                }
                if ((*Value()).hasMember(ItemName_LinkFileName()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_StringValue InitValue;
                    (*Value())[ItemName_LinkFileName()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_LinkFileName(const GInsXmlRpcStdAPI::CGIns_Info_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_LinkFileName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_StringValue Get_LinkFileName(void) const
        {
            return (*Value())[ItemName_LinkFileName()];
        }
        bool Get_LinkFileName(GInsXmlRpcStdAPI::CGIns_Info_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_LinkFileName()]).valid())
                {
                    GetValue = (*Value())[ItemName_LinkFileName()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_DeviceType")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_DeviceType InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_DeviceType Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_DeviceType& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TypeDetails (Type: "CType_Info_DeviceTypeDetails")
    protected:
        void Construct_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TypeDetails(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TypeDetails()))
                {
                    Construct_TypeDetails();
                }
                if ((*Value()).hasMember(ItemName_TypeDetails()))
                {
                    CType_Info_DeviceTypeDetails InitValue;
                    (*Value())[ItemName_TypeDetails()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TypeDetails(const CType_Info_DeviceTypeDetails& SetValue)
        {
            try
            {
                (*Value())[ItemName_TypeDetails()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_DeviceTypeDetails Get_TypeDetails(void) const
        {
            return (*Value())[ItemName_TypeDetails()];
        }
        bool Get_TypeDetails(CType_Info_DeviceTypeDetails& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TypeDetails()]).valid())
                {
                    GetValue = (*Value())[ItemName_TypeDetails()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Image (Type: "GInsXmlRpcStdAPI::CGIns_Base_Image")
    protected:
        void Construct_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Image(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Image()))
                {
                    Construct_Image();
                }
                if ((*Value()).hasMember(ItemName_Image()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_Image InitValue;
                    (*Value())[ItemName_Image()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Image(const GInsXmlRpcStdAPI::CGIns_Base_Image& SetValue)
        {
            try
            {
                (*Value())[ItemName_Image()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_Image Get_Image(void) const
        {
            return (*Value())[ItemName_Image()];
        }
        bool Get_Image(GInsXmlRpcStdAPI::CGIns_Base_Image& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Image()]).valid())
                {
                    GetValue = (*Value())[ItemName_Image()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Additional (Type: "CType_Config_Universal_General_Additional")
    protected:
        void Construct_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Universal_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Additional(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Additional()))
                {
                    Construct_Additional();
                }
                if ((*Value()).hasMember(ItemName_Additional()))
                {
                    CType_Config_Universal_General_Additional InitValue;
                    (*Value())[ItemName_Additional()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Additional(const CType_Config_Universal_General_Additional& SetValue)
        {
            try
            {
                (*Value())[ItemName_Additional()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_General_Additional Get_Additional(void) const
        {
            return (*Value())[ItemName_Additional()];
        }
        bool Get_Additional(CType_Config_Universal_General_Additional& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Additional()]).valid())
                {
                    GetValue = (*Value())[ItemName_Additional()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Project_General


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Project_Synchronization
//------------------------------------------------------------------------
class CType_Config_Project_Synchronization : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_SystemCycleFrequency(void)
        {
            static std::string str("SystemCycleFrequency");
            return str;
        }
    public:
        static std::string const& ItemName_DataTransferFrequency(void)
        {
            static std::string str("DataTransferFrequency");
            return str;
        }
    public:
        static std::string const& ItemName_DataTransferTimeout(void)
        {
            static std::string str("DataTransferTimeout");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Project_Synchronization");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.1002");
        return str;
    }
public:
    CType_Config_Project_Synchronization(void)
    {
        try
        {
            Construct_SystemCycleFrequency();
            Construct_DataTransferFrequency();
            Construct_DataTransferTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Project_Synchronization(const CType_Config_Project_Synchronization& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Project_Synchronization(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_SystemCycleFrequency();
            Construct_DataTransferFrequency();
            Construct_DataTransferTimeout();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Project_Synchronization(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_SystemCycleFrequency();
            Initialize_DataTransferFrequency();
            Initialize_DataTransferTimeout();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item SystemCycleFrequency (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_SystemCycleFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemCycleFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SystemCycleFrequency()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SystemCycleFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SystemCycleFrequency()))
                {
                    Construct_SystemCycleFrequency();
                }
                if ((*Value()).hasMember(ItemName_SystemCycleFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_SystemCycleFrequency()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SystemCycleFrequency(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_SystemCycleFrequency()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_SystemCycleFrequency(void) const
        {
            return (*Value())[ItemName_SystemCycleFrequency()];
        }
        bool Get_SystemCycleFrequency(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SystemCycleFrequency()]).valid())
                {
                    GetValue = (*Value())[ItemName_SystemCycleFrequency()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataTransferFrequency (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataTransferFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataTransferFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataTransferFrequency()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataTransferFrequency(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataTransferFrequency()))
                {
                    Construct_DataTransferFrequency();
                }
                if ((*Value()).hasMember(ItemName_DataTransferFrequency()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataTransferFrequency()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataTransferFrequency(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataTransferFrequency()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataTransferFrequency(void) const
        {
            return (*Value())[ItemName_DataTransferFrequency()];
        }
        bool Get_DataTransferFrequency(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataTransferFrequency()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataTransferFrequency()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DataTransferTimeout (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_DataTransferTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataTransferTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataTransferTimeout()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DataTransferTimeout(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DataTransferTimeout()))
                {
                    Construct_DataTransferTimeout();
                }
                if ((*Value()).hasMember(ItemName_DataTransferTimeout()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_DataTransferTimeout()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DataTransferTimeout(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_DataTransferTimeout()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_DataTransferTimeout(void) const
        {
            return (*Value())[ItemName_DataTransferTimeout()];
        }
        bool Get_DataTransferTimeout(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DataTransferTimeout()]).valid())
                {
                    GetValue = (*Value())[ItemName_DataTransferTimeout()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Project_Synchronization


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CType_Config_Project
//------------------------------------------------------------------------
class CType_Config_Project : public GInsXmlRpc::XmlRpcValue
{
    public:
        static std::string const& ItemName_General(void)
        {
            static std::string str("General");
            return str;
        }
    public:
        static std::string const& ItemName_Synchronization(void)
        {
            static std::string str("Synchronization");
            return str;
        }
    public:
        static std::string const& ItemName_Adapter(void)
        {
            static std::string str("Adapter");
            return str;
        }
    public:
        static std::string const& ItemName_Function(void)
        {
            static std::string str("Function");
            return str;
        }
public:
    static std::string const& StructTypeName(void)
    {
        static std::string str("Type_Config_Project");
        return str;
    }
    static std::string const& StructTypeID(void)
    {
        static std::string str("1.1000");
        return str;
    }
public:
    CType_Config_Project(void)
    {
        try
        {
            Construct_General();
            Construct_Synchronization();
            Construct_Adapter();
            Construct_Function();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
    CType_Config_Project(const CType_Config_Project& rhs) : 
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    try
    {
        if ((*this).valid())
        {
            (*this).setStructTypeID(StructTypeID());
        }
    }
    catch (...) {}
        }
    CType_Config_Project(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            if (!(*this).valid())
            {
                return;
            }
            if (((*this).getType() != GInsXmlRpc::XmlRpcValue::TypeStruct) ||
                (!(*this).getStructTypeID().empty() && ((*this).getStructTypeID() != StructTypeID())))
            {
                (*this).invalidate();
            }
            Construct_General();
            Construct_Synchronization();
            Construct_Adapter();
            Construct_Function();
            (*this).setStructTypeID(StructTypeID());
            }
        catch (...) {}
    }
public:
    ~CType_Config_Project(void)
    {
    }
protected:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Initialize_General();
            Initialize_Synchronization();
            Initialize_Adapter();
            Initialize_Function();
        }
        catch (...) {}
    }
    //------------------------------------------------------------------------
    // Item General (Type: "CType_Config_Project_General")
    protected:
        void Construct_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Project_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_General(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_General()))
                {
                    Construct_General();
                }
                if ((*Value()).hasMember(ItemName_General()))
                {
                    CType_Config_Project_General InitValue;
                    (*Value())[ItemName_General()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_General(const CType_Config_Project_General& SetValue)
        {
            try
            {
                (*Value())[ItemName_General()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Project_General Get_General(void) const
        {
            return (*Value())[ItemName_General()];
        }
        bool Get_General(CType_Config_Project_General& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_General()]).valid())
                {
                    GetValue = (*Value())[ItemName_General()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Synchronization (Type: "CType_Config_Project_Synchronization")
    protected:
        void Construct_Synchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Synchronization()))
                {
                    CType_Config_Project_Synchronization InitValue;
                    (*Value())[ItemName_Synchronization()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Synchronization(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Synchronization()))
                {
                    Construct_Synchronization();
                }
                if ((*Value()).hasMember(ItemName_Synchronization()))
                {
                    CType_Config_Project_Synchronization InitValue;
                    (*Value())[ItemName_Synchronization()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Synchronization(const CType_Config_Project_Synchronization& SetValue)
        {
            try
            {
                (*Value())[ItemName_Synchronization()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Project_Synchronization Get_Synchronization(void) const
        {
            return (*Value())[ItemName_Synchronization()];
        }
        bool Get_Synchronization(CType_Config_Project_Synchronization& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Synchronization()]).valid())
                {
                    GetValue = (*Value())[ItemName_Synchronization()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Adapter (Type: "CType_Config_Universal_Adapter")
    protected:
        void Construct_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Universal_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Adapter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Adapter()))
                {
                    Construct_Adapter();
                }
                if ((*Value()).hasMember(ItemName_Adapter()))
                {
                    CType_Config_Universal_Adapter InitValue;
                    (*Value())[ItemName_Adapter()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Adapter(const CType_Config_Universal_Adapter& SetValue)
        {
            try
            {
                (*Value())[ItemName_Adapter()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Adapter Get_Adapter(void) const
        {
            return (*Value())[ItemName_Adapter()];
        }
        bool Get_Adapter(CType_Config_Universal_Adapter& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Adapter()]).valid())
                {
                    GetValue = (*Value())[ItemName_Adapter()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Function (Type: "CType_Config_Universal_Function")
    protected:
        void Construct_Function(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Function()))
                {
                    CType_Config_Universal_Function InitValue;
                    (*Value())[ItemName_Function()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Function(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Function()))
                {
                    Construct_Function();
                }
                if ((*Value()).hasMember(ItemName_Function()))
                {
                    CType_Config_Universal_Function InitValue;
                    (*Value())[ItemName_Function()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Function(const CType_Config_Universal_Function& SetValue)
        {
            try
            {
                (*Value())[ItemName_Function()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Config_Universal_Function Get_Function(void) const
        {
            return (*Value())[ItemName_Function()];
        }
        bool Get_Function(CType_Config_Universal_Function& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Function()]).valid())
                {
                    GetValue = (*Value())[ItemName_Function()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CType_Config_Project


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetIDsFromObjectType::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETIDSFROMOBJECTTYPE)
namespace GetIDsFromObjectType
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Type(void)
    {
        static std::string str("Type");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetIDsFromObjectType");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Type();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Type();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Type();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetIDsFromObjectType");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GetIDsFromObjectType
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETIDSFROMOBJECTTYPE)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetInfosFromIDs::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETINFOSFROMIDS)
namespace GetInfosFromIDs
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetInfosFromIDs");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetInfosFromIDs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GetInfosFromIDs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETINFOSFROMIDS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetPropertyNames::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMES)
namespace GetPropertyNames
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_WithInvalids(void)
    {
        static std::string str("WithInvalids");
        return str;
    }
public:
    static std::string const& ItemName_WithValids(void)
    {
        static std::string str("WithValids");
        return str;
    }
public:
    static std::string const& ItemName_ResultFilter(void)
    {
        static std::string str("ResultFilter");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetPropertyNames");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
            Construct_WithInvalids();
            Construct_WithValids();
            Construct_ResultFilter();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
            Construct_WithInvalids();
            Construct_WithValids();
            Construct_ResultFilter();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
            Initialize_WithInvalids();
            Initialize_WithValids();
            Initialize_ResultFilter();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetPropertyNames");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item WithInvalids (Type: "bool")
protected:
    void Construct_WithInvalids(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_WithInvalids()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_WithInvalids()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_WithInvalids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithInvalids()))
                {
                    Construct_WithInvalids();
                }
                if ((*Value()).hasMember(ItemName_WithInvalids()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_WithInvalids()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithInvalids(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_WithInvalids()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_WithInvalids(void) const
        {
            bool GetValue = (*Value())[ItemName_WithInvalids()];
            return (bool)GetValue;
        }
        bool Get_WithInvalids(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithInvalids()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_WithInvalids()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item WithValids (Type: "bool")
protected:
    void Construct_WithValids(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_WithValids()))
            {
                bool InitValue;
                InitValue = true;
                    (*Value())[ItemName_WithValids()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_WithValids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithValids()))
                {
                    Construct_WithValids();
                }
                if ((*Value()).hasMember(ItemName_WithValids()))
                {
                    bool InitValue;
                    InitValue = true;
                    (*Value())[ItemName_WithValids()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithValids(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_WithValids()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_WithValids(void) const
        {
            bool GetValue = (*Value())[ItemName_WithValids()];
            return (bool)GetValue;
        }
        bool Get_WithValids(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithValids()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_WithValids()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultFilter (Type: "std::string")
    protected:
        void Construct_ResultFilter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultFilter()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ResultFilter()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultFilter(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultFilter()))
                {
                    Construct_ResultFilter();
                }
                if ((*Value()).hasMember(ItemName_ResultFilter()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_ResultFilter()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultFilter(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultFilter()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_ResultFilter(void) const
        {
            return (*Value())[ItemName_ResultFilter()];
        }
        bool Get_ResultFilter(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultFilter()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_ResultFilter()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GetPropertyNames
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMES)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetPropertyNameVariants::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMEVARIANTS)
namespace GetPropertyNameVariants
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ObjectType(void)
    {
        static std::string str("ObjectType");
        return str;
    }
public:
    static std::string const& ItemName_PropertyName(void)
    {
        static std::string str("PropertyName");
        return str;
    }
public:
    static std::string const& ItemName_ResultType(void)
    {
        static std::string str("ResultType");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetPropertyNameVariants");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ObjectType();
            Construct_PropertyName();
            Construct_ResultType();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ObjectType();
            Construct_PropertyName();
            Construct_ResultType();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ObjectType();
            Initialize_PropertyName();
            Initialize_ResultType();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetPropertyNameVariants");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ObjectType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ObjectType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ObjectType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ObjectType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ObjectType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ObjectType()))
                {
                    Construct_ObjectType();
                }
                if ((*Value()).hasMember(ItemName_ObjectType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ObjectType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ObjectType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ObjectType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ObjectType(void) const
        {
            return (*Value())[ItemName_ObjectType()];
        }
        bool Get_ObjectType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ObjectType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ObjectType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PropertyName (Type: "std::string")
    protected:
        void Construct_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    Construct_PropertyName();
                }
                if ((*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PropertyName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PropertyName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PropertyName(void) const
        {
            return (*Value())[ItemName_PropertyName()];
        }
        bool Get_PropertyName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PropertyName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PropertyName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ResultType (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ResultType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultType()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ResultType(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ResultType()))
                {
                    Construct_ResultType();
                }
                if ((*Value()).hasMember(ItemName_ResultType()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ResultType()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ResultType(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ResultType()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ResultType(void) const
        {
            return (*Value())[ItemName_ResultType()];
        }
        bool Get_ResultType(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ResultType()]).valid())
                {
                    GetValue = (*Value())[ItemName_ResultType()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GetPropertyNameVariants
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMEVARIANTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetConfigs::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETCONFIGS)
namespace GetConfigs
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_PropertyName(void)
    {
        static std::string str("PropertyName");
        return str;
    }
public:
    static std::string const& ItemName_WithOptions(void)
    {
        static std::string str("WithOptions");
        return str;
    }
public:
    static std::string const& ItemName_WithImages(void)
    {
        static std::string str("WithImages");
        return str;
    }
public:
    static std::string const& ItemName_WithValueLists(void)
    {
        static std::string str("WithValueLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetConfigs");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_WithOptions();
            Construct_WithImages();
            Construct_WithValueLists();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_WithOptions();
            Construct_WithImages();
            Construct_WithValueLists();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_PropertyName();
            Initialize_WithOptions();
            Initialize_WithImages();
            Initialize_WithValueLists();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PropertyName (Type: "std::string")
    protected:
        void Construct_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    Construct_PropertyName();
                }
                if ((*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PropertyName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PropertyName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PropertyName(void) const
        {
            return (*Value())[ItemName_PropertyName()];
        }
        bool Get_PropertyName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PropertyName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PropertyName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item WithOptions (Type: "bool")
protected:
    void Construct_WithOptions(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_WithOptions()))
            {
                bool InitValue;
                InitValue = true;
                    (*Value())[ItemName_WithOptions()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_WithOptions(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithOptions()))
                {
                    Construct_WithOptions();
                }
                if ((*Value()).hasMember(ItemName_WithOptions()))
                {
                    bool InitValue;
                    InitValue = true;
                    (*Value())[ItemName_WithOptions()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithOptions(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_WithOptions()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_WithOptions(void) const
        {
            bool GetValue = (*Value())[ItemName_WithOptions()];
            return (bool)GetValue;
        }
        bool Get_WithOptions(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithOptions()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_WithOptions()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item WithImages (Type: "bool")
protected:
    void Construct_WithImages(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_WithImages()))
            {
                bool InitValue;
                InitValue = true;
                    (*Value())[ItemName_WithImages()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_WithImages(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithImages()))
                {
                    Construct_WithImages();
                }
                if ((*Value()).hasMember(ItemName_WithImages()))
                {
                    bool InitValue;
                    InitValue = true;
                    (*Value())[ItemName_WithImages()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithImages(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_WithImages()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_WithImages(void) const
        {
            bool GetValue = (*Value())[ItemName_WithImages()];
            return (bool)GetValue;
        }
        bool Get_WithImages(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithImages()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_WithImages()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item WithValueLists (Type: "bool")
protected:
    void Construct_WithValueLists(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_WithValueLists()))
            {
                bool InitValue;
                InitValue = true;
                    (*Value())[ItemName_WithValueLists()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_WithValueLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_WithValueLists()))
                {
                    Construct_WithValueLists();
                }
                if ((*Value()).hasMember(ItemName_WithValueLists()))
                {
                    bool InitValue;
                    InitValue = true;
                    (*Value())[ItemName_WithValueLists()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_WithValueLists(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_WithValueLists()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_WithValueLists(void) const
        {
            bool GetValue = (*Value())[ItemName_WithValueLists()];
            return (bool)GetValue;
        }
        bool Get_WithValueLists(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_WithValueLists()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_WithValueLists()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace GetConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SetConfigs::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETCONFIGS)
namespace SetConfigs
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_PropertyName(void)
    {
        static std::string str("PropertyName");
        return str;
    }
public:
    static std::string const& ItemName_Config(void)
    {
        static std::string str("Config");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SetConfigs");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_Config();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_Config();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_PropertyName();
            Initialize_Config();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SetConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PropertyName (Type: "std::string")
    protected:
        void Construct_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    Construct_PropertyName();
                }
                if ((*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PropertyName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PropertyName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PropertyName(void) const
        {
            return (*Value())[ItemName_PropertyName()];
        }
        bool Get_PropertyName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PropertyName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PropertyName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Config (Type: "GInsXmlRpc::XmlRpcValue")
    protected:
        void Construct_Config(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Config()))
                {
                    GInsXmlRpc::XmlRpcValue InitValue = (int)0;
                    (*Value())[ItemName_Config()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Config(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Config()))
                {
                    Construct_Config();
                }
                if ((*Value()).hasMember(ItemName_Config()))
                {
                    GInsXmlRpc::XmlRpcValue InitValue = (int)0;
                    (*Value())[ItemName_Config()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Config(const GInsXmlRpc::XmlRpcValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_Config()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpc::XmlRpcValue Get_Config(void) const
        {
            return (*Value())[ItemName_Config()];
        }
        bool Get_Config(GInsXmlRpc::XmlRpcValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Config()]).valid())
                {
                    GetValue = (*Value())[ItemName_Config()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace SetConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SetDefaultConfigs::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETDEFAULTCONFIGS)
namespace SetDefaultConfigs
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_PropertyName(void)
    {
        static std::string str("PropertyName");
        return str;
    }
public:
    static std::string const& ItemName_OwnedObjectsIncluded(void)
    {
        static std::string str("OwnedObjectsIncluded");
        return str;
    }
public:
    static std::string const& ItemName_OnlyInvalidSettings(void)
    {
        static std::string str("OnlyInvalidSettings");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SetDefaultConfigs");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_OwnedObjectsIncluded();
            Construct_OnlyInvalidSettings();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_PropertyName();
            Construct_OwnedObjectsIncluded();
            Construct_OnlyInvalidSettings();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_PropertyName();
            Initialize_OwnedObjectsIncluded();
            Initialize_OnlyInvalidSettings();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SetDefaultConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item PropertyName (Type: "std::string")
    protected:
        void Construct_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_PropertyName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_PropertyName()))
                {
                    Construct_PropertyName();
                }
                if ((*Value()).hasMember(ItemName_PropertyName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_PropertyName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_PropertyName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_PropertyName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_PropertyName(void) const
        {
            return (*Value())[ItemName_PropertyName()];
        }
        bool Get_PropertyName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_PropertyName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_PropertyName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item OwnedObjectsIncluded (Type: "bool")
protected:
    void Construct_OwnedObjectsIncluded(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_OwnedObjectsIncluded()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_OwnedObjectsIncluded()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_OwnedObjectsIncluded(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedObjectsIncluded()))
                {
                    Construct_OwnedObjectsIncluded();
                }
                if ((*Value()).hasMember(ItemName_OwnedObjectsIncluded()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_OwnedObjectsIncluded()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedObjectsIncluded(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedObjectsIncluded()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_OwnedObjectsIncluded(void) const
        {
            bool GetValue = (*Value())[ItemName_OwnedObjectsIncluded()];
            return (bool)GetValue;
        }
        bool Get_OwnedObjectsIncluded(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedObjectsIncluded()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_OwnedObjectsIncluded()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item OnlyInvalidSettings (Type: "bool")
protected:
    void Construct_OnlyInvalidSettings(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_OnlyInvalidSettings()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_OnlyInvalidSettings()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_OnlyInvalidSettings(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OnlyInvalidSettings()))
                {
                    Construct_OnlyInvalidSettings();
                }
                if ((*Value()).hasMember(ItemName_OnlyInvalidSettings()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_OnlyInvalidSettings()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OnlyInvalidSettings(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_OnlyInvalidSettings()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_OnlyInvalidSettings(void) const
        {
            bool GetValue = (*Value())[ItemName_OnlyInvalidSettings()];
            return (bool)GetValue;
        }
        bool Get_OnlyInvalidSettings(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OnlyInvalidSettings()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_OnlyInvalidSettings()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace SetDefaultConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETDEFAULTCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::RemoveObjects::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_REMOVEOBJECTS)
namespace RemoveObjects
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.RemoveObjects");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::RemoveObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace RemoveObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_REMOVEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::MoveObjects::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_MOVEOBJECTS)
namespace MoveObjects
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_NewOwnerID(void)
    {
        static std::string str("NewOwnerID");
        return str;
    }
public:
    static std::string const& ItemName_NewStartOwnerIndex(void)
    {
        static std::string str("NewStartOwnerIndex");
        return str;
    }
public:
    static std::string const& ItemName_BehaviourOnOwnerIndexExisting(void)
    {
        static std::string str("BehaviourOnOwnerIndexExisting");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.MoveObjects");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_NewOwnerID();
            Construct_NewStartOwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_NewOwnerID();
            Construct_NewStartOwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_NewOwnerID();
            Initialize_NewStartOwnerIndex();
            Initialize_BehaviourOnOwnerIndexExisting();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::MoveObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item NewOwnerID (Type: "std::string")
    protected:
        void Construct_NewOwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewOwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_NewOwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_NewOwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewOwnerID()))
                {
                    Construct_NewOwnerID();
                }
                if ((*Value()).hasMember(ItemName_NewOwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_NewOwnerID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NewOwnerID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_NewOwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_NewOwnerID(void) const
        {
            return (*Value())[ItemName_NewOwnerID()];
        }
        bool Get_NewOwnerID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NewOwnerID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_NewOwnerID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item NewStartOwnerIndex (Type: "int32_t")
protected:
    void Construct_NewStartOwnerIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_NewStartOwnerIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_NewStartOwnerIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_NewStartOwnerIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_NewStartOwnerIndex()))
                {
                    Construct_NewStartOwnerIndex();
                }
                if ((*Value()).hasMember(ItemName_NewStartOwnerIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_NewStartOwnerIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_NewStartOwnerIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_NewStartOwnerIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_NewStartOwnerIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_NewStartOwnerIndex()];
            return (int32_t)GetValue;
        }
        bool Get_NewStartOwnerIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_NewStartOwnerIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_NewStartOwnerIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BehaviourOnOwnerIndexExisting (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    Construct_BehaviourOnOwnerIndexExisting();
                }
                if ((*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BehaviourOnOwnerIndexExisting(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_BehaviourOnOwnerIndexExisting(void) const
        {
            return (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
        }
        bool Get_BehaviourOnOwnerIndexExisting(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BehaviourOnOwnerIndexExisting()]).valid())
                {
                    GetValue = (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace MoveObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_MOVEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CopyObjects::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_COPYOBJECTS)
namespace CopyObjects
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_OwnerID(void)
    {
        static std::string str("OwnerID");
        return str;
    }
public:
    static std::string const& ItemName_StartOwnerIndex(void)
    {
        static std::string str("StartOwnerIndex");
        return str;
    }
public:
    static std::string const& ItemName_BehaviourOnOwnerIndexExisting(void)
    {
        static std::string str("BehaviourOnOwnerIndexExisting");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CopyObjects");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_OwnerID();
            Construct_StartOwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_OwnerID();
            Construct_StartOwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_OwnerID();
            Initialize_StartOwnerIndex();
            Initialize_BehaviourOnOwnerIndexExisting();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CopyObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "std::string")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_OwnerID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_OwnerID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item StartOwnerIndex (Type: "int32_t")
protected:
    void Construct_StartOwnerIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_StartOwnerIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_StartOwnerIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_StartOwnerIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_StartOwnerIndex()))
                {
                    Construct_StartOwnerIndex();
                }
                if ((*Value()).hasMember(ItemName_StartOwnerIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_StartOwnerIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_StartOwnerIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_StartOwnerIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_StartOwnerIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_StartOwnerIndex()];
            return (int32_t)GetValue;
        }
        bool Get_StartOwnerIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_StartOwnerIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_StartOwnerIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BehaviourOnOwnerIndexExisting (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    Construct_BehaviourOnOwnerIndexExisting();
                }
                if ((*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BehaviourOnOwnerIndexExisting(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_BehaviourOnOwnerIndexExisting(void) const
        {
            return (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
        }
        bool Get_BehaviourOnOwnerIndexExisting(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BehaviourOnOwnerIndexExisting()]).valid())
                {
                    GetValue = (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace CopyObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_COPYOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::HandleObjects::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_HANDLEOBJECTS)
namespace HandleObjects
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_Command(void)
    {
        static std::string str("Command");
        return str;
    }
public:
    static std::string const& ItemName_CommandData(void)
    {
        static std::string str("CommandData");
        return str;
    }
public:
    static std::string const& ItemName_OwnedIncluded(void)
    {
        static std::string str("OwnedIncluded");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.HandleObjects");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_Command();
            Construct_CommandData();
            Construct_OwnedIncluded();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_Command();
            Construct_CommandData();
            Construct_OwnedIncluded();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_Command();
            Initialize_CommandData();
            Initialize_OwnedIncluded();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::HandleObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Edit_ElementListSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Command (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Command(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Command()))
                {
                    Construct_Command();
                }
                if ((*Value()).hasMember(ItemName_Command()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Command()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Command(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Command()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Command(void) const
        {
            return (*Value())[ItemName_Command()];
        }
        bool Get_Command(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Command()]).valid())
                {
                    GetValue = (*Value())[ItemName_Command()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item CommandData (Type: "std::string")
    protected:
        void Construct_CommandData(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommandData()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_CommandData()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_CommandData(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_CommandData()))
                {
                    Construct_CommandData();
                }
                if ((*Value()).hasMember(ItemName_CommandData()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_CommandData()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_CommandData(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_CommandData()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_CommandData(void) const
        {
            return (*Value())[ItemName_CommandData()];
        }
        bool Get_CommandData(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_CommandData()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_CommandData()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item OwnedIncluded (Type: "bool")
protected:
    void Construct_OwnedIncluded(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_OwnedIncluded()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_OwnedIncluded()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_OwnedIncluded(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnedIncluded()))
                {
                    Construct_OwnedIncluded();
                }
                if ((*Value()).hasMember(ItemName_OwnedIncluded()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_OwnedIncluded()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnedIncluded(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnedIncluded()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_OwnedIncluded(void) const
        {
            bool GetValue = (*Value())[ItemName_OwnedIncluded()];
            return (bool)GetValue;
        }
        bool Get_OwnedIncluded(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnedIncluded()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_OwnedIncluded()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace HandleObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_HANDLEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CreateObject::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CREATEOBJECT)
namespace CreateObject
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Type(void)
    {
        static std::string str("Type");
        return str;
    }
public:
    static std::string const& ItemName_OwnerID(void)
    {
        static std::string str("OwnerID");
        return str;
    }
public:
    static std::string const& ItemName_OwnerIndex(void)
    {
        static std::string str("OwnerIndex");
        return str;
    }
public:
    static std::string const& ItemName_BehaviourOnOwnerIndexExisting(void)
    {
        static std::string str("BehaviourOnOwnerIndexExisting");
        return str;
    }
public:
    static std::string const& ItemName_FileName(void)
    {
        static std::string str("FileName");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CreateObject");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Type();
            Construct_OwnerID();
            Construct_OwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_FileName();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Type();
            Construct_OwnerID();
            Construct_OwnerIndex();
            Construct_BehaviourOnOwnerIndexExisting();
            Construct_FileName();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Type();
            Initialize_OwnerID();
            Initialize_OwnerIndex();
            Initialize_BehaviourOnOwnerIndexExisting();
            Initialize_FileName();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CreateObject");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item OwnerID (Type: "std::string")
    protected:
        void Construct_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_OwnerID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_OwnerID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerID()))
                {
                    Construct_OwnerID();
                }
                if ((*Value()).hasMember(ItemName_OwnerID()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_OwnerID()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerID(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_OwnerID(void) const
        {
            return (*Value())[ItemName_OwnerID()];
        }
        bool Get_OwnerID(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerID()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_OwnerID()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item OwnerIndex (Type: "int32_t")
protected:
    void Construct_OwnerIndex(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_OwnerIndex()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_OwnerIndex()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_OwnerIndex(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_OwnerIndex()))
                {
                    Construct_OwnerIndex();
                }
                if ((*Value()).hasMember(ItemName_OwnerIndex()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_OwnerIndex()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_OwnerIndex(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_OwnerIndex()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_OwnerIndex(void) const
        {
            int32_t GetValue = (*Value())[ItemName_OwnerIndex()];
            return (int32_t)GetValue;
        }
        bool Get_OwnerIndex(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_OwnerIndex()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_OwnerIndex()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BehaviourOnOwnerIndexExisting (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BehaviourOnOwnerIndexExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    Construct_BehaviourOnOwnerIndexExisting();
                }
                if ((*Value()).hasMember(ItemName_BehaviourOnOwnerIndexExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BehaviourOnOwnerIndexExisting(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_BehaviourOnOwnerIndexExisting()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_BehaviourOnOwnerIndexExisting(void) const
        {
            return (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
        }
        bool Get_BehaviourOnOwnerIndexExisting(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BehaviourOnOwnerIndexExisting()]).valid())
                {
                    GetValue = (*Value())[ItemName_BehaviourOnOwnerIndexExisting()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileName (Type: "std::string")
    protected:
        void Construct_FileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_FileName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileName()))
                {
                    Construct_FileName();
                }
                if ((*Value()).hasMember(ItemName_FileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_FileName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_FileName(void) const
        {
            return (*Value())[ItemName_FileName()];
        }
        bool Get_FileName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_FileName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace CreateObject
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CREATEOBJECT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SaveObject::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SAVEOBJECT)
namespace SaveObject
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_HostingDirectoryName(void)
    {
        static std::string str("HostingDirectoryName");
        return str;
    }
public:
    static std::string const& ItemName_DirectoryName(void)
    {
        static std::string str("DirectoryName");
        return str;
    }
public:
    static std::string const& ItemName_BehaviourOnExisting(void)
    {
        static std::string str("BehaviourOnExisting");
        return str;
    }
public:
    static std::string const& ItemName_IgnoreErrors(void)
    {
        static std::string str("IgnoreErrors");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SaveObject");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
            Construct_HostingDirectoryName();
            Construct_DirectoryName();
            Construct_BehaviourOnExisting();
            Construct_IgnoreErrors();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
            Construct_HostingDirectoryName();
            Construct_DirectoryName();
            Construct_BehaviourOnExisting();
            Construct_IgnoreErrors();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
            Initialize_HostingDirectoryName();
            Initialize_DirectoryName();
            Initialize_BehaviourOnExisting();
            Initialize_IgnoreErrors();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SaveObject");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item HostingDirectoryName (Type: "std::string")
    protected:
        void Construct_HostingDirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostingDirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_HostingDirectoryName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_HostingDirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_HostingDirectoryName()))
                {
                    Construct_HostingDirectoryName();
                }
                if ((*Value()).hasMember(ItemName_HostingDirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_HostingDirectoryName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_HostingDirectoryName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_HostingDirectoryName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_HostingDirectoryName(void) const
        {
            return (*Value())[ItemName_HostingDirectoryName()];
        }
        bool Get_HostingDirectoryName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_HostingDirectoryName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_HostingDirectoryName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DirectoryName (Type: "std::string")
    protected:
        void Construct_DirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DirectoryName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DirectoryName()))
                {
                    Construct_DirectoryName();
                }
                if ((*Value()).hasMember(ItemName_DirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DirectoryName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DirectoryName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DirectoryName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DirectoryName(void) const
        {
            return (*Value())[ItemName_DirectoryName()];
        }
        bool Get_DirectoryName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DirectoryName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DirectoryName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item BehaviourOnExisting (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_BehaviourOnExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnExisting()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_BehaviourOnExisting(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_BehaviourOnExisting()))
                {
                    Construct_BehaviourOnExisting();
                }
                if ((*Value()).hasMember(ItemName_BehaviourOnExisting()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_BehaviourOnExisting()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_BehaviourOnExisting(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_BehaviourOnExisting()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_BehaviourOnExisting(void) const
        {
            return (*Value())[ItemName_BehaviourOnExisting()];
        }
        bool Get_BehaviourOnExisting(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_BehaviourOnExisting()]).valid())
                {
                    GetValue = (*Value())[ItemName_BehaviourOnExisting()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item IgnoreErrors (Type: "bool")
protected:
    void Construct_IgnoreErrors(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_IgnoreErrors()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_IgnoreErrors()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_IgnoreErrors(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IgnoreErrors()))
                {
                    Construct_IgnoreErrors();
                }
                if ((*Value()).hasMember(ItemName_IgnoreErrors()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_IgnoreErrors()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IgnoreErrors(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_IgnoreErrors()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_IgnoreErrors(void) const
        {
            bool GetValue = (*Value())[ItemName_IgnoreErrors()];
            return (bool)GetValue;
        }
        bool Get_IgnoreErrors(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IgnoreErrors()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_IgnoreErrors()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace SaveObject
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SAVEOBJECT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::AssignObjectFromFile::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_ASSIGNOBJECTFROMFILE)
namespace AssignObjectFromFile
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_FileName(void)
    {
        static std::string str("FileName");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.AssignObjectFromFile");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
            Construct_FileName();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
            Construct_FileName();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
            Initialize_FileName();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::AssignObjectFromFile");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FileName (Type: "std::string")
    protected:
        void Construct_FileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_FileName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FileName()))
                {
                    Construct_FileName();
                }
                if ((*Value()).hasMember(ItemName_FileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_FileName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FileName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_FileName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_FileName(void) const
        {
            return (*Value())[ItemName_FileName()];
        }
        bool Get_FileName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FileName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_FileName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace AssignObjectFromFile
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_ASSIGNOBJECTFROMFILE)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::Settings::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETTINGS)
namespace Settings
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ChooseCombinedHandlingForMultipleParameteredElements(void)
    {
        static std::string str("ChooseCombinedHandlingForMultipleParameteredElements");
        return str;
    }
public:
    static std::string const& ItemName_ClearTraceOnce(void)
    {
        static std::string str("ClearTraceOnce");
        return str;
    }
public:
    static std::string const& ItemName_DisableObjectWideInvalids(void)
    {
        static std::string str("DisableObjectWideInvalids");
        return str;
    }
public:
    static std::string const& ItemName_DisableDefaultOnInvalids(void)
    {
        static std::string str("DisableDefaultOnInvalids");
        return str;
    }
public:
    static std::string const& ItemName_EnableChangedWithRespectToDeviceHandling(void)
    {
        static std::string str("EnableChangedWithRespectToDeviceHandling");
        return str;
    }
public:
    static std::string const& ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(void)
    {
        static std::string str("EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess");
        return str;
    }
public:
    static std::string const& ItemName_FeatureSelector(void)
    {
        static std::string str("FeatureSelector");
        return str;
    }
public:
    static std::string const& ItemName_InterfaceDecimalSeparator(void)
    {
        static std::string str("InterfaceDecimalSeparator");
        return str;
    }
public:
    static std::string const& ItemName_InterfaceThousandSeparator(void)
    {
        static std::string str("InterfaceThousandSeparator");
        return str;
    }
public:
    static std::string const& ItemName_FunctionSetConfigsDisableDeepDRC(void)
    {
        static std::string str("FunctionSetConfigsDisableDeepDRC");
        return str;
    }
public:
    static std::string const& ItemName_GenerateItemInListIfEmptyForXMLInterface(void)
    {
        static std::string str("GenerateItemInListIfEmptyForXMLInterface");
        return str;
    }
public:
    static std::string const& ItemName_GenerateOptionChangedNotifications(void)
    {
        static std::string str("GenerateOptionChangedNotifications");
        return str;
    }
public:
    static std::string const& ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(void)
    {
        static std::string str("MarkObjectChangedInsteadOfEachParameterChangedCountPercentage");
        return str;
    }
public:
    static std::string const& ItemName_TraceOutputDestination(void)
    {
        static std::string str("TraceOutputDestination");
        return str;
    }
public:
    static std::string const& ItemName_TraceOutputTheme(void)
    {
        static std::string str("TraceOutputTheme");
        return str;
    }
public:
    static std::string const& ItemName_TryLoadAlsoLegacyFilesAtRead(void)
    {
        static std::string str("TryLoadAlsoLegacyFilesAtRead");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.Settings");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ChooseCombinedHandlingForMultipleParameteredElements();
            Construct_ClearTraceOnce();
            Construct_DisableObjectWideInvalids();
            Construct_DisableDefaultOnInvalids();
            Construct_EnableChangedWithRespectToDeviceHandling();
            Construct_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess();
            Construct_FeatureSelector();
            Construct_InterfaceDecimalSeparator();
            Construct_InterfaceThousandSeparator();
            Construct_FunctionSetConfigsDisableDeepDRC();
            Construct_GenerateItemInListIfEmptyForXMLInterface();
            Construct_GenerateOptionChangedNotifications();
            Construct_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage();
            Construct_TraceOutputDestination();
            Construct_TraceOutputTheme();
            Construct_TryLoadAlsoLegacyFilesAtRead();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ChooseCombinedHandlingForMultipleParameteredElements();
            Construct_ClearTraceOnce();
            Construct_DisableObjectWideInvalids();
            Construct_DisableDefaultOnInvalids();
            Construct_EnableChangedWithRespectToDeviceHandling();
            Construct_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess();
            Construct_FeatureSelector();
            Construct_InterfaceDecimalSeparator();
            Construct_InterfaceThousandSeparator();
            Construct_FunctionSetConfigsDisableDeepDRC();
            Construct_GenerateItemInListIfEmptyForXMLInterface();
            Construct_GenerateOptionChangedNotifications();
            Construct_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage();
            Construct_TraceOutputDestination();
            Construct_TraceOutputTheme();
            Construct_TryLoadAlsoLegacyFilesAtRead();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ChooseCombinedHandlingForMultipleParameteredElements();
            Initialize_ClearTraceOnce();
            Initialize_DisableObjectWideInvalids();
            Initialize_DisableDefaultOnInvalids();
            Initialize_EnableChangedWithRespectToDeviceHandling();
            Initialize_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess();
            Initialize_FeatureSelector();
            Initialize_InterfaceDecimalSeparator();
            Initialize_InterfaceThousandSeparator();
            Initialize_FunctionSetConfigsDisableDeepDRC();
            Initialize_GenerateItemInListIfEmptyForXMLInterface();
            Initialize_GenerateOptionChangedNotifications();
            Initialize_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage();
            Initialize_TraceOutputDestination();
            Initialize_TraceOutputTheme();
            Initialize_TryLoadAlsoLegacyFilesAtRead();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::Settings");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ChooseCombinedHandlingForMultipleParameteredElements (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_ChooseCombinedHandlingForMultipleParameteredElements(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChooseCombinedHandlingForMultipleParameteredElements()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ChooseCombinedHandlingForMultipleParameteredElements(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ChooseCombinedHandlingForMultipleParameteredElements()))
                {
                    Construct_ChooseCombinedHandlingForMultipleParameteredElements();
                }
                if ((*Value()).hasMember(ItemName_ChooseCombinedHandlingForMultipleParameteredElements()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ChooseCombinedHandlingForMultipleParameteredElements(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_ChooseCombinedHandlingForMultipleParameteredElements(void) const
        {
            return (*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()];
        }
        bool Get_ChooseCombinedHandlingForMultipleParameteredElements(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()]).valid())
                {
                    GetValue = (*Value())[ItemName_ChooseCombinedHandlingForMultipleParameteredElements()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ClearTraceOnce (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_ClearTraceOnce(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClearTraceOnce()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ClearTraceOnce()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ClearTraceOnce(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ClearTraceOnce()))
                {
                    Construct_ClearTraceOnce();
                }
                if ((*Value()).hasMember(ItemName_ClearTraceOnce()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_ClearTraceOnce()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ClearTraceOnce(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ClearTraceOnce()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_ClearTraceOnce(void) const
        {
            return (*Value())[ItemName_ClearTraceOnce()];
        }
        bool Get_ClearTraceOnce(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ClearTraceOnce()]).valid())
                {
                    GetValue = (*Value())[ItemName_ClearTraceOnce()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DisableObjectWideInvalids (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DisableObjectWideInvalids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableObjectWideInvalids()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableObjectWideInvalids()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DisableObjectWideInvalids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableObjectWideInvalids()))
                {
                    Construct_DisableObjectWideInvalids();
                }
                if ((*Value()).hasMember(ItemName_DisableObjectWideInvalids()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableObjectWideInvalids()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableObjectWideInvalids(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableObjectWideInvalids()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DisableObjectWideInvalids(void) const
        {
            return (*Value())[ItemName_DisableObjectWideInvalids()];
        }
        bool Get_DisableObjectWideInvalids(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableObjectWideInvalids()]).valid())
                {
                    GetValue = (*Value())[ItemName_DisableObjectWideInvalids()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DisableDefaultOnInvalids (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_DisableDefaultOnInvalids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDefaultOnInvalids()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableDefaultOnInvalids()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DisableDefaultOnInvalids(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDefaultOnInvalids()))
                {
                    Construct_DisableDefaultOnInvalids();
                }
                if ((*Value()).hasMember(ItemName_DisableDefaultOnInvalids()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_DisableDefaultOnInvalids()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDefaultOnInvalids(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDefaultOnInvalids()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_DisableDefaultOnInvalids(void) const
        {
            return (*Value())[ItemName_DisableDefaultOnInvalids()];
        }
        bool Get_DisableDefaultOnInvalids(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDefaultOnInvalids()]).valid())
                {
                    GetValue = (*Value())[ItemName_DisableDefaultOnInvalids()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableChangedWithRespectToDeviceHandling (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableChangedWithRespectToDeviceHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableChangedWithRespectToDeviceHandling()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableChangedWithRespectToDeviceHandling(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableChangedWithRespectToDeviceHandling()))
                {
                    Construct_EnableChangedWithRespectToDeviceHandling();
                }
                if ((*Value()).hasMember(ItemName_EnableChangedWithRespectToDeviceHandling()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableChangedWithRespectToDeviceHandling(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableChangedWithRespectToDeviceHandling(void) const
        {
            return (*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()];
        }
        bool Get_EnableChangedWithRespectToDeviceHandling(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableChangedWithRespectToDeviceHandling()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()))
                {
                    Construct_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess();
                }
                if ((*Value()).hasMember(ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(void) const
        {
            return (*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()];
        }
        bool Get_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()]).valid())
                {
                    GetValue = (*Value())[ItemName_EnableVariableSortingAccordingTreeStructureInStreamProcessorDataBufferProcess()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FeatureSelector (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_FeatureSelector(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FeatureSelector()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FeatureSelector()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FeatureSelector(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FeatureSelector()))
                {
                    Construct_FeatureSelector();
                }
                if ((*Value()).hasMember(ItemName_FeatureSelector()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_FeatureSelector()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FeatureSelector(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_FeatureSelector()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_FeatureSelector(void) const
        {
            return (*Value())[ItemName_FeatureSelector()];
        }
        bool Get_FeatureSelector(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FeatureSelector()]).valid())
                {
                    GetValue = (*Value())[ItemName_FeatureSelector()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InterfaceDecimalSeparator (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_InterfaceDecimalSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InterfaceDecimalSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_InterfaceDecimalSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InterfaceDecimalSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InterfaceDecimalSeparator()))
                {
                    Construct_InterfaceDecimalSeparator();
                }
                if ((*Value()).hasMember(ItemName_InterfaceDecimalSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_InterfaceDecimalSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InterfaceDecimalSeparator(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_InterfaceDecimalSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_InterfaceDecimalSeparator(void) const
        {
            return (*Value())[ItemName_InterfaceDecimalSeparator()];
        }
        bool Get_InterfaceDecimalSeparator(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InterfaceDecimalSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_InterfaceDecimalSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item InterfaceThousandSeparator (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StringValue")
    protected:
        void Construct_InterfaceThousandSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InterfaceThousandSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_InterfaceThousandSeparator()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InterfaceThousandSeparator(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InterfaceThousandSeparator()))
                {
                    Construct_InterfaceThousandSeparator();
                }
                if ((*Value()).hasMember(ItemName_InterfaceThousandSeparator()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StringValue InitValue;
                    (*Value())[ItemName_InterfaceThousandSeparator()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InterfaceThousandSeparator(const GInsXmlRpcStdAPI::CGIns_Edit_StringValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_InterfaceThousandSeparator()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StringValue Get_InterfaceThousandSeparator(void) const
        {
            return (*Value())[ItemName_InterfaceThousandSeparator()];
        }
        bool Get_InterfaceThousandSeparator(GInsXmlRpcStdAPI::CGIns_Edit_StringValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InterfaceThousandSeparator()]).valid())
                {
                    GetValue = (*Value())[ItemName_InterfaceThousandSeparator()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item FunctionSetConfigsDisableDeepDRC (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_FunctionSetConfigsDisableDeepDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FunctionSetConfigsDisableDeepDRC()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_FunctionSetConfigsDisableDeepDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_FunctionSetConfigsDisableDeepDRC()))
                {
                    Construct_FunctionSetConfigsDisableDeepDRC();
                }
                if ((*Value()).hasMember(ItemName_FunctionSetConfigsDisableDeepDRC()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_FunctionSetConfigsDisableDeepDRC(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_FunctionSetConfigsDisableDeepDRC(void) const
        {
            return (*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()];
        }
        bool Get_FunctionSetConfigsDisableDeepDRC(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()]).valid())
                {
                    GetValue = (*Value())[ItemName_FunctionSetConfigsDisableDeepDRC()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item GenerateItemInListIfEmptyForXMLInterface (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_GenerateItemInListIfEmptyForXMLInterface(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GenerateItemInListIfEmptyForXMLInterface()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_GenerateItemInListIfEmptyForXMLInterface(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GenerateItemInListIfEmptyForXMLInterface()))
                {
                    Construct_GenerateItemInListIfEmptyForXMLInterface();
                }
                if ((*Value()).hasMember(ItemName_GenerateItemInListIfEmptyForXMLInterface()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_GenerateItemInListIfEmptyForXMLInterface(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_GenerateItemInListIfEmptyForXMLInterface(void) const
        {
            return (*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()];
        }
        bool Get_GenerateItemInListIfEmptyForXMLInterface(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()]).valid())
                {
                    GetValue = (*Value())[ItemName_GenerateItemInListIfEmptyForXMLInterface()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item GenerateOptionChangedNotifications (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_GenerateOptionChangedNotifications(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GenerateOptionChangedNotifications()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_GenerateOptionChangedNotifications()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_GenerateOptionChangedNotifications(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_GenerateOptionChangedNotifications()))
                {
                    Construct_GenerateOptionChangedNotifications();
                }
                if ((*Value()).hasMember(ItemName_GenerateOptionChangedNotifications()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_GenerateOptionChangedNotifications()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_GenerateOptionChangedNotifications(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_GenerateOptionChangedNotifications()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_GenerateOptionChangedNotifications(void) const
        {
            return (*Value())[ItemName_GenerateOptionChangedNotifications()];
        }
        bool Get_GenerateOptionChangedNotifications(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_GenerateOptionChangedNotifications()]).valid())
                {
                    GetValue = (*Value())[ItemName_GenerateOptionChangedNotifications()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item MarkObjectChangedInsteadOfEachParameterChangedCountPercentage (Type: "GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float")
    protected:
        void Construct_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()))
                {
                    Construct_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage();
                }
                if ((*Value()).hasMember(ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float InitValue;
                    (*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(const GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& SetValue)
        {
            try
            {
                (*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float Get_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(void) const
        {
            return (*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()];
        }
        bool Get_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage(GInsXmlRpcStdAPI::CGIns_Edit_RangeValue_Float& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()]).valid())
                {
                    GetValue = (*Value())[ItemName_MarkObjectChangedInsteadOfEachParameterChangedCountPercentage()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TraceOutputDestination (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_TraceOutputDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TraceOutputDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TraceOutputDestination()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TraceOutputDestination(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TraceOutputDestination()))
                {
                    Construct_TraceOutputDestination();
                }
                if ((*Value()).hasMember(ItemName_TraceOutputDestination()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_TraceOutputDestination()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TraceOutputDestination(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_TraceOutputDestination()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_TraceOutputDestination(void) const
        {
            return (*Value())[ItemName_TraceOutputDestination()];
        }
        bool Get_TraceOutputDestination(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TraceOutputDestination()]).valid())
                {
                    GetValue = (*Value())[ItemName_TraceOutputDestination()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TraceOutputTheme (Type: "CType_Edit_TraceOutputTheme")
    protected:
        void Construct_TraceOutputTheme(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TraceOutputTheme()))
                {
                    CType_Edit_TraceOutputTheme InitValue;
                    (*Value())[ItemName_TraceOutputTheme()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TraceOutputTheme(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TraceOutputTheme()))
                {
                    Construct_TraceOutputTheme();
                }
                if ((*Value()).hasMember(ItemName_TraceOutputTheme()))
                {
                    CType_Edit_TraceOutputTheme InitValue;
                    (*Value())[ItemName_TraceOutputTheme()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TraceOutputTheme(const CType_Edit_TraceOutputTheme& SetValue)
        {
            try
            {
                (*Value())[ItemName_TraceOutputTheme()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Edit_TraceOutputTheme Get_TraceOutputTheme(void) const
        {
            return (*Value())[ItemName_TraceOutputTheme()];
        }
        bool Get_TraceOutputTheme(CType_Edit_TraceOutputTheme& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TraceOutputTheme()]).valid())
                {
                    GetValue = (*Value())[ItemName_TraceOutputTheme()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item TryLoadAlsoLegacyFilesAtRead (Type: "GInsXmlRpcStdAPI::CGIns_Edit_StateValue")
    protected:
        void Construct_TryLoadAlsoLegacyFilesAtRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TryLoadAlsoLegacyFilesAtRead()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_TryLoadAlsoLegacyFilesAtRead(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_TryLoadAlsoLegacyFilesAtRead()))
                {
                    Construct_TryLoadAlsoLegacyFilesAtRead();
                }
                if ((*Value()).hasMember(ItemName_TryLoadAlsoLegacyFilesAtRead()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_StateValue InitValue;
                    (*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_TryLoadAlsoLegacyFilesAtRead(const GInsXmlRpcStdAPI::CGIns_Edit_StateValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_StateValue Get_TryLoadAlsoLegacyFilesAtRead(void) const
        {
            return (*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()];
        }
        bool Get_TryLoadAlsoLegacyFilesAtRead(GInsXmlRpcStdAPI::CGIns_Edit_StateValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()]).valid())
                {
                    GetValue = (*Value())[ItemName_TryLoadAlsoLegacyFilesAtRead()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace Settings
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETTINGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::Convert::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CONVERT)
namespace Convert
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_SourceFileName(void)
    {
        static std::string str("SourceFileName");
        return str;
    }
public:
    static std::string const& ItemName_DestinationHostingDirectoryName(void)
    {
        static std::string str("DestinationHostingDirectoryName");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.Convert");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_SourceFileName();
            Construct_DestinationHostingDirectoryName();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_SourceFileName();
            Construct_DestinationHostingDirectoryName();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_SourceFileName();
            Initialize_DestinationHostingDirectoryName();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::Convert");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item SourceFileName (Type: "std::string")
    protected:
        void Construct_SourceFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceFileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceFileName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_SourceFileName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_SourceFileName()))
                {
                    Construct_SourceFileName();
                }
                if ((*Value()).hasMember(ItemName_SourceFileName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_SourceFileName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_SourceFileName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_SourceFileName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_SourceFileName(void) const
        {
            return (*Value())[ItemName_SourceFileName()];
        }
        bool Get_SourceFileName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_SourceFileName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_SourceFileName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item DestinationHostingDirectoryName (Type: "std::string")
    protected:
        void Construct_DestinationHostingDirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DestinationHostingDirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DestinationHostingDirectoryName()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_DestinationHostingDirectoryName(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DestinationHostingDirectoryName()))
                {
                    Construct_DestinationHostingDirectoryName();
                }
                if ((*Value()).hasMember(ItemName_DestinationHostingDirectoryName()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_DestinationHostingDirectoryName()] = (std::string)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DestinationHostingDirectoryName(const std::string& SetValue)
        {
            try
            {
                (*Value())[ItemName_DestinationHostingDirectoryName()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_DestinationHostingDirectoryName(void) const
        {
            return (*Value())[ItemName_DestinationHostingDirectoryName()];
        }
        bool Get_DestinationHostingDirectoryName(std::string& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DestinationHostingDirectoryName()]).valid())
                {
                    GetValue = (std::string)((*Value())[ItemName_DestinationHostingDirectoryName()]);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace Convert
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CONVERT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CallAssistant::CParams
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CALLASSISTANT)
namespace CallAssistant
{
class CParams : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_Type(void)
    {
        static std::string str("Type");
        return str;
    }
public:
    static std::string const& ItemName_Parameters(void)
    {
        static std::string str("Parameters");
        return str;
    }
public:
    static std::string const& ItemName_DisableDRC(void)
    {
        static std::string str("DisableDRC");
        return str;
    }
public:
    static std::string const& ItemName_ReturnConfigChangesReasonBitset(void)
    {
        static std::string str("ReturnConfigChangesReasonBitset");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string strName("MethodID");
        return strName;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CallAssistant");
        return str;
    }
public:
    CParams(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
            Construct_Type();
            Construct_Parameters();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    CParams(const CParams& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CParams(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
            Construct_Type();
            Construct_Parameters();
            Construct_DisableDRC();
            Construct_ReturnConfigChangesReasonBitset();
        }
        catch (...) {}
    }
public:
    ~CParams(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
            Initialize_Type();
            Initialize_Parameters();
            Initialize_DisableDRC();
            Initialize_ReturnConfigChangesReasonBitset();
        }
        catch (...) {
        }
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CallAssistant");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Type (Type: "GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList")
    protected:
        void Construct_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Type(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Type()))
                {
                    Construct_Type();
                }
                if ((*Value()).hasMember(ItemName_Type()))
                {
                    GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList InitValue;
                    (*Value())[ItemName_Type()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Type(const GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Type()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList Get_Type(void) const
        {
            return (*Value())[ItemName_Type()];
        }
        bool Get_Type(GInsXmlRpcStdAPI::CGIns_Edit_ElementSelectionList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Type()]).valid())
                {
                    GetValue = (*Value())[ItemName_Type()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item Parameters (Type: "std::string[0]")
    protected:
        void Construct_Parameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Parameters()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Parameters()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Parameters(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Parameters()))
                {
                    Construct_Parameters();
                }
                if ((*Value()).hasMember(ItemName_Parameters()))
                {
                    std::string InitValue;
                    InitValue = "";
                    (*Value())[ItemName_Parameters()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Parameters(int NewSize)
        {
            try
            {
                std::string InitValue;
                InitValue = "";
                (*Value())[ItemName_Parameters()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Parameters(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Parameters()))
                {
                    return (*Value())[ItemName_Parameters()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Parameters(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Parameters()))
                {
                    (*Value())[ItemName_Parameters()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Parameters(int ArrayIndex, std::string SetValue)
        {
            try
            {
                (*Value())[ItemName_Parameters()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Parameters(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Parameters()))
                {
                    (*Value())[ItemName_Parameters()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Parameters(int ArrayIndex, const std::string& SetValue)
        {
            try
            {
                if (ArrayIndex >= GetSize_Parameters())
                {
                    SetSize_Parameters(ArrayIndex + 1);
                }
                (*Value())[ItemName_Parameters()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        std::string Get_Parameters(int ArrayIndex) const
        {
            return (*Value())[ItemName_Parameters()][ArrayIndex];
        }
        bool Get_Parameters(int ArrayIndex, std::string& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Parameters()))
                {
                    if (((*Value())[ItemName_Parameters()][ArrayIndex]).valid())
                    {
                        GetValue = (std::string)((*Value())[ItemName_Parameters()][ArrayIndex]);
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item DisableDRC (Type: "bool")
protected:
    void Construct_DisableDRC(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_DisableDRC()))
            {
                bool InitValue;
                InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_DisableDRC(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_DisableDRC()))
                {
                    Construct_DisableDRC();
                }
                if ((*Value()).hasMember(ItemName_DisableDRC()))
                {
                    bool InitValue;
                    InitValue = false;
                    (*Value())[ItemName_DisableDRC()] = (bool)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_DisableDRC(bool SetValue)
        {
            try
            {
                (*Value())[ItemName_DisableDRC()] = (bool)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Get_DisableDRC(void) const
        {
            bool GetValue = (*Value())[ItemName_DisableDRC()];
            return (bool)GetValue;
        }
        bool Get_DisableDRC(bool& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_DisableDRC()]).valid())
                {
                    GetValue = (bool)((bool)((*Value())[ItemName_DisableDRC()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
//------------------------------------------------------------------------
// Item ReturnConfigChangesReasonBitset (Type: "int32_t")
protected:
    void Construct_ReturnConfigChangesReasonBitset(void)
    {
        try
        {
            if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
            {
                int32_t InitValue;
                InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
            }
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
    public:
        bool Initialize_ReturnConfigChangesReasonBitset(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    Construct_ReturnConfigChangesReasonBitset();
                }
                if ((*Value()).hasMember(ItemName_ReturnConfigChangesReasonBitset()))
                {
                    int32_t InitValue;
                    InitValue = 0;
                    (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnConfigChangesReasonBitset(int32_t SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnConfigChangesReasonBitset()] = (int32_t)SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        int32_t Get_ReturnConfigChangesReasonBitset(void) const
        {
            int32_t GetValue = (*Value())[ItemName_ReturnConfigChangesReasonBitset()];
            return (int32_t)GetValue;
        }
        bool Get_ReturnConfigChangesReasonBitset(int32_t& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnConfigChangesReasonBitset()]).valid())
                {
                    GetValue = (int32_t)((int32_t)((*Value())[ItemName_ReturnConfigChangesReasonBitset()]));
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CParams
} // namespace CallAssistant
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CALLASSISTANT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetObjectTypes::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETOBJECTTYPES)
namespace GetObjectTypes
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Types(void)
    {
        static std::string str("Types");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetObjectTypes");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Types();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Types();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Types();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetObjectTypes");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Types (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_Types(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Types()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Types()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Types(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Types()))
                {
                    Construct_Types();
                }
                if ((*Value()).hasMember(ItemName_Types()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Types()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Types(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Types()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_Types(void) const
        {
            return (*Value())[ItemName_Types()];
        }
        bool Get_Types(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Types()]).valid())
                {
                    GetValue = (*Value())[ItemName_Types()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetObjectTypes
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETOBJECTTYPES)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetIDsFromObjectType::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETIDSFROMOBJECTTYPE)
namespace GetIDsFromObjectType
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_IDs(void)
    {
        static std::string str("IDs");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetIDsFromObjectType");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_IDs();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_IDs();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_IDs();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetIDsFromObjectType");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item IDs (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_IDs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_IDs()))
                {
                    Construct_IDs();
                }
                if ((*Value()).hasMember(ItemName_IDs()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_IDs()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_IDs(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_IDs()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_IDs(void) const
        {
            return (*Value())[ItemName_IDs()];
        }
        bool Get_IDs(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_IDs()]).valid())
                {
                    GetValue = (*Value())[ItemName_IDs()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetIDsFromObjectType
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETIDSFROMOBJECTTYPE)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetInfosFromIDs::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETINFOSFROMIDS)
namespace GetInfosFromIDs
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Infos(void)
    {
        static std::string str("Infos");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetInfosFromIDs");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Infos();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Infos();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Infos();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetInfosFromIDs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Infos (Type: "CType_Base_InfoWithOwner[0]")
    protected:
        void Construct_Infos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Infos()))
                {
                    CType_Base_InfoWithOwner InitValue;
                    (*Value())[ItemName_Infos()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Infos(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Infos()))
                {
                    Construct_Infos();
                }
                if ((*Value()).hasMember(ItemName_Infos()))
                {
                    CType_Base_InfoWithOwner InitValue;
                    (*Value())[ItemName_Infos()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Infos(int NewSize)
        {
            try
            {
                CType_Base_InfoWithOwner InitValue;
                (*Value())[ItemName_Infos()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Infos(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Infos()))
                {
                    return (*Value())[ItemName_Infos()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Infos(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Infos()))
                {
                    (*Value())[ItemName_Infos()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Infos(int ArrayIndex, CType_Base_InfoWithOwner SetValue)
        {
            try
            {
                (*Value())[ItemName_Infos()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Infos(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Infos()))
                {
                    (*Value())[ItemName_Infos()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Infos(int ArrayIndex, const CType_Base_InfoWithOwner& SetValue)
        {
            try
            {
                (*Value())[ItemName_Infos()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Infos()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_InfoWithOwner Get_Infos(int ArrayIndex) const
        {
            return (*Value())[ItemName_Infos()][ArrayIndex];
        }
        bool Get_Infos(int ArrayIndex, CType_Base_InfoWithOwner& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Infos()))
                {
                    if (((*Value())[ItemName_Infos()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Infos()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetInfosFromIDs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETINFOSFROMIDS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetPropertyNames::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMES)
namespace GetPropertyNames
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Names(void)
    {
        static std::string str("Names");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetPropertyNames");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Names();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Names();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Names();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetPropertyNames");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Names (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_Names(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Names()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Names()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Names(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Names()))
                {
                    Construct_Names();
                }
                if ((*Value()).hasMember(ItemName_Names()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_Names()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Names(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_Names()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_Names(void) const
        {
            return (*Value())[ItemName_Names()];
        }
        bool Get_Names(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Names()]).valid())
                {
                    GetValue = (*Value())[ItemName_Names()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetPropertyNames
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMES)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetPropertyNameVariants::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMEVARIANTS)
namespace GetPropertyNameVariants
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Variants(void)
    {
        static std::string str("Variants");
        return str;
    }
public:
    static std::string const& ItemName_VariantsAsList(void)
    {
        static std::string str("VariantsAsList");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetPropertyNameVariants");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Variants();
            Construct_VariantsAsList();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Variants();
            Construct_VariantsAsList();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Variants();
            Initialize_VariantsAsList();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetPropertyNameVariants");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Variants (Type: "CType_Base_PNV")
    protected:
        void Construct_Variants(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variants()))
                {
                    CType_Base_PNV InitValue;
                    (*Value())[ItemName_Variants()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_Variants(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Variants()))
                {
                    Construct_Variants();
                }
                if ((*Value()).hasMember(ItemName_Variants()))
                {
                    CType_Base_PNV InitValue;
                    (*Value())[ItemName_Variants()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Variants(const CType_Base_PNV& SetValue)
        {
            try
            {
                (*Value())[ItemName_Variants()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_PNV Get_Variants(void) const
        {
            return (*Value())[ItemName_Variants()];
        }
        bool Get_Variants(CType_Base_PNV& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_Variants()]).valid())
                {
                    GetValue = (*Value())[ItemName_Variants()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item VariantsAsList (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_VariantsAsList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariantsAsList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_VariantsAsList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_VariantsAsList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_VariantsAsList()))
                {
                    Construct_VariantsAsList();
                }
                if ((*Value()).hasMember(ItemName_VariantsAsList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_VariantsAsList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_VariantsAsList(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_VariantsAsList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_VariantsAsList(void) const
        {
            return (*Value())[ItemName_VariantsAsList()];
        }
        bool Get_VariantsAsList(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_VariantsAsList()]).valid())
                {
                    GetValue = (*Value())[ItemName_VariantsAsList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetPropertyNameVariants
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETPROPERTYNAMEVARIANTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::GetConfigs::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETCONFIGS)
namespace GetConfigs
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_Configs(void)
    {
        static std::string str("Configs");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.GetConfigs");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_Configs();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_Configs();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_Configs();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::GetConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item Configs (Type: "CType_Base_ConfigWithOwner[0]")
    protected:
        void Construct_Configs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Configs()))
                {
                    CType_Base_ConfigWithOwner InitValue;
                    (*Value())[ItemName_Configs()].setArraySizeAndInit(0,InitValue);
                }
            }
            catch (...) 
            {
                (*this).invalidate();
            }
    }
    public:
        bool Initialize_Configs(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_Configs()))
                {
                    Construct_Configs();
                }
                if ((*Value()).hasMember(ItemName_Configs()))
                {
                    CType_Base_ConfigWithOwner InitValue;
                    (*Value())[ItemName_Configs()].setArraySizeAndInit(0,InitValue);
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool SetSize_Configs(int NewSize)
        {
            try
            {
                CType_Base_ConfigWithOwner InitValue;
                (*Value())[ItemName_Configs()].setArraySizeAndInit(NewSize,InitValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        int GetSize_Configs(void) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Configs()))
                {
                    return (*Value())[ItemName_Configs()].size();
                }
            }
            catch (...) {}
            return 0;
        }
        void Clear_Configs(void)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Configs()))
                {
                    (*Value())[ItemName_Configs()].setArraySize(-1);
                }
            }
            catch (...) {}
        }
        bool Insert_Configs(int ArrayIndex, CType_Base_ConfigWithOwner SetValue)
        {
            try
            {
                (*Value())[ItemName_Configs()].insertArrayValue(ArrayIndex,SetValue);
                return true;
            }
            catch (...) {}
            return false;
        }
        bool Delete_Configs(int ArrayIndex)
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Configs()))
                {
                    (*Value())[ItemName_Configs()].deleteArrayValue(ArrayIndex);
                }
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_Configs(int ArrayIndex, const CType_Base_ConfigWithOwner& SetValue)
        {
            try
            {
                (*Value())[ItemName_Configs()].checkArraySizeOrExpand(ArrayIndex + 1);
                (*Value())[ItemName_Configs()][ArrayIndex] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Base_ConfigWithOwner Get_Configs(int ArrayIndex) const
        {
            return (*Value())[ItemName_Configs()][ArrayIndex];
        }
        bool Get_Configs(int ArrayIndex, CType_Base_ConfigWithOwner& GetValue) const
        {
            try
            {
                if ((*Value()).hasMember(ItemName_Configs()))
                {
                    if (((*Value())[ItemName_Configs()][ArrayIndex]).valid())
                    {
                        GetValue = (*Value())[ItemName_Configs()][ArrayIndex];
                        return true;
                    }
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace GetConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_GETCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SetConfigs::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETCONFIGS)
namespace SetConfigs
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SetConfigs");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SetConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace SetConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SetDefaultConfigs::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETDEFAULTCONFIGS)
namespace SetDefaultConfigs
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SetDefaultConfigs");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SetDefaultConfigs");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace SetDefaultConfigs
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETDEFAULTCONFIGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::RemoveObjects::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_REMOVEOBJECTS)
namespace RemoveObjects
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.RemoveObjects");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::RemoveObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace RemoveObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_REMOVEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::MoveObjects::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_MOVEOBJECTS)
namespace MoveObjects
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.MoveObjects");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::MoveObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace MoveObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_MOVEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CopyObjects::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_COPYOBJECTS)
namespace CopyObjects
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CopyObjects");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CopyObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace CopyObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_COPYOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::HandleObjects::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_HANDLEOBJECTS)
namespace HandleObjects
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.HandleObjects");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::HandleObjects");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace HandleObjects
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_HANDLEOBJECTS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CreateObject::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CREATEOBJECT)
namespace CreateObject
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ID(void)
    {
        static std::string str("ID");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CreateObject");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CreateObject");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ID (Type: "GInsXmlRpcStdAPI::CGIns_Base_ElementValue")
    protected:
        void Construct_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ID(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ID()))
                {
                    Construct_ID();
                }
                if ((*Value()).hasMember(ItemName_ID()))
                {
                    GInsXmlRpcStdAPI::CGIns_Base_ElementValue InitValue;
                    (*Value())[ItemName_ID()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ID(const GInsXmlRpcStdAPI::CGIns_Base_ElementValue& SetValue)
        {
            try
            {
                (*Value())[ItemName_ID()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Base_ElementValue Get_ID(void) const
        {
            return (*Value())[ItemName_ID()];
        }
        bool Get_ID(GInsXmlRpcStdAPI::CGIns_Base_ElementValue& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ID()]).valid())
                {
                    GetValue = (*Value())[ItemName_ID()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace CreateObject
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CREATEOBJECT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::SaveObject::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SAVEOBJECT)
namespace SaveObject
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.SaveObject");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::SaveObject");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace SaveObject
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SAVEOBJECT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::AssignObjectFromFile::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_ASSIGNOBJECTFROMFILE)
namespace AssignObjectFromFile
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.AssignObjectFromFile");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::AssignObjectFromFile");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace AssignObjectFromFile
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_ASSIGNOBJECTFROMFILE)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::Settings::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETTINGS)
namespace Settings
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.Settings");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::Settings");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace Settings
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_SETTINGS)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::Convert::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CONVERT)
namespace Convert
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.Convert");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_ReturnState();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_ReturnState();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_ReturnState();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::Convert");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace Convert
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CONVERT)


//------------------------------------------------------------------------
// giconfig_ConfigAPI::CallAssistant::CResults
//------------------------------------------------------------------------
#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CALLASSISTANT)
namespace CallAssistant
{
class CResults : public GInsXmlRpc::XmlRpcValue
{
public:
    static std::string const& ItemName_InfoList(void)
    {
        static std::string str("InfoList");
        return str;
    }
public:
    static std::string const& ItemName_ReturnState(void)
    {
        static std::string str("ReturnState");
        return str;
    }
public:
    static std::string const& ItemName_ReturnLists(void)
    {
        static std::string str("ReturnLists");
        return str;
    }
public:
    static std::string const& ItemName_MethodID(void)
    {
        static std::string str("MethodID");
        return str;
    }
public:
    static std::string const& MethodName(void)
    {
        static std::string str("ConfigAPI.CallAssistant");
        return str;
    }
public:
    CResults(void)
    {
        try
        {
            Construct_MethodID();
            Construct_InfoList();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    CResults(const CResults& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
    }
    CResults(const GInsXmlRpc::XmlRpcValue& rhs) :
        GInsXmlRpc::XmlRpcValue(rhs)
    {
        try
        {
            // special handling: not like structure ...
            if (!(*this).valid())
            {
                return;
            }
            Construct_MethodID();
            Construct_InfoList();
            Construct_ReturnState();
            Construct_ReturnLists();
        }
        catch (...) {}
    }
public:
    ~CResults(void)
    {
    }
public:
    const GInsXmlRpc::XmlRpcValue* Value(void) const
    {
        return (const GInsXmlRpc::XmlRpcValue*) this;
    }
    GInsXmlRpc::XmlRpcValue* Value(void)
    {
        return (GInsXmlRpc::XmlRpcValue*) this;
    }
public:
    void Initialize(void)
    {
        try
        {
            (*Value()).clear();
            Construct_MethodID();
            Initialize_InfoList();
            Initialize_ReturnState();
            Initialize_ReturnLists();
        }
        catch (...) {}
    }
protected:
    void Construct_MethodID(void)
    {
        try
        {
            (*Value())[ItemName_MethodID()] = std::string("ConfigAPI::CallAssistant");
        }
        catch (...)
        {
            (*this).invalidate();
        }
    }
public:
    const std::string Get_MethodID(void) const
    {
        try
        {
            if ((*Value()).hasMember(ItemName_MethodID()))
            {
                return (*Value())[ItemName_MethodID()];
            }
            return std::string("");
        }
        catch (...)
        {
            return std::string("");
        }
    }
    //------------------------------------------------------------------------
    // Item InfoList (Type: "GInsXmlRpcStdAPI::CGIns_Info_ElementList")
    protected:
        void Construct_InfoList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_InfoList()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_InfoList(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_InfoList()))
                {
                    Construct_InfoList();
                }
                if ((*Value()).hasMember(ItemName_InfoList()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_ElementList InitValue;
                    (*Value())[ItemName_InfoList()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_InfoList(const GInsXmlRpcStdAPI::CGIns_Info_ElementList& SetValue)
        {
            try
            {
                (*Value())[ItemName_InfoList()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_ElementList Get_InfoList(void) const
        {
            return (*Value())[ItemName_InfoList()];
        }
        bool Get_InfoList(GInsXmlRpcStdAPI::CGIns_Info_ElementList& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_InfoList()]).valid())
                {
                    GetValue = (*Value())[ItemName_InfoList()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnState (Type: "GInsXmlRpcStdAPI::CGIns_Info_State")
    protected:
        void Construct_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnState(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnState()))
                {
                    Construct_ReturnState();
                }
                if ((*Value()).hasMember(ItemName_ReturnState()))
                {
                    GInsXmlRpcStdAPI::CGIns_Info_State InitValue;
                    (*Value())[ItemName_ReturnState()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnState(const GInsXmlRpcStdAPI::CGIns_Info_State& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnState()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        GInsXmlRpcStdAPI::CGIns_Info_State Get_ReturnState(void) const
        {
            return (*Value())[ItemName_ReturnState()];
        }
        bool Get_ReturnState(GInsXmlRpcStdAPI::CGIns_Info_State& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnState()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnState()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    //------------------------------------------------------------------------
    // Item ReturnLists (Type: "CType_Info_ReturnLists")
    protected:
        void Construct_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                }
            }
            catch (...)
            {
                (*this).invalidate();
            }
        }
    public:
        bool Initialize_ReturnLists(void)
        {
            try
            {
                if (!(*Value()).hasMember(ItemName_ReturnLists()))
                {
                    Construct_ReturnLists();
                }
                if ((*Value()).hasMember(ItemName_ReturnLists()))
                {
                    CType_Info_ReturnLists InitValue;
                    (*Value())[ItemName_ReturnLists()] = InitValue;
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
    public:
        bool Set_ReturnLists(const CType_Info_ReturnLists& SetValue)
        {
            try
            {
                (*Value())[ItemName_ReturnLists()] = SetValue;
                return true;
            }
            catch (...) {}
            return false;
        }
    public:
        CType_Info_ReturnLists Get_ReturnLists(void) const
        {
            return (*Value())[ItemName_ReturnLists()];
        }
        bool Get_ReturnLists(CType_Info_ReturnLists& GetValue) const
        {
            try
            {
                if (((*Value())[ItemName_ReturnLists()]).valid())
                {
                    GetValue = (*Value())[ItemName_ReturnLists()];
                    return true;
                }
            }
            catch (...) {}
            return false;
        }
}; // class CResults
} // namespace CallAssistant
#endif //#if defined(IMPLEMENT_GICONFIG_CONFIGAPI_CALLASSISTANT)
//========================================================================
}; // namespace giconfig_ConfigAPI
//========================================================================
#endif // #if !defined(_GICONFIG_CONFIGAPI_TYPES_H)

